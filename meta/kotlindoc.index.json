{
  "ownKey": "kotlindoc",
  "childrenPages": {
    "themes": {
      "ownKey": "themes",
      "childrenPages": {
        "orchidcopper": {
          "ownKey": "orchidcopper",
          "ownPages": [{
            "reference": {
              "path": "themes",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidcopper",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/themes/orchidcopper"
            },
            "description": "",
            "title": "OrchidCopper",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"08hFJuv039\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"08hFJuv039\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidCopper:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidCopper&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidCopper&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidCopper:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"screenshots\"><a href=\"#screenshots\" id=\"screenshots\" class=\"anchor\"><\/a>Screenshots<\/h2>\n<div class=\"columns is-multiline is-centered\">\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Homepage<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1549253492/themes/copper/1.png\" alt=\"Homepage\" title=\"Homepage\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Page Layout<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1549253492/themes/copper/2.jpg\" alt=\"Page Layout\" title=\"Page Layout\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">No-Box Layout<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1549253492/themes/copper/3.jpg\" alt=\"No-Box Layout\" title=\"No-Box Layout\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Forms<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1549253492/themes/copper/4.jpg\" alt=\"Forms\" title=\"Forms\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n<\/div>\n"
          }]
        },
        "orchidfutureimperfect": {
          "ownKey": "orchidfutureimperfect",
          "ownPages": [{
            "reference": {
              "path": "themes",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidfutureimperfect",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/themes/orchidfutureimperfect"
            },
            "description": "",
            "title": "OrchidFutureImperfect",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"xg1Hsk7GXH\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"xg1Hsk7GXH\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidFutureImperfect:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidFutureImperfect&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidFutureImperfect&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidFutureImperfect:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"screenshots\"><a href=\"#screenshots\" id=\"screenshots\" class=\"anchor\"><\/a>Screenshots<\/h2>\n<div class=\"columns is-multiline is-centered\">\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Homepage<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524969542/themes/futureimperfect/1.jpg\" alt=\"Homepage\" title=\"Homepage\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Post Layout<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524969542/themes/futureimperfect/2.jpg\" alt=\"Post Layout\" title=\"Post Layout\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Search<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524969542/themes/futureimperfect/3.jpg\" alt=\"Search\" title=\"Search\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Sidebar<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524969542/themes/futureimperfect/4.jpg\" alt=\"Sidebar\" title=\"Sidebar\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n<\/div>\n"
          }]
        },
        "orchideditorial": {
          "ownKey": "orchideditorial",
          "ownPages": [{
            "reference": {
              "path": "themes",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchideditorial",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/themes/orchideditorial"
            },
            "description": "",
            "title": "OrchidEditorial",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"XMV4YIPMrM\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"XMV4YIPMrM\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidEditorial:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidEditorial&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidEditorial&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidEditorial:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"screenshots\"><a href=\"#screenshots\" id=\"screenshots\" class=\"anchor\"><\/a>Screenshots<\/h2>\n<div class=\"columns is-multiline is-centered\">\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Homepage<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524970938/themes/editorial/1.jpg\" alt=\"Homepage\" title=\"Homepage\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Post Layout<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524970938/themes/editorial/2.jpg\" alt=\"Post Layout\" title=\"Post Layout\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Search<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524970938/themes/editorial/3.jpg\" alt=\"Search\" title=\"Search\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n<\/div>\n"
          }]
        },
        "orchidbsdoc": {
          "ownKey": "orchidbsdoc",
          "ownPages": [{
            "reference": {
              "path": "themes",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidbsdoc",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/themes/orchidbsdoc"
            },
            "description": "",
            "title": "OrchidBsDoc",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"uExGnmGaiH\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"uExGnmGaiH\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidBsDoc:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidBsDoc&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidBsDoc&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidBsDoc:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"screenshots\"><a href=\"#screenshots\" id=\"screenshots\" class=\"anchor\"><\/a>Screenshots<\/h2>\n<div class=\"columns is-multiline is-centered\">\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Homepage<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524971822/themes/bsdoc/1.jpg\" alt=\"Homepage\" title=\"Homepage\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Post Layout<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524971822/themes/bsdoc/2.jpg\" alt=\"Post Layout\" title=\"Post Layout\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Wiki Summary and Search<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524971822/themes/bsdoc/3.jpg\" alt=\"Wiki Summary and Search\" title=\"Wiki Summary and Search\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Documentation<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524971822/themes/bsdoc/4.jpg\" alt=\"Documentation\" title=\"Documentation\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n  <div class=\"column is-half-desktop is-one-third-widescreen is-one-quarter-fullhd\">\n    <div class=\"box is-paddingless\">\n      <div class=\"border-bottom\" style=\"padding: 0.75rem 1.25rem; margin-bottom: 0.75rem;\">\n        <h3 class=\"subtitle\" style=\"white-space: nowrap;\">Javadocs<\/h3>\n      <\/div>\n      <figure class=\"image image is-3by2\">\n        <img src=\"https://res.cloudinary.com/orchid/image/upload/c_fit,h_320,w_480/v1524971822/themes/bsdoc/5.jpg\" alt=\"Javadocs\" title=\"Javadocs\" style=\"border-radius: 0 0 6px 6px;\">\n      <\/figure>\n    <\/div>\n  <\/div>\n\n<\/div>\n"
          }]
        }
      }
    },
    "plugins": {
      "ownKey": "plugins",
      "childrenPages": {
        "orchidsnippets": {
          "ownKey": "orchidsnippets",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidsnippets",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidsnippets"
            },
            "description": "",
            "title": "OrchidSnippets",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>Extract snippets from project files and create reusable content sections. Render as plain content, or tag your snippets\nso they can be easily rendered as tabs.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"8YQzbgPM3m\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"8YQzbgPM3m\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidSnippets:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidSnippets&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidSnippets&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidSnippets:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidSnippets/src/test/kotlin/SnippetsTest.kt\">WikiGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<p>You can configure multiple methods of loading snippets, called &quot;sections&quot;. Each section loads snippets, and you can\nassign tags to the snippets loaded in each section. You can then display individual snippets, or tagged groups of\nsnippets, with Components, TemplateTags, or a TemplateFunction.<\/p>\n<h2 id=\"load-snippets\"><a href=\"#load-snippets\" id=\"load-snippets\" class=\"anchor\"><\/a>Load Snippets<\/h2>\n<h3 id=\"file-snippets\"><a href=\"#file-snippets\" id=\"file-snippets\" class=\"anchor\"><\/a>File Snippets<\/h3>\n<p>File snippets are entire files, each loaded as a snippet. The name of the file becomes the &quot;name&quot; of the snippet. Front\nMatter inside each snippet's file can add tags to that snippet.<\/p>\n<p>The File adapter will load all files in a given directory, and is non-recursive by default. If no configuration to the\nSnippets plugin is provided, file snippets from the <code>snippets/<\/code> directory will be used.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\n\nsnippets:\n  sections:\n    - tags: ['file_snippets']\n      adapter: \n        type: 'file'\n        baseDirs: ['snippets']\n        recursive: false\n<\/code><\/pre>\n<p>With the above config, the following files will be loaded as snippets:<\/p>\n<pre><code class=\"language-md\"># snippets/snippet-one.md\n---\ntags: \n  - 'one'\n---\nSnippet One\n<\/code><\/pre>\n<pre><code class=\"language-md\"># snippets/snippet-two.md\n---\ntags: \n  - 'two'\n---\nSnippet Two\n<\/code><\/pre>\n<p>The following table shows how these snippets are available as data:<\/p>\n<table>\n<thead>\n<tr><th>Snippet Name<\/th><th>Tags<\/th><th>Content<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td><code>snippet-one<\/code><\/td><td><code>file_snippets<\/code>, <code>one<\/code><\/td><td>Snippet One<\/td><\/tr>\n<tr><td><code>snippet-two<\/code><\/td><td><code>file_snippets<\/code>, <code>two<\/code><\/td><td>Snippet Two<\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"embedded-snippets\"><a href=\"#embedded-snippets\" id=\"embedded-snippets\" class=\"anchor\"><\/a>Embedded Snippets<\/h3>\n<p>Embedded snippets search through the contents of text files to locate snippets between pairs of &quot;start&quot; and &quot;end&quot;\ndelimiters. A single file can have multiple snippets embedded within it. The name, and optionally additional tags, are\ngiven by the &quot;start&quot; delimiter. The Embedded adapter will recursively search files in a directory by default.<\/p>\n<p>Snippets can be found between delimiters of the format: <code>snippet::snippet_name[tags]<\/code> and <code>end::snippet_name<\/code>. These\ndelimiters must be at the <em>end<\/em> of the line, and the content is everything <em>between<\/em> those lines (the delimiter lines\nthemselves are not part of the snippet content). Embedded snippets are commonly used for pulling content out of unit\ntest code, and so should be added as standard line comments in whatever code language they are embedded in.<\/p>\n<p>The tags portion of the start delimiter should be a simple comma-separated list of tags. The snippet name of the end\ndelimiter is optional, so can simply be <code>end::<\/code> for brevity. If present, it should match the name of the start\ndelimiter.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\n\nsnippets:\n  sections:\n    - tags: ['embedded_snippets']\n      adapter: \n        type: 'embedded'\n        baseDirs: ['src/test']\n        recursive: true\n<\/code><\/pre>\n<p>With the above config, the following file will have its content loaded as snippets:<\/p>\n<pre><code class=\"language-md\"># src/test/SnippetsTest.md\n\n# snippet::snippet-one[one]\nSnippet One\n# end::snippet-one\n\n# snippet::snippet-two[two]\nSnippet Two\n# end::\n<\/code><\/pre>\n<p>The following table shows how these snippets are available as data:<\/p>\n<table>\n<thead>\n<tr><th>Snippet Name<\/th><th>Tags<\/th><th>Content<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td><code>snippet-one<\/code><\/td><td><code>embedded_snippets<\/code>, <code>one<\/code><\/td><td>Snippet One<\/td><\/tr>\n<tr><td><code>snippet-two<\/code><\/td><td><code>embedded_snippets<\/code>, <code>two<\/code><\/td><td>Snippet Two<\/td><\/tr>\n<\/tbody>\n<\/table>\n<p>In addition, you can customize the regex used for the start and end delimiters with the <code>startPattern<\/code> and <code>endPattern<\/code>\nproperties. By default, the adapter expects the regex group 1 of the <code>startPattern<\/code> to contain the name of the snippet,\nwhich is also the same group for the end delimiter. Group 2 is the default comma-separated list of tags, but is not\nrequired to be part of the regex. The indicies of both of these groups can also be customized with <code>patternNameGroup<\/code>\nand <code>patternTagGroup<\/code> properties.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\n\nsnippets:\n  sections:\n    - tags: ['embedded_snippets']\n      adapter: \n        type: 'embedded'\n        baseDirs: ['src/test']\n        recursive: true\n        startPattern: '^.*?START(.+?)$'\n        endPattern: '^.*?END(.+?)$'\n        patternNameGroup: 1\n        patternTagGroup: 2\n<\/code><\/pre>\n<h3 id=\"remote-snippets\"><a href=\"#remote-snippets\" id=\"remote-snippets\" class=\"anchor\"><\/a>Remote Snippets<\/h3>\n<p>Remote snippets come from external webpages. The Remote adapter will download a webpage over HTTP and extract a snippet\nfrom a CSS selector on that page.<\/p>\n<p>The Remote adapter will only fetch a file URL, but you can load multiple selectors from that one webpage. You must\nconfigure multiple sections to load snippets from multiple webpages.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\n\nsnippets:\n  sections:\n    - tags: ['remote_snippets']\n      adapter: \n        type: 'remote'\n        url: 'https://www.example.com'\n        selectors:\n          - name: 'snippet-one'\n            selector: '#one'\n            tags: ['one']\n          - name: 'snippet-two'\n            selector: '#two'\n            tags: ['two']\n<\/code><\/pre>\n<p>With the above config, the following webpage will have its content loaded as snippets:<\/p>\n<pre><code class=\"language-md\">&lt;div id=&quot;one&quot;&gt;\n    Snippet One\n&lt;/div&gt;\n\n&lt;div id=&quot;two&quot;&gt;\n    Snippet One\n&lt;/div&gt;\n<\/code><\/pre>\n<p>The following table shows how these snippets are available as data:<\/p>\n<table>\n<thead>\n<tr><th>Snippet Name<\/th><th>Tags<\/th><th>Content<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td><code>snippet-one<\/code><\/td><td><code>remote_snippets<\/code>, <code>one<\/code><\/td><td>Snippet One<\/td><\/tr>\n<tr><td><code>snippet-two<\/code><\/td><td><code>remote_snippets<\/code>, <code>two<\/code><\/td><td>Snippet Two<\/td><\/tr>\n<\/tbody>\n<\/table>\n<p>If you only have a single selector for a webpage, you can use an abbreviated form of configuration:<\/p>\n<pre><code class=\"language-yaml\"># config.yml\n\nsnippets:\n  sections:\n    - tags: ['remote_snippets']\n      adapter: \n        type: 'remote'\n        url: 'https://www.example.com'\n        name: 'snippet-one'\n        selector: '#one'\n<\/code><\/pre>\n<h2 id=\"display-snippets\"><a href=\"#display-snippets\" id=\"display-snippets\" class=\"anchor\"><\/a>Display Snippets<\/h2>\n<p>You can display snippets in a number of ways once they have been loaded. There are 2 mains ways to display snippets:\nas a single snippet (looked up by name), or multiple snippets in tabs (looked up by tags).<\/p>\n<p>Snippets are compiled according to their normal file extension before being embedded into the page. For example, a File\nsnippet with a <code>.md<\/code> extension will be compiled as Markdown, even if it's embedded in an Asciidoc page. Likewise,\nEmbedded snippets that came from a <code>.md<\/code> file will also be compiled as markdown.<\/p>\n<h3 id=\"single-snippet\"><a href=\"#single-snippet\" id=\"single-snippet\" class=\"anchor\"><\/a>Single Snippet<\/h3>\n<p>Single snippets display their contents with no additional markup. Snippets are looked up using their &quot;name&quot;.<\/p>\n<h4 id=\"snippet-component\"><a href=\"#snippet-component\" id=\"snippet-component\" class=\"anchor\"><\/a><code>snippet<\/code> Component<\/h4>\n<pre><code class=\"language-md\">---\ncomponents:\n  - type: snippet\n    snippetName: 'snippetName'\n---\n<\/code><\/pre>\n<h4 id=\"snippet-templatetag\"><a href=\"#snippet-templatetag\" id=\"snippet-templatetag\" class=\"anchor\"><\/a><code>snippet<\/code> TemplateTag<\/h4>\n<pre><code class=\"language-md\">---\n---\n{% snippet 'snippetName' %}\n<\/code><\/pre>\n<h4 id=\"snippet-templatefunction\"><a href=\"#snippet-templatefunction\" id=\"snippet-templatefunction\" class=\"anchor\"><\/a><code>snippet<\/code> TemplateFunction<\/h4>\n<pre><code class=\"language-md\">---\n---\n{$ set s = snippet('snippetName') %]\nContent: {{ s.content | raw }}\nName: {{ s.name }}\nTags: {{ s.tags | join(', ') }}\n<\/code><\/pre>\n<h3 id=\"snippet-tabs\"><a href=\"#snippet-tabs\" id=\"snippet-tabs\" class=\"anchor\"><\/a>Snippet Tabs<\/h3>\n<p>Multiple snippets can be easily displayed together in tabs by giving them the proper tabs. You then query snippets by\none or more tags, and all snippets which have <em>all<\/em> the specified tags will be loaded and displayed in tabs together.\nThe &quot;name&quot; of the snippet will be the text of the tab, while the snippet contents will be the content of that tab, when\nselected.<\/p>\n<p>These tabs use the default <code>{% tab %}<\/code> template tag to render the tabs, and so will match the rest of the tabs\nfor your theme.<\/p>\n<h4 id=\"snippets-component\"><a href=\"#snippets-component\" id=\"snippets-component\" class=\"anchor\"><\/a><code>snippets<\/code> Component<\/h4>\n<pre><code class=\"language-md\">---\ncomponents:\n  - type: snippets\n    snippetTags: ['snippetTag1', 'snippetTag2']\n---\n<\/code><\/pre>\n<h4 id=\"snippets-templatetag\"><a href=\"#snippets-templatetag\" id=\"snippets-templatetag\" class=\"anchor\"><\/a><code>snippets<\/code> TemplateTag<\/h4>\n<pre><code class=\"language-md\">---\n---\n{% snippets ['snippetTag1', 'snippetTag2'] %}\n<\/code><\/pre>\n<h2 id=\"snippet-admin-panel\"><a href=\"#snippet-admin-panel\" id=\"snippet-admin-panel\" class=\"anchor\"><\/a>Snippet Admin Panel<\/h2>\n<p>This plugin documents itself in the <a href=\"https://orchid-revival.github.io/Orchid/wiki/user-manual/getting-started/admin-panel\">Admin Panel<\/a>. All snippets that were located will be displayed in a\ntable with their name and tags. You can filter the entries in this table by tag, just the same as filtering them by tag\nfor display in tabs.<\/p>\n"
          }]
        },
        "orchidwiki": {
          "ownKey": "orchidwiki",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidwiki",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidwiki"
            },
            "description": "A Gitbook-like wiki for your Orchid site.",
            "title": "OrchidWiki",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>Publish searchable and easily-navigable wikis, inspired by the legacy\n<a href=\"https://github.com/GitbookIO/gitbook\">GitBook CLI<\/a>, and generate PDFs for offline viewing.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"qqhN1yNnHz\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"qqhN1yNnHz\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidWiki:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidWiki&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidWiki&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidWiki:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidWiki/src/test/kotlin/com/eden/orchid/wiki/WikiGeneratorTest.kt\">WikiGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"basic-usage\"><a href=\"#basic-usage\" id=\"basic-usage\" class=\"anchor\"><\/a>Basic Usage<\/h3>\n<p>An Orchid Wiki is a collection of pages structured in a freeform hierarchy. Pages in a wiki are all related and ordered,\nwith one page linking directly to the next so a user can read the entire contents of the wiki from front-end simply by\nnavigating the page links. Orchid Wikis also create Menu items which display the full wiki tree in an easily navigable\nfashion.<\/p>\n<p>Wikis in Orchid are inspired by GitBook and are set up in a similar manner. To start, add a file named <code>summary<\/code> (in\nyour language of choice) to <code>wiki/<\/code>. This file becomes the landing page for the wiki and can contain any kind of\ncontent, which gets displayed exactly as written. But it also gets converted to HTML and all links in this file become a\npage in the wiki.<\/p>\n<p>For example:<\/p>\n<pre><code class=\"language-html\">### Wiki Heading\n\n[Getting Started](getting-started.md)\n[Basic Setup](setup/basic.md)\n[Advanced Setup](setup/advanced.md)\n<\/code><\/pre>\n<p>corresponds to the following directory structure:<\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n└── /wiki\n    ├── summary.md\n    ├── getting-started.md\n    └── /setup\n        ├── basic.md\n        └── advanced.md\n<\/code><\/pre>\n<p>which produces the following output:<\/p>\n<pre><code class=\"language-text\">. /wiki\n├── /summary\n|   └── index.html\n├── /getting-started\n|   └── index.html\n└── /setup\n    ├── /basic\n    |   └── index.html\n    └── /advanced\n        └── index.html\n<\/code><\/pre>\n<p>The content of those wiki pages can be anything, and can be written in any language as long as there is a Compiler for\nit (just like the summary, and any other page). Orchid also creates a new menu item type which links to every page in\nthe wiki and is displayed recursively in the same hierarchy as the pages themselves.<\/p>\n<h3 id=\"wiki-sections\"><a href=\"#wiki-sections\" id=\"wiki-sections\" class=\"anchor\"><\/a>Wiki Sections<\/h3>\n<p>You can set up multiple wiki sections which each have their own <code>summary<\/code> file, pages, and menu items. The following\nsnippet should go in your site's <code>config.yml<\/code>:<\/p>\n<pre><code class=\"language-yaml\">wiki:\n  sections:\n    - 'userManual'  # (1)\n    - 'developerGuide'  # (2)\n<\/code><\/pre>\n<ol>\n<li>Creates a wiki based on <code>{baseDir}/userManual/summary.md<\/code>, and lives at /wiki/userManual<\/li>\n<li>Creates a wiki based on <code>{baseDir}/developerGuide/summary.md<\/code>, and lives at /wiki/developerGuide<\/li>\n<\/ol>\n<p>You can configure all your sections at once by putting configuration values under the <code>defaultConfig<\/code> property.<\/p>\n<pre><code class=\"language-yaml\">wiki:\n  sections:\n    - 'userManual'\n    - 'developerGuide'\n  defaultConfig: // applied to both userManual and developerGuide sections \n    createPdf: true\n<\/code><\/pre>\n<p>If you have more than one section in your site, a &quot;section index&quot; page will also be created, linking to each individual\nsection. This index file will live at <code>/wiki<\/code>.<\/p>\n<h3 id=\"offline-documentation\"><a href=\"#offline-documentation\" id=\"offline-documentation\" class=\"anchor\"><\/a>Offline Documentation<\/h3>\n<p>As of 0.13.0, the wiki plugin includes support for offline documentation. PDFs are an opt-in feature; to enable PDF\ngeneration, simply add <code>createPdf: true<\/code> to the section configuration for have it generate a PDF with all the content\nfor that section of your wiki. Each section will now generate <code>book.pdf<\/code> in the section root.<\/p>\n<pre><code class=\"language-yaml\">wiki: \n  sections:\n    - key: userManual\n      createPdf: true\n    - key: developerGuide\n      createPdf: true\n<\/code><\/pre>\n<p>The PDF starts with the section <code>summary.md<\/code> as a Table of Contents, and each page in the wiki starts after a page break\nin the PDF, and the TOC links to each page. You may override <code>templates/wiki/book.peb<\/code> to customize your PDFs as needed.\nPDFs are generated from HTML using the <a href=\"https://github.com/danfickle/openhtmltopdf\">OpenHTMLToPDF<\/a> library.<\/p>\n<h3 id=\"wiki-adapters\"><a href=\"#wiki-adapters\" id=\"wiki-adapters\" class=\"anchor\"><\/a>Wiki Adapters<\/h3>\n<p>Orchid is able to connect to external Wiki services, which provide content to embed in an Orchid site. This allows you\nto effectively use these services as a headless CMS and let Orchid publish them as a full website alongside your other\ndocumentation and content, utilizing the other Orchid features you love like full-text search and PDF generation for\noffline viewing.<\/p>\n<p>The following plugins provide adapters to external Wikis:<\/p>\n<ul>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidgithub\">OrchidGithub<\/a> - Connect to a repository's <a href=\"https://guides.github.com/features/wikis/\">GitHub Wiki<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidgitlab\">OrchidGitlab<\/a> - Connect to a repository's <a href=\"https://docs.gitlab.com/ee/user/project/wiki/\">GitLab Wiki<\/a><\/li>\n<\/ul>\n<p>Adapters can be set individually for each Section in your wiki by declaring the intended adapter and its options in you\n<code>config.yml<\/code>. See the plugin pages linked above for more info on configuring each wiki adapter.<\/p>\n<pre><code class=\"language-yaml\">wiki: \n  sections:\n    userManual:\n      adapter: \n        type: &quot;github&quot;\n        repo: &quot;copper-leaf/wiki-with-sidebar&quot;\n    developerGuide:\n      adapter: \n        type: &quot;gitlab&quot;\n        repo: &quot;cjbrooks12/wiki-without-sidebar&quot;\n<\/code><\/pre>\n"
          }]
        },
        "orchidbitbucket": {
          "ownKey": "orchidbitbucket",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidbitbucket",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidbitbucket"
            },
            "description": "Connect your Orchid site to Bitbucket services.",
            "title": "OrchidBitbucket",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>OrchidBitbucket connects Orchid to Bitbucket's Cloud services, including integrating\n<a href=\"https://confluence.atlassian.com/bitbucket/wikis-221449748.html\">Wikis<\/a> and publishing your site directly to\n<a href=\"https://confluence.atlassian.com/bitbucket/publishing-a-website-on-bitbucket-cloud-221449776.html\">Bitbucket Cloud<\/a>.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"baLRPlDd8z\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"baLRPlDd8z\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidBitbucket:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidBitbucket&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidBitbucket&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidBitbucket:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<p>This plugin is currently still in progress and not all features are available with a demo yet. Please check back later.<\/p>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"wiki-adapter\"><a href=\"#wiki-adapter\" id=\"wiki-adapter\" class=\"anchor\"><\/a>Wiki Adapter<\/h3>\n<blockquote>\n<p><em>This feature is still in progress and is not yet available<\/em><\/p>\n<\/blockquote>\n<p>OrchidBitbucket comes with a <code>bitbucket<\/code> Wiki Adapter, to integrate a project wiki as an Orchid wiki section. This will\nclone the wiki repository and convert its contents to an Orchid wiki automatically. Pages will be ordered\nalphabetically, with the &quot;Home&quot; page becoming the wiki summary page.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nwiki: \n  sections:\n    userManual:\n      adapter: \n        type: &quot;bitbucket&quot;\n        repo: &quot;[Bitbucket wiki repository URL]&quot;\n<\/code><\/pre>\n<h3 id=\"bitbucket-cloud-publisher\"><a href=\"#bitbucket-cloud-publisher\" id=\"bitbucket-cloud-publisher\" class=\"anchor\"><\/a>Bitbucket Cloud Publisher<\/h3>\n<p>The <code>bitbucketCloud<\/code> publisher will take your rendered site and publish it to a static website on\n<a href=\"https://confluence.atlassian.com/bitbucket/publishing-a-website-on-bitbucket-cloud-221449776.html\">Bitbucket Cloud<\/a> for\nyour workspace. You must have an app password set for publication to work, see <a href=\"#configuration\">Configuration<\/a> below.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nservices:\n  publications:\n    stages:\n      - type: 'bitbucketCloud'\n        username: '[username]' # the username which created the app password\n        repo: '[repo name]' # such as [workspaceID].bitbucket.io\n<\/code><\/pre>\n<h3 id=\"configuration\"><a href=\"#configuration\" id=\"configuration\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>You must generate an <a href=\"https://confluence.atlassian.com/bitbucket/app-passwords-828781300.html\">App password<\/a> from\nBitbucket to successfully authenticate and allow Orchid to perform actions on your behalf, like publishing a site to\nBitbucket Cloud. This can be set as the <code>bitbucketToken<\/code> environment variable, or passed to Orchid from Gradle.<\/p>\n<pre><code class=\"language-groovy\">// build.gradle\norchid {\n    bitbucketToken = project.property(&quot;bitbucketToken&quot;)\n}\n<\/code><\/pre>\n<p>Note that this token grants full access to your account, and should be treated like any normal password. Never check it\nin to your repository.<\/p>\n"
          }]
        },
        "orchidgitlab": {
          "ownKey": "orchidgitlab",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidgitlab",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidgitlab"
            },
            "description": "Connect your site to GitLab services.",
            "title": "OrchidGitlab",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>OrchidGitlab connects Orchid to Gitlab's services, including integrating\n<a href=\"https://docs.gitlab.com/ee/user/project/wiki/\">wikis<\/a> and publishing your site directly to\n<a href=\"https://about.gitlab.com/product/pages/\">Gitlab Pages<\/a>.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"bSnVT6DJxT\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"bSnVT6DJxT\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidGitlab:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidGitlab&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidGitlab&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidGitlab:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/integrations/OrchidGitlab/src/test/kotlin/com/eden/orchid/gitlab/wiki/GitlabWikiAdapterTest.kt\">GitlabWikiAdapterTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"wiki-adapter\"><a href=\"#wiki-adapter\" id=\"wiki-adapter\" class=\"anchor\"><\/a>Wiki Adapter<\/h3>\n<p>OrchidGitlab comes with a <code>gitlab<\/code> Wiki Adapter, to integrate a project wiki as an Orchid wiki section. This will\nclone the wiki repository and convert its contents to an Orchid wiki automatically. If a <code>_Sidebar<\/code> file exists in the\nwiki, pages will be ordered according to the order of links in that sidebar file. Otherwise, pages will be ordered\nalphabetically, with a summary page generated listing all pages in order.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nwiki: \n  sections:\n    userManual:\n      adapter: \n        type: &quot;gitlab&quot;\n        repo: &quot;[username/repo]&quot; # the wiki attached to this project will be used\n<\/code><\/pre>\n<h3 id=\"gitlab-pages-publisher\"><a href=\"#gitlab-pages-publisher\" id=\"gitlab-pages-publisher\" class=\"anchor\"><\/a>Gitlab Pages Publisher<\/h3>\n<p>The <code>gitlabPages<\/code> publisher will take your rendered site and publish it to a static website on\n<a href=\"https://about.gitlab.com/product/pages/\">Gitlab Pages<\/a>. You must have a personal access token set for publication to work, see\n<a href=\"#configuration\">Configuration<\/a> below.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nservices:\n  publications:\n    stages:\n      - type: 'gitlabPages'\n        username: '[username]' # the username which created the personal access token\n        repo: '[username/repo]' # the repo to publish to\n<\/code><\/pre>\n<h3 id=\"configuration\"><a href=\"#configuration\" id=\"configuration\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>You must generate a\n<a href=\"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html\">personal access token<\/a> from Gitlab to successfully\nauthenticate and allow Orchid to perform actions on your behalf, like publishing a site to Gitlab Pages. This can be set\nas the <code>gitlabToken<\/code> environment variable, or passed to Orchid from Gradle.<\/p>\n<pre><code class=\"language-groovy\">// build.gradle\norchid {\n    gitlabToken = project.property(&quot;gitlabToken&quot;)\n}\n<\/code><\/pre>\n<p>Note that this token grants full access to your account, and should be treated like any normal password. Never check it\nin to your repository.<\/p>\n"
          }]
        },
        "orchidkotlindoc": {
          "ownKey": "orchidkotlindoc",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidkotlindoc",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidkotlindoc"
            },
            "description": "Embed Kotlin and Java documentation in your Orchid site using Dokka.",
            "title": "OrchidKotlindoc",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The OrchidKotlindoc plugin integrates with the <a href=\"https://github.com/Kotlin/dokka\">Dokka<\/a> CLI to embed class and package\ninfo and <a href=\"https://kotlinlang.org/docs/reference/kotlin-doc.html#kdoc-syntax\">KDoc<\/a> comments from Kotlin and Java source\ncode directly in your Orchid site.<\/p>\n<article class=\"message is-info\">\n\n  <div class=\"message-body\">\n  <p>The suite of Orchid Sourcedocs plugins are for designed for merging source code documentation with the rest of your\nproject site.<\/p>\n<p>Orchid Sourcedocs supports multi-module projects with READMEs and separate doc groups for each module, customizable\npermalinks, auto-updating menu items, and an ever-improving data model to link to doc pages and display the\nrelationships among different elements.<\/p>\n<p>It also integrates client-side full-text search from the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidsearch\">OrchidSearch<\/a> plugin and is set up for easy page\nquerying or archive generation with the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidtaxonomies\">OrchidTaxonomies<\/a> plugin.<\/p>\n<p>The following languages are currently supported:<\/p>\n<ul>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidjavadoc\">Java<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidkotlindoc\">Kotlin<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidgroovydoc\">Groovy<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidswiftdoc\">Swift<\/a><\/li>\n<\/ul>\n  <\/div>\n<\/article>\n<article class=\"message is-danger\">\n\n  <div class=\"message-body\">\n  <p>Support for the legacy kotlindoc plugin will be removed in version 0.22.0. Until version 0.21.0, legacy\nkotlindocs were the default, but now they are end-of-life and must be enabled with the <code>--legacySourceDoc<\/code>\nCLI flag.<\/p>\n  <\/div>\n<\/article>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"r6pMNL3sif\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"r6pMNL3sif\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidKotlindoc:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidKotlindoc&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidKotlindoc&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidKotlindoc:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/kotlin-site\">example app<\/a><\/li>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidKotlindoc/src/test/kotlin/com/eden/orchid/kotlindoc/NewKotlindocGeneratorTest.kt\">KotlindocGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"single-module-usage\"><a href=\"#single-module-usage\" id=\"single-module-usage\" class=\"anchor\"><\/a>Single-Module Usage<\/h2>\n<h3 id=\"configuration\"><a href=\"#configuration\" id=\"configuration\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>An example of single-module configuration is below. Most properties are optional.<\/p>\n<pre><code class=\"language-yaml\">kotlindoc:\n  name: 'Project Name'\n  sourceDirs: ['../module-one/src/main/kotlin', '../module-one/src/main/java']\n  homePagePermalink: '...'\n  sourcePagePermalink: '...'\n  showRunnerLogs: false\n  homePageOnly: false\n  args: ['-packageOptions', 'com.example.hidden,+suppress;com.example.alsohidden,+suppress']\n<\/code><\/pre>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Option<\/th><th>Default Value<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>The name of the module, which becomes the title of the module Homepage.<\/td><td><code>name<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>Relative paths to directories containing Kotlin or Java source code.<\/td><td><code>sourceDirs<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Customize the URL path for the homepage.<\/td><td><code>homePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Customize the URL path for class and package pages.<\/td><td><code>sourcePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Whether to print logs from the underlying Dokka CLI<\/td><td><code>showRunnerLogs<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>If true, do not run Dokka. Create docs a module with only a homepage.<\/td><td><code>homePageOnly<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>Additional args to pass-through to the Dokka CLI.<\/td><td><code>args<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"permalinks\"><a href=\"#permalinks\" id=\"permalinks\" class=\"anchor\"><\/a>Permalinks<\/h3>\n<p>Permalinks can be customized for all pages generated by this plugin. For each module, you can set <code>homePagePermalink<\/code> or\n<code>sourcePagePermalink<\/code> with your desired permalink string. The following dynamic path segments are available for these\npages (in addition to the standard permalink keys):<\/p>\n<ul>\n<li><code>:moduleType<\/code> - The &quot;type&quot; of source code you're documenting (<code>kotlindoc<\/code>)<\/li>\n<li><code>:moduleGroup<\/code> - Not used for single-module docs<\/li>\n<li><code>:module<\/code> - Not used for single-module docs<\/li>\n<li><code>:sourceDocPath<\/code> - The path for each source code doc page, as defined by the Kotlindoc plugin<\/li>\n<\/ul>\n<p>The default permalinks are as follows:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Permalink pattern<\/th><th>Example<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Module home pages<\/td><td><code>:moduleType/:moduleGroup/:module<\/code><\/td><td><code>/kotlindoc<\/code><\/td><\/tr>\n<tr><td>Source code pages<\/td><td><code>:moduleType/:moduleGroup/:module/:sourceDocPath<\/code><\/td><td><code>/kotlindoc/com/app/mainapplication<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"page-archetypes\"><a href=\"#page-archetypes\" id=\"page-archetypes\" class=\"anchor\"><\/a>Page Archetypes<\/h3>\n<p>The pages generated have several archetype keys available, for applying options to these pages in varying levels of\ngranularity:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Archetype Pattern<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Both module home and source code pages for all languages<\/td><td><code>sourcedoc.pages<\/code><\/td><\/tr>\n<tr><td>Just module home pages for all languages<\/td><td><code>sourcedoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just source code pages for all languages<\/td><td><code>sourcedoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Kotlin module home and source code pages<\/td><td><code>kotlindoc.pages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin module home pages<\/td><td><code>kotlindoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin source code pages<\/td><td><code>kotlindoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin Class source code pages<\/td><td><code>kotlindoc.classesPages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin Package source code pages<\/td><td><code>kotlindoc.packagesPages<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"collections\"><a href=\"#collections\" id=\"collections\" class=\"anchor\"><\/a>Collections<\/h3>\n<p>SourceDocs generate a variety of collections which allow you to precisely query these pages. All collections will have a\n<code>collectionType<\/code> of the <code>moduleType<\/code> (<code>kotlindoc<\/code>).<\/p>\n<p>For a single module, you will get a collection with collectionId of the moduleType. For each of these collections, it\nwill also contain related collections containing the source pages of a specific page types, <code>classes<\/code> and <code>packages<\/code>.\nIn addition, you will have a <code>modules<\/code> collection, which contains the READMEs for each module.<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Collection Type<\/th><th>Collection ID<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>All Kotlindoc pages<\/td><td><code>kotlindoc<\/code><\/td><td><code>kotlindoc<\/code><\/td><\/tr>\n<tr><td>All Kotlindoc class pages<\/td><td><code>kotlindoc<\/code><\/td><td><code>kotlindoc-classes<\/code><\/td><\/tr>\n<tr><td>All Kotlindoc package pages<\/td><td><code>kotlindoc<\/code><\/td><td><code>kotlindoc-packages<\/code><\/td><\/tr>\n<tr><td>The Kotlindoc README page<\/td><td><code>kotlindoc<\/code><\/td><td><code>kotlindoc-modules<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"menu-items\"><a href=\"#menu-items\" id=\"menu-items\" class=\"anchor\"><\/a>Menu Items<\/h3>\n<p>There are 3 types of menu items available<\/p>\n<h4 id=\"modules\"><a href=\"#modules\" id=\"modules\" class=\"anchor\"><\/a>Modules<\/h4>\n<p>Create a menu item linking to the module home pages. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocModules'\n      moduleType: 'kotlindoc'\n<\/code><\/pre>\n<h4 id=\"pages\"><a href=\"#pages\" id=\"pages\" class=\"anchor\"><\/a>Pages<\/h4>\n<p>Create a menu item linking to all the source pages for a single module. You can optionally filter it by page type,\nor include all source pages for that module. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'kotlindoc'\n      node: 'classes' # optional\n<\/code><\/pre>\n<p>By default, all menu items will display the title of the linked page, which is typically a human-readable version of the\ndocumented element. You can set <code>itemTitleType: 'ID'<\/code> to have it display the actual page element ID.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'kotlindoc'\n      node: 'classes'\n      itemTitleType: 'ID'\n<\/code><\/pre>\n<p>In addition, you can provide an inline Pebble template to render/transform the menu item title however you need. You\nhave access to the original <code>title<\/code>, the target <code>page<\/code>, and the <code>element<\/code> within that template.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'kotlindoc'\n      node: 'classes'\n      itemTitleType: 'ID'\n      transform: '{{ title|replace({&quot;com.eden.orchid&quot;: &quot;c.e.o&quot;}) }}'\n<\/code><\/pre>\n<h4 id=\"page-links\"><a href=\"#page-links\" id=\"page-links\" class=\"anchor\"><\/a>Page Links<\/h4>\n<p>Page Links adds menu item links to a single SourceDoc Page. It links to each &quot;section&quot; on that page (such as <code>methods<\/code>,\n<code>constructors<\/code>, or <code>fields<\/code> on a <code>classes<\/code> page). Setting <code>includeItems: true<\/code> will optionally include all that items\nfor each section. It is typically added to a Page's menu item through one of the above Archetypes.<\/p>\n<p>Just like <code>sourcedocPages<\/code>, you can customize how the menu item text is rendered with <code>itemTitleType<\/code>. It can be <code>NAME<\/code>\nfor the element's human-readable name, <code>ID<\/code> for the actual element ID, or <code>signature<\/code> to display the fully-formatted\nelement signature.<\/p>\n<pre><code class=\"language-yaml\">kotlindoc:\n  sourcePages:\n    menu:\n      - type: 'sourcedocPageLinks'\n        itemTitleType: 'signature' # optional, one of [NAME, ID, SIGNATURE]\n        includeItems: true # optional\n<\/code><\/pre>\n<h3 id=\"filtering-docs\"><a href=\"#filtering-docs\" id=\"filtering-docs\" class=\"anchor\"><\/a>Filtering Docs<\/h3>\n<p>Orchid Kotlindoc uses Dokka to convert source code into documentation, so docs are filtered using the methods available\nto Dokka: extra CLI args to configure per package, and <code>@suppress<\/code> comments in the code to ignore specific elements.<\/p>\n<h4 id=\"dokka-extra-cli-args\"><a href=\"#dokka-extra-cli-args\" id=\"dokka-extra-cli-args\" class=\"anchor\"><\/a>Dokka Extra CLI Args<\/h4>\n<p>Orchid runs Dokka from its CLI, and additional args can be passed to it for extra configuration. Most commonly, this\nis used for adding <code>-packageOptions<\/code> arguments to customizing which packages are documented, and the visibility level of\nthe elements in that package. You can also pass any of\n<a href=\"https://github.com/kotlin/Dokka#using-the-command-line\">Dokka's CLI args<\/a>. They are passed as a freeform list of CLI\nargs to the <code>args<\/code> property of the module configuration.<\/p>\n<pre><code class=\"language-yaml\">kotlindoc:\n  name: 'Project Name' \n  sourceDirs: ['../module-one/src/main/kotlin', '../module-one/src/main/java']\n  args:\n    - '-packageOptions'\n    - 'com.example.hidden,+suppress;com.example.alsohidden,+suppress'\n<\/code><\/pre>\n<p>The format of these args is: <code>['-packageOptions', '{semicolon-separated list of package options}']<\/code>, where:<\/p>\n<ul>\n<li><code>{semicolon-separated list of package options}<\/code>: <code>{package prefix},{comma-separated list of options}<\/code><\/li>\n<li><code>{package prefix}<\/code>: specifies that a package and all of its subpackages will be configured<\/li>\n<li><code>{comma-separated list of options}<\/code>: are listed below:<\/li>\n<\/ul>\n<table>\n<thead>\n<tr><th>Description<\/th><th>CLI value<\/th><th>Default<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Include private and internal members<\/td><td><code>+privateApi<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Exclude private and internal members<\/td><td><code>-privateApi<\/code><\/td><td>✔<\/td><\/tr>\n<tr><td>Log warnings for elements with missing KDoc comments<\/td><td><code>+warnUndocumented<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Do not log warnings for elements with missing KDoc comments<\/td><td><code>-warnUndocumented<\/code><\/td><td>✔<\/td><\/tr>\n<tr><td>Include elements annotated with <code>@Deprecated<\/code><\/td><td><code>+deprecated<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Do not include elements annotated with <code>@Deprecated<\/code><\/td><td><code>-deprecated<\/code><\/td><td>✔<\/td><\/tr>\n<tr><td>Skip this package entirely<\/td><td><code>+suppress<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Include this package<\/td><td><code>-suppress<\/code><\/td><td>✔<\/td><\/tr>\n<\/tbody>\n<\/table>\n<h4 id=\"dokka-suppress-comments\"><a href=\"#dokka-suppress-comments\" id=\"dokka-suppress-comments\" class=\"anchor\"><\/a>Dokka <code>@suppress<\/code> Comments<\/h4>\n<p>In addition to customizing the packageOptions through CLI args, you can add <code>@suppress<\/code> to any individual classes,\nconstructors, properties, or functions to keep them out of the generated docs.<\/p>\n<h5 id=\"suppress-classes\"><a href=\"#suppress-classes\" id=\"suppress-classes\" class=\"anchor\"><\/a>Suppress Classes<\/h5>\n<pre><code class=\"language-kotlin\">/**\n * @suppress\n */\nclass SuppressedKotlinClass\n\nclass VisibleKotlinClass\n<\/code><\/pre>\n<h5 id=\"suppress-constructors\"><a href=\"#suppress-constructors\" id=\"suppress-constructors\" class=\"anchor\"><\/a>Suppress Constructors<\/h5>\n<pre><code class=\"language-kotlin\">class KotlinClass(val s1: String) {\n    /**\n     * @suppress\n     */\n    constructor() : this(&quot;&quot;)\n}\n<\/code><\/pre>\n<h5 id=\"suppress-properties\"><a href=\"#suppress-properties\" id=\"suppress-properties\" class=\"anchor\"><\/a>Suppress Properties<\/h5>\n<pre><code class=\"language-kotlin\">class KotlinClass() {\n    /**\n     * @suppress\n     */\n    val suppressedProperty: String\n    \n    val visibleProperty: String\n\n}\n<\/code><\/pre>\n<h5 id=\"suppress-functions\"><a href=\"#suppress-functions\" id=\"suppress-functions\" class=\"anchor\"><\/a>Suppress Functions<\/h5>\n<pre><code class=\"language-kotlin\">/**\n * @suppress\n */\nfun suppressedTopLevelFunction: String = &quot;&quot;\n\nfun visibleTopLevelFunction: String = &quot;&quot;\n\nclass KotlinClass() {\n    /**\n     * @suppress\n     */\n    fun suppressedFunction: String = &quot;&quot;\n    \n    fun visibleFunction: String = &quot;&quot;\n}\n<\/code><\/pre>\n<h2 id=\"multi-module-usage\"><a href=\"#multi-module-usage\" id=\"multi-module-usage\" class=\"anchor\"><\/a>Multi-Module Usage<\/h2>\n<h3 id=\"configuration-1\"><a href=\"#configuration-1\" id=\"configuration-1\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>An example of multi-module configuration is below. Most properties are optional.<\/p>\n<pre><code class=\"language-yaml\">kotlindoc:\n  modules:\n    - name: 'project-1-name'\n      slug: 'project-1'\n      moduleGroup: 'group-a'\n      sourceDirs: ['../module-one/src/main/kotlin', '../module-one/src/main/java']\n      homePagePermalink: '...'\n      sourcePagePermalink: '...'\n      showRunnerLogs: false\n      homePageOnly: false\n      relatedModules: ['project-2-name']\n      args: ['-packageOptions', 'com.example.hidden,+suppress;com.example.alsohidden,+suppress']\n    - name: 'project-2-name'\n      ...\n<\/code><\/pre>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Option<\/th><th>Default Value<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>The name of the module, which becomes the title of the module Homepage.<\/td><td><code>name<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>The slug prepended to page URLs from this module.<\/td><td><code>slug<\/code><\/td><td>``<\/td><\/tr>\n<tr><td>Group multiple modules together for easier configuration and improved site hierarchy.<\/td><td><code>moduleGroup<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Relative paths to directories containing Kotlin or Java source code.<\/td><td><code>sourceDirs<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Customize the URL path for the homepage.<\/td><td><code>homePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Customize the URL path for class and package pages.<\/td><td><code>sourcePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Whether to print logs from the underlying Dokka CLI<\/td><td><code>showRunnerLogs<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>If true, do not run Dokka. Create docs a module with only a homepage.<\/td><td><code>homePageOnly<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>A list of other modules which contain sources that may be linked to by the pages in this module<\/td><td><code>relatedModules<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Additional args to pass-through to the Dokka CLI.<\/td><td><code>args<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"permalinks-1\"><a href=\"#permalinks-1\" id=\"permalinks-1\" class=\"anchor\"><\/a>Permalinks<\/h3>\n<p>Permalinks can be customized for all pages generated by this plugin. For each module, you can set <code>homePagePermalink<\/code> or\n<code>sourcePagePermalink<\/code> with your desired permalink string. The following dynamic path segments are available for these\npages (in addition to the standard permalink keys):<\/p>\n<ul>\n<li><code>:moduleType<\/code> - The &quot;type&quot; of source code you're documenting (<code>kotlindoc<\/code>)<\/li>\n<li><code>:moduleGroup<\/code> - The module group at declared in the module configuration<\/li>\n<li><code>:module<\/code> - The name of this specific module<\/li>\n<li><code>:sourceDocPath<\/code> - The path for each source code doc page, as defined by the Kotlindoc plugin<\/li>\n<\/ul>\n<p>The default permalinks are as follows:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Permalink pattern<\/th><th>Example without module group<\/th><th>Example with module group<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Module home pages<\/td><td><code>:moduleType/:moduleGroup/:module<\/code><\/td><td><code>/kotlindoc/project-1<\/code><\/td><td><code>/kotlindoc/group-a/project-1<\/code><\/td><\/tr>\n<tr><td>Source code pages<\/td><td><code>:moduleType/:moduleGroup/:module/:sourceDocPath<\/code><\/td><td><code>/kotlindoc/project-1/com/app/mainapplication<\/code><\/td><td><code>/kotlindoc/group-a/project-1/com/app/mainapplication<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"page-archetypes-1\"><a href=\"#page-archetypes-1\" id=\"page-archetypes-1\" class=\"anchor\"><\/a>Page Archetypes<\/h3>\n<p>The pages generated have several archetype keys available, for applying options to these pages in varying levels of\ngranularity:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Archetype Pattern<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Both module home and source code pages for all languages<\/td><td><code>sourcedoc.pages<\/code><\/td><\/tr>\n<tr><td>Just module home pages for all languages<\/td><td><code>sourcedoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just source code pages for all languages<\/td><td><code>sourcedoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Kotlin module home and source code pages for all modules<\/td><td><code>kotlindoc.pages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin module home pages for all modules<\/td><td><code>kotlindoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin source code pages for all modules<\/td><td><code>kotlindoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin Class source code pages for all modules<\/td><td><code>kotlindoc.classesPages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin Package source code pages for all modules<\/td><td><code>kotlindoc.packagesPages<\/code><\/td><\/tr>\n<tr><td>Kotlin module home and source code pages for a single module group<\/td><td><code>kotlindoc.[module group]Pages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin module home pages for a single module group<\/td><td><code>kotlindoc.[module group]ModuleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin source code pages for a single module group<\/td><td><code>kotlindoc.[module group]SourcePages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin Class source code pages for a single module group<\/td><td><code>kotlindoc.[module group]ClassesPages<\/code><\/td><\/tr>\n<tr><td>Just Kotlin Package source code pages for a single module group<\/td><td><code>kotlindoc.[module group]PackagesPages<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"collections-1\"><a href=\"#collections-1\" id=\"collections-1\" class=\"anchor\"><\/a>Collections<\/h3>\n<p>SourceDocs generate a variety of collections which allow you to precisely query these pages. All collections will have a\n<code>collectionType<\/code> of the <code>moduleType<\/code> (<code>kotlindoc<\/code>).<\/p>\n<p>For multiple modules, you will get a collection for each module with collectionId of its name. For each of these\ncollections, it will also contain related collections containing the source pages of a specific page types, <code>classes<\/code>\nand <code>packages<\/code>. In addition, you will have a single <code>modules<\/code> collection which contains the READMEs of all modules.<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Collection Type<\/th><th>Collection ID<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>All Kotlindoc pages<\/td><td><code>kotlindoc<\/code><\/td><td><code>[module name]<\/code><\/td><\/tr>\n<tr><td>All Kotlindoc class pages<\/td><td><code>kotlindoc<\/code><\/td><td><code>[module name]-classes<\/code><\/td><\/tr>\n<tr><td>All Kotlindoc package pages<\/td><td><code>kotlindoc<\/code><\/td><td><code>[module name]-packages<\/code><\/td><\/tr>\n<tr><td>The Kotlindoc README page<\/td><td><code>kotlindoc<\/code><\/td><td><code>kotlindoc-modules<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"menu-items-1\"><a href=\"#menu-items-1\" id=\"menu-items-1\" class=\"anchor\"><\/a>Menu Items<\/h3>\n<p>There are 3 types of menu items available<\/p>\n<h4 id=\"modules-1\"><a href=\"#modules-1\" id=\"modules-1\" class=\"anchor\"><\/a>Modules<\/h4>\n<p>Create a menu item linking to the module home pages, optionally filtered by module group. Typically added to the Theme\nmenu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocModules'\n      moduleType: 'kotlindoc'\n      moduleGroup: 'group-a' \n<\/code><\/pre>\n<h4 id=\"pages-1\"><a href=\"#pages-1\" id=\"pages-1\" class=\"anchor\"><\/a>Pages<\/h4>\n<p>Create a menu item linking to all the source pages for a single module. You can optionally filter it by page type,\nor include all source pages for that module. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'kotlindoc'\n      moduleName: 'project-1-name'\n      node: 'classes' # optional\n<\/code><\/pre>\n<p>By default, all menu items will display the title of the linked page, which is typically a human-readable version of the\ndocumented element. You can set <code>itemTitleType: 'ID'<\/code> to have it display the actual page element ID.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'kotlindoc'\n      moduleName: 'project-1-name'\n      node: 'classes'\n      itemTitleType: 'ID'\n<\/code><\/pre>\n<p>In addition, you can provide an inline Pebble template to render/transform the menu item title however you need. You\nhave access to the original <code>title<\/code>, the target <code>page<\/code>, and the <code>element<\/code> within that template.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'kotlindoc'\n      moduleName: 'project-1-name'\n      node: 'classes'\n      itemTitleType: 'ID'\n      transform: '{{ title|replace({&quot;com.eden.orchid&quot;: &quot;c.e.o&quot;}) }}'\n<\/code><\/pre>\n<h4 id=\"page-links-1\"><a href=\"#page-links-1\" id=\"page-links-1\" class=\"anchor\"><\/a>Page Links<\/h4>\n<p>Page Links adds menu item links to a single SourceDoc Page. It links to each &quot;section&quot; on that page (such as <code>methods<\/code>,\n<code>constructors<\/code>, or <code>fields<\/code> on a <code>classes<\/code> page). Setting <code>includeItems: true<\/code> will optionally include all that items\nfor each section. It is typically added to a Page's menu item through one of the above Archetypes.<\/p>\n<p>Just like <code>sourcedocPages<\/code>, you can customize how the menu item text is rendered with <code>itemTitleType<\/code>. It can be <code>NAME<\/code>\nfor the element's human-readable name, <code>ID<\/code> for the actual element ID, or <code>signature<\/code> to display the fully-formatted\nelement signature.<\/p>\n<pre><code class=\"language-yaml\">kotlindoc:\n  sourcePages:\n    menu:\n      - type: 'sourcedocPageLinks'\n        itemTitleType: 'signature' # optional, one of [NAME, ID, SIGNATURE]\n        includeItems: true # optional\n<\/code><\/pre>\n<h3 id=\"filtering-docs-1\"><a href=\"#filtering-docs-1\" id=\"filtering-docs-1\" class=\"anchor\"><\/a>Filtering Docs<\/h3>\n<p>Orchid Kotlindoc uses Dokka to convert source code into documentation, so docs are filtered using the methods available\nto Dokka: extra CLI args to configure per package, and <code>@suppress<\/code> comments in the code to ignore specific elements.<\/p>\n<h4 id=\"dokka-extra-cli-args-1\"><a href=\"#dokka-extra-cli-args-1\" id=\"dokka-extra-cli-args-1\" class=\"anchor\"><\/a>Dokka Extra CLI Args<\/h4>\n<p>Orchid runs Dokka from its CLI, and additional args can be passed to it for extra configuration. Most commonly, this\nis used for adding <code>-packageOptions<\/code> arguments to customizing which packages are documented, and the visibility level of\nthe elements in that package. You can also pass any of\n<a href=\"https://github.com/kotlin/Dokka#using-the-command-line\">Dokka's CLI args<\/a>. They are passed as a freeform list of CLI\nargs to the <code>args<\/code> property of the module configuration.<\/p>\n<pre><code class=\"language-yaml\">kotlindoc:\n  modules:\n    - name: 'project-1-name' \n      sourceDirs: ['../module-one/src/main/kotlin', '../module-one/src/main/java']\n      args:\n        - '-packageOptions'\n        - 'com.example.hidden,+suppress;com.example.alsohidden,+suppress'\n<\/code><\/pre>\n<p>The format of these args is: <code>['-packageOptions', '{semicolon-separated list of package options}']<\/code>, where:<\/p>\n<ul>\n<li><code>{semicolon-separated list of package options}<\/code>: <code>{package prefix},{comma-separated list of options}<\/code><\/li>\n<li><code>{package prefix}<\/code>: specifies that a package and all of its subpackages will be configured<\/li>\n<li><code>{comma-separated list of options}<\/code>: are listed below:<\/li>\n<\/ul>\n<table>\n<thead>\n<tr><th>Description<\/th><th>CLI value<\/th><th>Default<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Include private and internal members<\/td><td><code>+privateApi<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Exclude private and internal members<\/td><td><code>-privateApi<\/code><\/td><td>✔<\/td><\/tr>\n<tr><td>Log warnings for elements with missing KDoc comments<\/td><td><code>+warnUndocumented<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Do not log warnings for elements with missing KDoc comments<\/td><td><code>-warnUndocumented<\/code><\/td><td>✔<\/td><\/tr>\n<tr><td>Include elements annotated with <code>@Deprecated<\/code><\/td><td><code>+deprecated<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Do not include elements annotated with <code>@Deprecated<\/code><\/td><td><code>-deprecated<\/code><\/td><td>✔<\/td><\/tr>\n<tr><td>Skip this package entirely<\/td><td><code>+suppress<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Include this package<\/td><td><code>-suppress<\/code><\/td><td>✔<\/td><\/tr>\n<\/tbody>\n<\/table>\n<h4 id=\"dokka-suppress-comments-1\"><a href=\"#dokka-suppress-comments-1\" id=\"dokka-suppress-comments-1\" class=\"anchor\"><\/a>Dokka <code>@suppress<\/code> Comments<\/h4>\n<p>In addition to customizing the packageOptions through CLI args, you can add <code>@suppress<\/code> to any individual classes,\nconstructors, properties, or functions to keep them out of the generated docs.<\/p>\n<h5 id=\"suppress-classes-1\"><a href=\"#suppress-classes-1\" id=\"suppress-classes-1\" class=\"anchor\"><\/a>Suppress Classes<\/h5>\n<pre><code class=\"language-kotlin\">/**\n * @suppress\n */\nclass SuppressedKotlinClass\n\nclass VisibleKotlinClass\n<\/code><\/pre>\n<h5 id=\"suppress-constructors-1\"><a href=\"#suppress-constructors-1\" id=\"suppress-constructors-1\" class=\"anchor\"><\/a>Suppress Constructors<\/h5>\n<pre><code class=\"language-kotlin\">class KotlinClass(val s1: String) {\n    /**\n     * @suppress\n     */\n    constructor() : this(&quot;&quot;)\n}\n<\/code><\/pre>\n<h5 id=\"suppress-properties-1\"><a href=\"#suppress-properties-1\" id=\"suppress-properties-1\" class=\"anchor\"><\/a>Suppress Properties<\/h5>\n<pre><code class=\"language-kotlin\">class KotlinClass() {\n    /**\n     * @suppress\n     */\n    val suppressedProperty: String\n    \n    val visibleProperty: String\n\n}\n<\/code><\/pre>\n<h5 id=\"suppress-functions-1\"><a href=\"#suppress-functions-1\" id=\"suppress-functions-1\" class=\"anchor\"><\/a>Suppress Functions<\/h5>\n<pre><code class=\"language-kotlin\">/**\n * @suppress\n */\nfun suppressedTopLevelFunction: String = &quot;&quot;\n\nfun visibleTopLevelFunction: String = &quot;&quot;\n\nclass KotlinClass() {\n    /**\n     * @suppress\n     */\n    fun suppressedFunction: String = &quot;&quot;\n    \n    fun visibleFunction: String = &quot;&quot;\n}\n<\/code><\/pre>\n"
          }]
        },
        "orchidsourcedoc": {
          "ownKey": "orchidsourcedoc",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidsourcedoc",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidsourcedoc"
            },
            "description": "The base module for adding code documentation to Orchid with Kodiak",
            "title": "OrchidSourceDoc",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>This is the base plugin for documenting source code with Orchid for all supported languages. Orchid supports modular\nprojects, with READMEs and separate doc groups for each module, customizable permalinks, multiple types of menu items,\nand supports full-text search from the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidsearch\">OrchidSearch<\/a> plugin.<\/p>\n<p>No matter which language you are using, its usage is all identical as it is provided by this base plugin.<\/p>\n<p>The suite of Orchid Sourcedocs plugins are for designed for merging source code documentation with the rest of your\nproject site.<\/p>\n<p>Orchid Sourcedocs supports multi-module projects with READMEs and separate doc groups for each module, customizable\npermalinks, auto-updating menu items, and an ever-improving data model to link to doc pages and display the\nrelationships among different elements.<\/p>\n<p>It also integrates client-side full-text search from the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidsearch\">OrchidSearch<\/a> plugin and is set up for easy page\nquerying or archive generation with the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidtaxonomies\">OrchidTaxonomies<\/a> plugin.<\/p>\n<p>The following languages are currently supported:<\/p>\n<ul>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidjavadoc\">Java<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidkotlindoc\">Kotlin<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidgroovydoc\">Groovy<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidswiftdoc\">Swift<\/a><\/li>\n<\/ul>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"T4vkiNbPMt\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"T4vkiNbPMt\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidSourceDoc:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidSourceDoc&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidSourceDoc&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidSourceDoc:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n"
          }]
        },
        "orchidcore": {
          "ownKey": "orchidcore",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidcore",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidcore"
            },
            "description": "",
            "title": "OrchidCore",
            "content": "<p align=\"center\">\n  <a href=\"https://orchid.run/\">\n    <img width=\"460\" src=\"https://orchid.run/assets/svg/orchid/logo_top_light.svg\" title=\"Orchid\" alt=\"Orchid\">\n  <\/a>\n  <br>\n  <strong>Build and deploy beautiful documentation sites that grow with you<\/strong>\n<\/p>\n<hr/>\n<p align=\"center\">\n    Orchid-revival project: Under-construction\n<\/p>\n<hr/>\n<h2>Original readme, to be updated<\/h2>\n<p align=\"center\">\n  <a href=\"https://bintray.com/javaeden/Orchid/OrchidCore/_latestVersion\">\n    <img src=\"https://api.bintray.com/packages/javaeden/Orchid/OrchidCore/images/download.svg\" title=\"Current Version\" alt=\"Current Version\">\n  <\/a>\n  <a href=\"https://www.gnu.org/licenses/lgpl-3.0\">\n    <img src=\"https://img.shields.io/badge/License-LGPL%20v3-blue.svg\" title=\"License: LGPL-3.0\" alt=\"License: LGPL-3.0\">\n  <\/a>\n  <a href=\"https://travis-ci.org/orchidhq/orchid\">\n    <img src=\"https://travis-ci.org/orchidhq/orchid.svg?branch=dev\" title=\"Linux and Mac Build Status\" alt=\"Linux and Mac Build Status\">\n  <\/a>\n  <a href=\"https://ci.appveyor.com/project/cjbrooks12/orchid/branch/dev\">\n    <img src=\"https://ci.appveyor.com/api/projects/status/0358qdkmfhbqedo1/branch/dev?svg=true\" title=\"Windows Build status\" alt=\"Windows Build status\">\n  <\/a>\n  <a href=\"https://www.codacy.com/app/cjbrooks12/Orchid?utm_source=github.com&utm_medium=referral&utm_content=orchidhq/orchid&utm_campaign=Badge_Coverage\">\n    <img src=\"https://api.codacy.com/project/badge/Coverage/8bca7e84b6094c03ae1316278cf63ae1\" title=\"Code Coverage\" alt=\"Code Coverage\">\n  <\/a>\n<\/p>\n<p align=\"center\">\n  <a href=\"https://orchid.run/wiki/user-manual/getting-started/quickstart\">Quick-Start<\/a>\n  <span>\u2022<\/span>\n  <a href=\"https://orchid.run/wiki/user-manual/getting-started\">Documentation<\/a>\n  <span>\u2022<\/span>\n  <a href=\"https://orchid.run/wiki/learn\">Tutorials<\/a>\n  <span>\u2022<\/span>\n  <a href=\"https://orchid.run/showcase\">Showcase<\/a>\n  <span>\u2022<\/span>\n  <a href=\"https://gitter.im/JavaEden/Orchid\">Support<\/a>\n<\/p>\n<h2 id=\"quick-start\"><a href=\"#quick-start\" id=\"quick-start\" class=\"anchor\"><\/a>Quick-Start<\/h2>\n<ul>\n  <li>\n    <a href=\"https://orchid.run/wiki/user-manual/getting-started/quickstart#gradle\">\n      <img src=\"docs/src/orchid/resources/assets/svg/gradle.svg\" title=\"Gradle\" alt=\"Gradle\" width=\"200\" height=\"50\">\n    <\/a>\n  <\/li>\n  <li>\n    <a href=\"https://orchid.run/wiki/user-manual/getting-started/quickstart#maven\">\n      <img src=\"docs/src/orchid/resources/assets/svg/maven.svg\" title=\"Maven\" alt=\"Maven\" width=\"200\" height=\"50\">\n    <\/a>\n  <\/li>\n  <li>\n    <a href=\"https://orchid.run/wiki/user-manual/getting-started/quickstart#sbt\">\n      <img src=\"docs/src/orchid/resources/assets/svg/sbt.svg\" title=\"SBT\" alt=\"SBT\" width=\"200\" height=\"50\">\n    <\/a>\n  <\/li>\n  <li>\n    <a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/orchidhq/OrchidStarter\">\n      <img src=\"https://www.netlify.com/img/deploy/button.svg\" title=\"Deploy to Netlify\" alt=\"Deploy to Netlify\" width=\"200\" height=\"50\">\n    <\/a>\n  <\/li>\n<\/ul>\n<h2 id=\"documentation\"><a href=\"#documentation\" id=\"documentation\" class=\"anchor\"><\/a>Documentation<\/h2>\n<p>Orchid's User Manual will walk you through the main features of Orchid and give you a deeper understanding of each topic\nand feature.<\/p>\n<p><a href=\"https://orchid.run/wiki/user-manual/getting-started\">Documentation<\/a><\/p>\n<h2 id=\"tutorials\"><a href=\"#tutorials\" id=\"tutorials\" class=\"anchor\"><\/a>Tutorials<\/h2>\n<p>There are several tutorials designed to walk you through building an Orchid site from scratch. The source for all\ntutorials can also be found in the <a href=\"https://github.com/orchidhq/OrchidTutorials\">OrchidTutorials repository<\/a>.<\/p>\n<p><a href=\"https://orchid.run/wiki/learn\">Tutorials<\/a><\/p>\n<h2 id=\"showcase\"><a href=\"#showcase\" id=\"showcase\" class=\"anchor\"><\/a>Showcase<\/h2>\n<p>View the Showcase to see Orchid in action.<\/p>\n<p><a href=\"https://orchid.run/showcase\">Showcase<\/a><\/p>\n<h2 id=\"support\"><a href=\"#support\" id=\"support\" class=\"anchor\"><\/a>Support<\/h2>\n<h3 id=\"contributors\"><a href=\"#contributors\" id=\"contributors\" class=\"anchor\"><\/a>Contributors<\/h3>\n<p>This project exists thanks to all the people who contribute. To get involved, please see\n<a href=\"https://github.com/orchidhq/orchid/blob/dev/.github/CONTRIBUTING.md\">CONTRIBUTING.md<\/a><\/p>\n<p><a href=\"https://github.com/orchidhq/orchid/graphs/contributors\">\n<img\n    src=\"https://opencollective.com/orchidssg/contributors.svg?width=890&button=false\"\n    title=\"Contributors\"\n    alt=\"Contributors\"\n  />\n<\/a><\/p>\n<h3 id=\"backers\"><a href=\"#backers\" id=\"backers\" class=\"anchor\"><\/a>Backers<\/h3>\n<p>Thank you to all our backers! 🙏<\/p>\n<p><a href=\"https://opencollective.com/orchidssg#backers\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/backers.svg?width=890\" title=\"Backers\" alt=\"Backers\">\n<\/a><\/p>\n<h3 id=\"sponsors\"><a href=\"#sponsors\" id=\"sponsors\" class=\"anchor\"><\/a>Sponsors<\/h3>\n<p>Support this project by becoming a sponsor. Your logo will show up here with a link to your website.<\/p>\n<p><a href=\"https://opencollective.com/orchidssg/sponsor/0/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/0/avatar.svg\" title=\"Sponsor 1\" alt=\"Sponsor 1\">\n<\/a>\n<a href=\"https://opencollective.com/orchidssg/sponsor/1/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/1/avatar.svg\" title=\"Sponsor 2\" alt=\"Sponsor 2\">\n<\/a>\n<a href=\"https://opencollective.com/orchidssg/sponsor/2/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/2/avatar.svg\" title=\"Sponsor 3\" alt=\"Sponsor 3\">\n<\/a>\n<a href=\"https://opencollective.com/orchidssg/sponsor/3/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/3/avatar.svg\" title=\"Sponsor 4\" alt=\"Sponsor 4\">\n<\/a>\n<a href=\"https://opencollective.com/orchidssg/sponsor/4/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/4/avatar.svg\" title=\"Sponsor 5\" alt=\"Sponsor 5\">\n<\/a>\n<a href=\"https://opencollective.com/orchidssg/sponsor/5/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/5/avatar.svg\" title=\"Sponsor 6\" alt=\"Sponsor 6\">\n<\/a>\n<a href=\"https://opencollective.com/orchidssg/sponsor/6/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/6/avatar.svg\" title=\"Sponsor 7\" alt=\"Sponsor 7\">\n<\/a>\n<a href=\"https://opencollective.com/orchidssg/sponsor/7/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/7/avatar.svg\" title=\"Sponsor 8\" alt=\"Sponsor 8\">\n<\/a>\n<a href=\"https://opencollective.com/orchidssg/sponsor/8/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/8/avatar.svg\" title=\"Sponsor 9\" alt=\"Sponsor 9\">\n<\/a>\n<a href=\"https://opencollective.com/orchidssg/sponsor/9/website\" target=\"_blank\">\n<img src=\"https://opencollective.com/orchidssg/sponsor/9/avatar.svg\" title=\"Sponsor 10\" alt=\"Sponsor 10\">\n<\/a><\/p>\n<h3 id=\"license\"><a href=\"#license\" id=\"license\" class=\"anchor\"><\/a>License<\/h3>\n<p>Orchid is open-source software licensed under the GNU Lesser General Public License (LGPL-3.0). Please see\n<a href=\"https://github.com/orchidhq/orchid/blob/dev/License.md\">License.md<\/a><\/p>\n<h3 id=\"contact\"><a href=\"#contact\" id=\"contact\" class=\"anchor\"><\/a>Contact<\/h3>\n<p>Orchid is being actively developed by Casey Brooks. You can reach out with questions, bug reports, or feature requests\non any of the following:<\/p>\n<ul>\n<li><a href=\"https://github.com/orchidhq/Orchid/issues\">Github Issues<\/a><\/li>\n<li><a href=\"https://gitter.im/JavaEden/Orchid\">Gitter Chat<\/a><\/li>\n<li><a href=\"https://twitter.com/OrchidSSG\">Twitter<\/a><\/li>\n<li><a href=\"mailto:cjbrooks12@gmail.com\">Email me directly<\/a><\/li>\n<\/ul>\n"
          }]
        },
        "orchidbible": {
          "ownKey": "orchidbible",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidbible",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidbible"
            },
            "description": "Load the full text of Bible verses quickly and easily.",
            "title": "OrchidBible",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>OrchidBible makes it easy to embed Bible verses in your site content using\n<a href=\"https://faithlife.com/products/reftagger\">Faithlife Reftagger<\/a>. Reftagger automatically finds Bible references on the\npage, and hovering over them will show a tooltip with the verse text.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"TLHfLTTmhW\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"TLHfLTTmhW\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidBible:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidBible&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidBible&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidBible:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/languageExtensions/OrchidBible/src/test/kotlin/com/eden/orchid/languages/bible/BibleTest.kt\">BibleTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<p>Add the <code>reftagger<\/code> meta-component to your theme to add the necessary scripts to your site. You can customize most of\nthe options on <a href=\"https://faithlife.com/products/reftagger/customize\">this page<\/a>, but find it in your admin panel to see\nall available options.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\ntheme:\n    metaComponents:\n        - type: reftagger\n<\/code><\/pre>\n"
          }]
        },
        "orchidasciidoc": {
          "ownKey": "orchidasciidoc",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidasciidoc",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidasciidoc"
            },
            "description": "Compile your content using Asciidoctor.",
            "title": "OrchidAsciidoc",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>OrchidAsciidoc adds support for <a href=\"https://asciidoctor.org/\">AsciiDoc markup<\/a> in Orchid, as a replacement for Markdown.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"PoogcejFPl\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"PoogcejFPl\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidAsciidoc:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidAsciidoc&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidAsciidoc&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidAsciidoc:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<details open>\n<summary>Source<\/summary>\n\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-asciidoc\" data-lang=\"asciidoc\">= My Article\nJ. Smith\n\nhttps://wikipedia.org[Wikipedia] is an\non-line encyclopaedia, available in\nEnglish and *many* other languages.\n\n*Software*\n\nYou can install 'package-name' using\nthe `gem` command:\n\n gem install package-name\n\n*Hardware*\n\nMetals commonly used include:\n\n* copper\n* tin\n* lead<\/code><\/pre>\n<\/div>\n<\/div>\n\n<\/details>\n<details>\n<summary>Result<\/summary>\n\n<div class=\"paragraph\">\n<p><a href=\"https://wikipedia.org\">Wikipedia<\/a> is an\non-line encyclopaedia, available in\nEnglish and <strong>many<\/strong> other languages.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p><strong>Software<\/strong><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>You can install 'package-name' using\nthe <code>gem<\/code> command:<\/p>\n<\/div>\n<div class=\"literalblock\">\n<div class=\"content\">\n<pre>gem install package-name<\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p><strong>Hardware<\/strong><\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Metals commonly used include:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>copper<\/p>\n<\/li>\n<li>\n<p>tin<\/p>\n<\/li>\n<li>\n<p>lead<\/p>\n<\/li>\n<\/ul>\n<\/div>\n\n<\/details>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<p>Simply include this plugin and you're all set. Orchid will now recognize files with file extensions of <code>ad<\/code>, <code>adoc<\/code>,\n<code>asciidoc<\/code>, or <code>asciidoctor<\/code>, and compile them as Asciidoc instead of Markdown, no further configuration necessary.<\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n└── pages/\n    ├── page1.md\n    └── page2.adoc &lt;-- will be processed as AsciiDoc\n<\/code><\/pre>\n<p>Of course, you may also embed chunks of AsciiDoc markup within content of other formats using <code>compileAs('adoc')<\/code>:<\/p>\n<pre><code class=\"language-markdown\">## Markdown Header\n\n{% filter compileAs('adoc') %} &lt;-- filtered block will be processed as AsciiDoc\n= AsciiDoc Header\n{% endfilter %}\n\n<\/code><\/pre>\n<h3 id=\"includes\"><a href=\"#includes\" id=\"includes\" class=\"anchor\"><\/a>Includes<\/h3>\n<p>Files can be included using the standard <code>include::[]<\/code> directive. Included files are first resolved relative to the\ncurrent file, which is the normal behavior of Asciidoctor. If no file can be found relative to it, Orchid will then\ncheck for a file at the given path in your site resources, similar to how most other inclues in Orchid work. Nested\nrelative includes are not currently supported.<\/p>\n<pre><code class=\"language-asciidoc\">= homepage.adoc\n\ninclude::other_page.adoc[]\n<\/code><\/pre>\n<p>Due to constraints with the AsciidoctorJ library, the following limitation exists when including files in Orchid.<\/p>\n<ul>\n<li><code>tag<\/code> and <code>tags<\/code> attributes may not cover the full range of functionality available in Asciidoctor, as it had to be\nre-implemented manually in Orchid. Tag names and the <code>*<\/code> wildcard are supported, but\n<a href=\"https://asciidoctor-docs.netlify.com/asciidoc/1.5/directives/include-lines-and-tags/#tag-filtering\">tag filtering<\/a>\nthrough negations or more complex wildcard usage is not currently supported. If this is a feature you are needing,\nplease leave a comment on <a href=\"https://github.com/asciidoctor/asciidoctor/issues/571\">this issue<\/a> to let the Asciidoctor\nmaintainers know you want this functionality in Orchid!<\/li>\n<\/ul>\n<h3 id=\"images\"><a href=\"#images\" id=\"images\" class=\"anchor\"><\/a>Images<\/h3>\n<p>Images are not currently supported. Local images references by the <code>image::[]<\/code> macro will not be copied to the final\nsite automatically, so you should stick with external URLs for now.<\/p>\n<pre><code class=\"language-asciidoc\">= homepage.adoc\n\nimage::https://picsum.photos/200/300.jpg[]\n<\/code><\/pre>\n"
          }]
        },
        "orchidplugindocs": {
          "ownKey": "orchidplugindocs",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidplugindocs",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidplugindocs"
            },
            "description": "Auto-generate your plugin's documentation, plus a handy admin panel to bring your plugins documentation to you.",
            "title": "OrchidPluginDocs",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>OrchidPluginDocs is the solution to out-of-date documentation. It adds an admin panel to Orchid which automatically\ndocuments about available features and their possible options for all plugins included in your build.<\/p>\n<p>The same auto-documentation can be used to produce similar static documentation, for example, for documenting your own\nOrchid plugin.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"cJ9vSr6GcJ\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"cJ9vSr6GcJ\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidPluginDocs:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidPluginDocs&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidPluginDocs&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidPluginDocs:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidStarter\">starter app<\/a> and visit <code>http://localhost:8080/admin<\/code><\/li>\n<li>Read the <a href=\"https://orchid-revival.github.io/Orchid/wiki/learn/tutorials/amazing-admin-panel\">Amazing Admin Panel<\/a> tutorial<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"documenting-your-orchid-plugin\"><a href=\"#documenting-your-orchid-plugin\" id=\"documenting-your-orchid-plugin\" class=\"anchor\"><\/a>Documenting your Orchid Plugin<\/h3>\n<p>The Orchid Plugin Docs plugin makes it dead-simple to document much of the information that is easily forgotten and not\nket up-to-date when developing plugins. It is common to write a short description of your plugin and how to use it, but\nover time, the specifics of the names of your options, new classes, etc. are often lost and documentation is not updated\nto reflect these changes. While it isn't possible to solve this problem across arbitrary codebases, Orchid does know a\nlot about your plugin, and can automate this for your Orchid plugins.<\/p>\n<p>The simplest way for Orchid to document your plugin is to use the <code>pluginDocs<\/code> component and pass it your root package.\nIt will then look through all the classes in that package and its sub-packages, and render a table of all the Options\non that class, including their types and default values. You may pass multiple packages and they all will be documented\nin the same way, if you want to be a bit more prescriptive about the packages to document.<\/p>\n<pre><code class=\"language-yaml\">\n---\nlayout: frontPage\ncomponents:\n  - type: pluginDocs\n    tableClass: table\n    tableLeaderClass: hidden\n    packageNames: \n      - com.eden.orchid.plugindocs\n---\n<\/code><\/pre>\n<p>If your want more control over the exact classes that are used, you may set the specific classes (fully-qualified class\nnames) to the <code>pluginDocs<\/code> component's <code>classNames<\/code> property, instead of using <code>packageNames<\/code>. Again, you may pass\nmultiple class names to document them all, and you can combine specific classes with whole packages.<\/p>\n<p>You may also find it useful to include the options table directly in written content, rather than just as a Component.\nFor these cases, you may use the <code>docs<\/code> Tag and pass it the fully-qualified name of a class to document.<\/p>\n<h3 id=\"bringing-your-plugins-documentation-to-you\"><a href=\"#bringing-your-plugins-documentation-to-you\" id=\"bringing-your-plugins-documentation-to-you\" class=\"anchor\"><\/a>Bringing your Plugins' Documentation to You<\/h3>\n<p>While the <code>pluginDocs<\/code> component and <code>docs<\/code> tag are intended for use by plugin and theme developers, the Orchid Plugin\nDocs also comes with an admin panel that is useful for anyone running Orchid locally, an admin panel that brings the\noptions for your currently installed plugins to you in one place. You should still visit your plugins' documentation to\nlearn how to use them, but for a quick reference on the options and basic usage of your plugins, you can view\n<code>http://localhost:8080/admin<\/code> to see it all in once place.<\/p>\n<p>In this panel, you can view the important class types currently registered with your Orchid site, <em>all<\/em> extensible\nclasses' used with your Orchid site, and see basic usage for objects of that type. It also includes a command bar for\nyou to execute Orchid Commands.<\/p>\n"
          }]
        },
        "orchidswiftdoc": {
          "ownKey": "orchidswiftdoc",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidswiftdoc",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidswiftdoc"
            },
            "description": "Create beautiful documentation for your Swift source code within Orchid.",
            "title": "OrchidSwiftdoc",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The OrchidSwiftdoc plugin integrates with the <a href=\"https://github.com/jpsim/SourceKitten\">SourceKitten<\/a> tool to embed class\nand source file info from Swift source code directly in your Orchid site.<\/p>\n<article class=\"message is-info\">\n\n  <div class=\"message-body\">\n  <p>The suite of Orchid Sourcedocs plugins are for designed for merging source code documentation with the rest of your\nproject site.<\/p>\n<p>Orchid Sourcedocs supports multi-module projects with READMEs and separate doc groups for each module, customizable\npermalinks, auto-updating menu items, and an ever-improving data model to link to doc pages and display the\nrelationships among different elements.<\/p>\n<p>It also integrates client-side full-text search from the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidsearch\">OrchidSearch<\/a> plugin and is set up for easy page\nquerying or archive generation with the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidtaxonomies\">OrchidTaxonomies<\/a> plugin.<\/p>\n<p>The following languages are currently supported:<\/p>\n<ul>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidjavadoc\">Java<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidkotlindoc\">Kotlin<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidgroovydoc\">Groovy<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidswiftdoc\">Swift<\/a><\/li>\n<\/ul>\n  <\/div>\n<\/article>\n<article class=\"message is-danger\">\n\n  <div class=\"message-body\">\n  <p>Support for the legacy swiftdoc plugin will be removed in version 0.22.0. Until version 0.21.0, legacy\nswiftdocs were the default, but now they are end-of-life and must be enabled with the <code>--legacySourceDoc<\/code>\nCLI flag.<\/p>\n  <\/div>\n<\/article>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"VFl36ODxH4\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"VFl36ODxH4\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidSwiftdoc:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidSwiftdoc&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidSwiftdoc&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidSwiftdoc:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/swift-site\">example app<\/a><\/li>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidSwiftdoc/src/test/kotlin/com/eden/orchid/swiftdoc/NewSwiftdocGeneratorTest.kt\">SwiftdocGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"single-module-usage\"><a href=\"#single-module-usage\" id=\"single-module-usage\" class=\"anchor\"><\/a>Single-Module Usage<\/h2>\n<h3 id=\"configuration\"><a href=\"#configuration\" id=\"configuration\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>An example of single-module configuration is below. Most properties are optional.<\/p>\n<pre><code class=\"language-yaml\">swiftdoc:\n  name: 'Project Name'\n  sourceDirs: ['../module-one/src/main/swift', '../module-one/src/main/java']\n  homePagePermalink: '...'\n  sourcePagePermalink: '...'\n  showRunnerLogs: false\n  homePageOnly: false\n  args: []\n<\/code><\/pre>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Option<\/th><th>Default Value<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>The name of the module, which becomes the title of the module Homepage.<\/td><td><code>name<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>Relative paths to directories containing Swift or Java source code.<\/td><td><code>sourceDirs<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Customize the URL path for the homepage.<\/td><td><code>homePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Customize the URL path for class and package pages.<\/td><td><code>sourcePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Whether to print logs from the underlying Sourcekitten CLI<\/td><td><code>showRunnerLogs<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>If true, do not run Sourcekitten. Create docs a module with only a homepage.<\/td><td><code>homePageOnly<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>Additional args to pass-through to the Sourcekitten CLI.<\/td><td><code>args<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"permalinks\"><a href=\"#permalinks\" id=\"permalinks\" class=\"anchor\"><\/a>Permalinks<\/h3>\n<p>Permalinks can be customized for all pages generated by this plugin. For each module, you can set <code>homePagePermalink<\/code> or\n<code>sourcePagePermalink<\/code> with your desired permalink string. The following dynamic path segments are available for these\npages (in addition to the standard permalink keys):<\/p>\n<ul>\n<li><code>:moduleType<\/code> - The &quot;type&quot; of source code you're documenting (<code>swiftdoc<\/code>)<\/li>\n<li><code>:moduleGroup<\/code> - Not used for single-module docs<\/li>\n<li><code>:module<\/code> - Not used for single-module docs<\/li>\n<li><code>:sourceDocPath<\/code> - The path for each source code doc page, as defined by the Swiftdoc plugin<\/li>\n<\/ul>\n<p>The default permalinks are as follows:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Permalink pattern<\/th><th>Example<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Module home pages<\/td><td><code>:moduleType/:moduleGroup/:module<\/code><\/td><td><code>/swiftdoc<\/code><\/td><\/tr>\n<tr><td>Source code pages<\/td><td><code>:moduleType/:moduleGroup/:module/:sourceDocPath<\/code><\/td><td><code>/swiftdoc/com/app/mainapplication<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"page-archetypes\"><a href=\"#page-archetypes\" id=\"page-archetypes\" class=\"anchor\"><\/a>Page Archetypes<\/h3>\n<p>The pages generated have several archetype keys available, for applying options to these pages in varying levels of\ngranularity:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Archetype Pattern<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Both module home and source code pages for all languages<\/td><td><code>sourcedoc.pages<\/code><\/td><\/tr>\n<tr><td>Just module home pages for all languages<\/td><td><code>sourcedoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just source code pages for all languages<\/td><td><code>sourcedoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Swift module home and source code pages<\/td><td><code>swiftdoc.pages<\/code><\/td><\/tr>\n<tr><td>Just Swift module home pages<\/td><td><code>swiftdoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Swift source code pages<\/td><td><code>swiftdoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Just Swift Class source code pages<\/td><td><code>swiftdoc.classesPages<\/code><\/td><\/tr>\n<tr><td>Just Swift Source File source code pages<\/td><td><code>swiftdoc.sourceFilesPages<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"collections\"><a href=\"#collections\" id=\"collections\" class=\"anchor\"><\/a>Collections<\/h3>\n<p>SourceDocs generate a variety of collections which allow you to precisely query these pages. All collections will have a\n<code>collectionType<\/code> of the <code>moduleType<\/code> (<code>swiftdoc<\/code>).<\/p>\n<p>For a single module, you will get a collection with collectionId of the moduleType. For each of these collections, it\nwill also contain related collections containing the source pages of a specific page types, <code>classes<\/code> and <code>packages<\/code>.\nIn addition, you will have a <code>modules<\/code> collection, which contains the READMEs for each module.<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Collection Type<\/th><th>Collection ID<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>All Swiftdoc pages<\/td><td><code>swiftdoc<\/code><\/td><td><code>swiftdoc<\/code><\/td><\/tr>\n<tr><td>All Swiftdoc class pages<\/td><td><code>swiftdoc<\/code><\/td><td><code>swiftdoc-classes<\/code><\/td><\/tr>\n<tr><td>All Swiftdoc package pages<\/td><td><code>swiftdoc<\/code><\/td><td><code>swiftdoc-packages<\/code><\/td><\/tr>\n<tr><td>The Swiftdoc README page<\/td><td><code>swiftdoc<\/code><\/td><td><code>swiftdoc-modules<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"menu-items\"><a href=\"#menu-items\" id=\"menu-items\" class=\"anchor\"><\/a>Menu Items<\/h3>\n<p>There are 3 types of menu items available<\/p>\n<h4 id=\"modules\"><a href=\"#modules\" id=\"modules\" class=\"anchor\"><\/a>Modules<\/h4>\n<p>Create a menu item linking to the module home pages. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocModules'\n      moduleType: 'swiftdoc'\n<\/code><\/pre>\n<h4 id=\"pages\"><a href=\"#pages\" id=\"pages\" class=\"anchor\"><\/a>Pages<\/h4>\n<p>Create a menu item linking to all the source pages for a single module. You can optionally filter it by page type,\nor include all source pages for that module. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'swiftdoc'\n      node: 'classes' # optional\n<\/code><\/pre>\n<p>By default, all menu items will display the title of the linked page, which is typically a human-readable version of the\ndocumented element. You can set <code>itemTitleType: 'ID'<\/code> to have it display the actual page element ID.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'swiftdoc'\n      node: 'classes'\n      itemTitleType: 'ID'\n<\/code><\/pre>\n<p>In addition, you can provide an inline Pebble template to render/transform the menu item title however you need. You\nhave access to the original <code>title<\/code>, the target <code>page<\/code>, and the <code>element<\/code> within that template.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'swiftdoc'\n      node: 'classes'\n      itemTitleType: 'ID'\n      transform: '{{ title|replace({&quot;com.eden.orchid&quot;: &quot;c.e.o&quot;}) }}'\n<\/code><\/pre>\n<h4 id=\"page-links\"><a href=\"#page-links\" id=\"page-links\" class=\"anchor\"><\/a>Page Links<\/h4>\n<p>Page Links adds menu item links to a single SourceDoc Page. It links to each &quot;section&quot; on that page (such as <code>methods<\/code>,\n<code>constructors<\/code>, or <code>fields<\/code> on a <code>classes<\/code> page). Setting <code>includeItems: true<\/code> will optionally include all that items\nfor each section. It is typically added to a Page's menu item through one of the above Archetypes.<\/p>\n<p>Just like <code>sourcedocPages<\/code>, you can customize how the menu item text is rendered with <code>itemTitleType<\/code>. It can be <code>NAME<\/code>\nfor the element's human-readable name, <code>ID<\/code> for the actual element ID, or <code>signature<\/code> to display the fully-formatted\nelement signature.<\/p>\n<pre><code class=\"language-yaml\">swiftdoc:\n  sourcePages:\n    menu:\n      - type: 'sourcedocPageLinks'\n        itemTitleType: 'signature' # optional, one of [NAME, ID, SIGNATURE]\n        includeItems: true # optional\n<\/code><\/pre>\n<h3 id=\"filtering-docs\"><a href=\"#filtering-docs\" id=\"filtering-docs\" class=\"anchor\"><\/a>Filtering Docs<\/h3>\n<p>TODO: add docs for filtering Swiftdocs<\/p>\n<h2 id=\"multi-module-usage\"><a href=\"#multi-module-usage\" id=\"multi-module-usage\" class=\"anchor\"><\/a>Multi-Module Usage<\/h2>\n<h3 id=\"configuration-1\"><a href=\"#configuration-1\" id=\"configuration-1\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>An example of multi-module configuration is below. Most properties are optional.<\/p>\n<pre><code class=\"language-yaml\">swiftdoc:\n  modules:\n    - name: 'project-1-name'\n      slug: 'project-1'\n      moduleGroup: 'group-a'\n      sourceDirs: ['../module-one/src/main/swift']\n      homePagePermalink: '...'\n      sourcePagePermalink: '...'\n      showRunnerLogs: false\n      homePageOnly: false\n      args: []\n      relatedModules: ['project-2-name']\n    - name: 'project-2-name'\n      ...\n<\/code><\/pre>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Option<\/th><th>Default Value<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>The name of the module, which becomes the title of the module Homepage.<\/td><td><code>name<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>The slug prepended to page URLs from this module.<\/td><td><code>slug<\/code><\/td><td>``<\/td><\/tr>\n<tr><td>Group multiple modules together for easier configuration and improved site hierarchy.<\/td><td><code>moduleGroup<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Relative paths to directories containing Swift or Java source code.<\/td><td><code>sourceDirs<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Customize the URL path for the homepage.<\/td><td><code>homePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Customize the URL path for class and source file pages.<\/td><td><code>sourcePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Whether to print logs from the underlying Sourcekitten CLI<\/td><td><code>showRunnerLogs<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>If true, do not run Sourcekitten. Create docs a module with only a homepage.<\/td><td><code>homePageOnly<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>A list of other modules which contain sources that may be linked to by the pages in this module<\/td><td><code>relatedModules<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Additional args to pass-through to the Sourcekitten CLI.<\/td><td><code>args<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"permalinks-1\"><a href=\"#permalinks-1\" id=\"permalinks-1\" class=\"anchor\"><\/a>Permalinks<\/h3>\n<p>Permalinks can be customized for all pages generated by this plugin. For each module, you can set <code>homePagePermalink<\/code> or\n<code>sourcePagePermalink<\/code> with your desired permalink string. The following dynamic path segments are available for these\npages (in addition to the standard permalink keys):<\/p>\n<ul>\n<li><code>:moduleType<\/code> - The &quot;type&quot; of source code you're documenting (<code>swiftdoc<\/code>)<\/li>\n<li><code>:moduleGroup<\/code> - The module group at declared in the module configuration<\/li>\n<li><code>:module<\/code> - The name of this specific module<\/li>\n<li><code>:sourceDocPath<\/code> - The path for each source code doc page, as defined by the Swiftdoc plugin<\/li>\n<\/ul>\n<p>The default permalinks are as follows:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Permalink pattern<\/th><th>Example without module group<\/th><th>Example with module group<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Module home pages<\/td><td><code>:moduleType/:moduleGroup/:module<\/code><\/td><td><code>/swiftdoc/project-1<\/code><\/td><td><code>/swiftdoc/group-a/project-1<\/code><\/td><\/tr>\n<tr><td>Source code pages<\/td><td><code>:moduleType/:moduleGroup/:module/:sourceDocPath<\/code><\/td><td><code>/swiftdoc/project-1/com/app/mainapplication<\/code><\/td><td><code>/swiftdoc/group-a/project-1/com/app/mainapplication<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"page-archetypes-1\"><a href=\"#page-archetypes-1\" id=\"page-archetypes-1\" class=\"anchor\"><\/a>Page Archetypes<\/h3>\n<p>The pages generated have several archetype keys available, for applying options to these pages in varying levels of\ngranularity:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Archetype Pattern<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Both module home and source code pages for all languages<\/td><td><code>sourcedoc.pages<\/code><\/td><\/tr>\n<tr><td>Just module home pages for all languages<\/td><td><code>sourcedoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just source code pages for all languages<\/td><td><code>sourcedoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Swift module home and source code pages for all modules<\/td><td><code>swiftdoc.pages<\/code><\/td><\/tr>\n<tr><td>Just Swift module home pages for all modules<\/td><td><code>swiftdoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Swift source code pages for all modules<\/td><td><code>swiftdoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Just Swift Class source code pages for all modules<\/td><td><code>swiftdoc.classesPages<\/code><\/td><\/tr>\n<tr><td>Just Swift source file source code pages for all modules<\/td><td><code>swiftdoc.sourceFilePages<\/code><\/td><\/tr>\n<tr><td>Swift module home and source code pages for a single module group<\/td><td><code>swiftdoc.[module group]Pages<\/code><\/td><\/tr>\n<tr><td>Just Swift module home pages for a single module group<\/td><td><code>swiftdoc.[module group]ModuleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Swift source code pages for a single module group<\/td><td><code>swiftdoc.[module group]SourcePages<\/code><\/td><\/tr>\n<tr><td>Just Swift Class source code pages for a single module group<\/td><td><code>swiftdoc.[module group]ClassesPages<\/code><\/td><\/tr>\n<tr><td>Just Swift source file source code pages for a single module group<\/td><td><code>swiftdoc.[module group]SourceFilesPages<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"collections-1\"><a href=\"#collections-1\" id=\"collections-1\" class=\"anchor\"><\/a>Collections<\/h3>\n<p>SourceDocs generate a variety of collections which allow you to precisely query these pages. All collections will have a\n<code>collectionType<\/code> of the <code>moduleType<\/code> (<code>swiftdoc<\/code>).<\/p>\n<p>For multiple modules, you will get a collection for each module with collectionId of its name. For each of these\ncollections, it will also contain related collections containing the source pages of a specific page types, <code>classes<\/code>\nand <code>sourceFiles<\/code>. In addition, you will have a single <code>modules<\/code> collection which contains the READMEs of all modules.<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Collection Type<\/th><th>Collection ID<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>All Swiftdoc pages<\/td><td><code>swiftdoc<\/code><\/td><td><code>[module name]<\/code><\/td><\/tr>\n<tr><td>All Swiftdoc class pages<\/td><td><code>swiftdoc<\/code><\/td><td><code>[module name]-classes<\/code><\/td><\/tr>\n<tr><td>All Swiftdoc source file pages<\/td><td><code>swiftdoc<\/code><\/td><td><code>[module name]-sourceFiles<\/code><\/td><\/tr>\n<tr><td>The Swiftdoc README page<\/td><td><code>swiftdoc<\/code><\/td><td><code>swiftdoc-modules<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"menu-items-1\"><a href=\"#menu-items-1\" id=\"menu-items-1\" class=\"anchor\"><\/a>Menu Items<\/h3>\n<p>There are 3 types of menu items available<\/p>\n<h4 id=\"modules-1\"><a href=\"#modules-1\" id=\"modules-1\" class=\"anchor\"><\/a>Modules<\/h4>\n<p>Create a menu item linking to the module home pages, optionally filtered by module group. Typically added to the Theme\nmenu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocModules'\n      moduleType: 'swiftdoc'\n      moduleGroup: 'group-a' \n<\/code><\/pre>\n<h4 id=\"pages-1\"><a href=\"#pages-1\" id=\"pages-1\" class=\"anchor\"><\/a>Pages<\/h4>\n<p>Create a menu item linking to all the source pages for a single module. You can optionally filter it by page type,\nor include all source pages for that module. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'swiftdoc'\n      moduleName: 'project-1-name'\n      node: 'classes' # optional\n<\/code><\/pre>\n<p>By default, all menu items will display the title of the linked page, which is typically a human-readable version of the\ndocumented element. You can set <code>itemTitleType: 'ID'<\/code> to have it display the actual page element ID.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'swiftdoc'\n      moduleName: 'project-1-name'\n      node: 'classes'\n      itemTitleType: 'ID'\n<\/code><\/pre>\n<p>In addition, you can provide an inline Pebble template to render/transform the menu item title however you need. You\nhave access to the original <code>title<\/code>, the target <code>page<\/code>, and the <code>element<\/code> within that template.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'swiftdoc'\n      moduleName: 'project-1-name'\n      node: 'classes'\n      itemTitleType: 'ID'\n      transform: '{{ title|replace({&quot;com.eden.orchid&quot;: &quot;c.e.o&quot;}) }}'\n<\/code><\/pre>\n<h4 id=\"page-links-1\"><a href=\"#page-links-1\" id=\"page-links-1\" class=\"anchor\"><\/a>Page Links<\/h4>\n<p>Page Links adds menu item links to a single SourceDoc Page. It links to each &quot;section&quot; on that page (such as <code>methods<\/code>,\n<code>constructors<\/code>, or <code>fields<\/code> on a <code>classes<\/code> page). Setting <code>includeItems: true<\/code> will optionally include all that items\nfor each section. It is typically added to a Page's menu item through one of the above Archetypes.<\/p>\n<p>Just like <code>sourcedocPages<\/code>, you can customize how the menu item text is rendered with <code>itemTitleType<\/code>. It can be <code>NAME<\/code>\nfor the element's human-readable name, <code>ID<\/code> for the actual element ID, or <code>signature<\/code> to display the fully-formatted\nelement signature.<\/p>\n<pre><code class=\"language-yaml\">swiftdoc:\n  sourcePages:\n    menu:\n      - type: 'sourcedocPageLinks'\n        itemTitleType: 'signature' # optional, one of [NAME, ID, SIGNATURE]\n        includeItems: true # optional\n<\/code><\/pre>\n<h3 id=\"filtering-docs-1\"><a href=\"#filtering-docs-1\" id=\"filtering-docs-1\" class=\"anchor\"><\/a>Filtering Docs<\/h3>\n<p>TODO: add docs for filtering Swiftdocs<\/p>\n"
          }]
        },
        "orchidposts": {
          "ownKey": "orchidposts",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidposts",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidposts"
            },
            "description": "Add Jekyll-like blogging functionality to your Orchid site.",
            "title": "OrchidPosts",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>Add Jekyll-like blogging functionality to your Orchid site, with dated blog posts and RSS/Atom feeds.<\/p>\n<p>This plugin only creates the blog posts themselves. To generate archives for your blog posts' tags and categories,\ncheck out the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidtaxonomies\">OrchidTaxonomies<\/a> plugin, and refer to the <a href=\"https://github.com/orchidhq/OrchidStarter/blob/master/src/orchid/resources/config/taxonomies.yml\">OrchidStarter repo<\/a>\nfor basic taxonomies setup.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"pHq5yo9GBm\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"pHq5yo9GBm\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidPosts:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidPosts&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidPosts&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidPosts:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidStarter\">starter app<\/a><\/li>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidPosts/src/test/kotlin/com/eden/orchid/posts/PostsGeneratorTest.kt\">PostsGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"basic-usage\"><a href=\"#basic-usage\" id=\"basic-usage\" class=\"anchor\"><\/a>Basic Usage<\/h3>\n<p>Orchid supports blogging in a manner similar to Jekyll, but made to be much easier to manage for large blogs. Blog posts\nall have an intrinsic publish date, and can be grouped into hierarchical categories. Blog posts are found as files in\n<code>posts/<\/code> where the filename matches the pattern of <code>YYYY-MM-DD-post-slug<\/code>. The file type can be anything that Orchid can\nprocess, and the date in the filename is automatically set as the post's <code>publishDate<\/code> and will not be rendered in the\noutput site until after that date.<\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n└── posts/\n    └── 2019-01-01-blog-post-one.md &lt;-- compiled as Markdown to /2019/1/1/blog-post-one\n<\/code><\/pre>\n<p>You may also group your posts by year, month, and day in folders, instead of requiring them all to be in the filename.\nFor example, instead of having a post from a file at <code>posts/2018-01-01-post-one.md<\/code>, you could instead group your posts\nby year (<code>posts/2018/01-01-post-one.md<\/code>), by year and month (<code>posts/2018/01/01-post-one.md<\/code>), or by year, month,\nand day (<code>posts/2018/01/01/post-one.md<\/code>). This is completely optional, and you can mix-and-match individual posts into\nthese formats as needed for better organization.<\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n└── posts/\n    ├── 2018/ &lt;-- group posts by year\n    |   └── 01 &lt;-- group posts by month \n    |       └── 02-blog-post-two.md &lt;-- filename includes day, lives at /2018/1/2/blog-post-two\n    └── 2017/ &lt;-- group posts by year\n        └── 02-03-blog-post-three.md &lt;-- filename includes month and day, lives at /2017/2/3/blog-post-three\n<\/code><\/pre>\n<p>You can further write posts as index files in a subdirectory, such as <code>YYYY/MM/DD/post-slug/index.md<\/code>.<\/p>\n<p>Instead of using the full <code>YYYY-MM-DD<\/code> date format as the post date, you can also use a year and the day of year, which\nmay be easier for generating posts from scripts. Such a format would look like <code>YYYY-DayOfYear-post-slug.md<\/code> instead.\nFor example, <code>posts/2018/001/post-one/index.md<\/code> resolves to a date of January 1st, 2018, and\n<code>posts/2018/081/post-one/index.md<\/code> is March 22, 2018.<\/p>\n<h3 id=\"post-title\"><a href=\"#post-title\" id=\"post-title\" class=\"anchor\"><\/a>Post Title<\/h3>\n<p>By default, the title of the blog post is given as the <code>post-slug<\/code> part of the filename, converted to a human-readable,\ncapitalized title, unless a <code>title<\/code> is set in the post's Front Matter.<\/p>\n<pre><code class=\"language-md\">// posts/2018-01-01-post-one.md &lt;-- Post title is &quot;Post One&quot;\n---\n---\n<\/code><\/pre>\n<pre><code class=\"language-md\">// posts/2018-01-01-post-one.md\n---\ntitle: First Blog Post &lt;-- Post title is &quot;First Blog Post&quot;, not &quot;Post One&quot;\n---\n<\/code><\/pre>\n<h3 id=\"permalinks\"><a href=\"#permalinks\" id=\"permalinks\" class=\"anchor\"><\/a>Permalinks<\/h3>\n<p>Posts can customize their permalink by setting the <code>permalink<\/code> property in their Front Matter. The <code>permalink<\/code> takes a\nstring with certain path segments set up as dynamic parts, such as <code>blog/:year/:month/:slug<\/code>. Any path segment which\nmatches the pattern of <code>:key<\/code> or <code>{key}<\/code> will attempt to fill that segment with some dynamic data, such as the post's\npublished year, month, or date, its category, or any variable set in its Front Matter.<\/p>\n<pre><code class=\"language-md\">// posts/2018-01-01-post-one.md\n---\ntitle: First Blog Post\npermalink: 'blog/:year/:slug' &lt;-- permalink at /blog/2018/post-one\n---\n<\/code><\/pre>\n<h3 id=\"using-categories\"><a href=\"#using-categories\" id=\"using-categories\" class=\"anchor\"><\/a>Using Categories<\/h3>\n<p>Categories must be set in your <code>config.yml<\/code>, and posts will only be added if they are in the path within <code>posts/<\/code>\ncorresponding to one of these configured categories. Categories may be nested inside a parent category, but it must\nbuild a complete hierarchy, where every parent category is also listed as its own category.<\/p>\n<pre><code class=\"language-yaml\">posts:\n  baseDir: 'blog'  # (1) \n  categories:\n    - 'personal'  # (2)\n    - 'programming'  # (3)\n    - 'programming/android'  # (4)\n    - 'programming/web'  # (5)\n<\/code><\/pre>\n<ol>\n<li>Looks for the blog posts in <code>blog/<\/code> instead of <code>posts/<\/code><\/li>\n<li>Creates a category in <code>{baseDir}/personal<\/code>, and every post in that folder will be in the <code>personal<\/code> category<\/li>\n<li>Creates a category in <code>{baseDir}/programming<\/code>, and every post in that folder will be in the <code>programming<\/code> category<\/li>\n<li>Creates a category in <code>{baseDir}/programming/android<\/code>, and every post in that folder will be in the <code>android<\/code> primary\ncategory, but will also be in the <code>programming<\/code> category since it is a parent category of <code>android<\/code>.<\/li>\n<li>Creates a category in <code>{baseDir}/programming/web<\/code>, and every post in that folder will be in the <code>web<\/code> primary\ncategory, but will also be in the <code>programming<\/code> category since it is a parent category of <code>web<\/code>.<\/li>\n<\/ol>\n<p><strong>Note:<\/strong> if no categories are given, all posts in the <code>{baseDir}<\/code> are simply considered blog posts without any\ncategory, and is just a generic &quot;blog&quot;. If you <em>do<\/em> specify categories, then all posts must be in one of the defined\ncategories, otherwise they will be ignored; there is no concept of 'uncategorized' posts unless you choose to create a\ncategory called 'uncategorized' and put uncategorized posts there.<\/p>\n<h3 id=\"customizing-categories\"><a href=\"#customizing-categories\" id=\"customizing-categories\" class=\"anchor\"><\/a>Customizing Categories<\/h3>\n<p>Using the configuration block shown above will set up your categories with all default values, but it is likely that you\nwill want to change certain features of the posts in a category based on which category they are in. Currently,\nCategories can customize their own title to be different from their path, and they can set the permalink structure to be\nthe same for all posts in that category.<\/p>\n<p>There are several different ways to set up the category configuration. (1) You can set the category as a String to use\ndefault values, as shown above; (2) you can set each list item to be a map of config values, where the <code>key<\/code> property is\nthe category path; (3) or you can set each list item to be a map with a single property that is the category path, and\nwhose value is a map of configuration values.<\/p>\n<pre><code class=\"language-yaml\"># Method (1), String as category path\nposts: \n  categories:\n    - 'personal'\n    - 'programming'\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># Method (2), Map with config values and `key` property as category path\nposts: \n  categories:\n    - key: 'personal'\n      title: 'Personal Blog'\n    - key: 'programming'\n      title: 'programming Blog'\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># Method (3), Map with only key as category path, and value as config values\nposts: \n  categories:\n    - personal: \n        title: 'Personal Blog'\n    - programming:\n        title: 'programming Blog'\n<\/code><\/pre>\n<p>Note that there is no difference between Method (2) and Method (3), it is simply a matter of preference.<\/p>\n<h3 id=\"post-authors\"><a href=\"#post-authors\" id=\"post-authors\" class=\"anchor\"><\/a>Post Authors<\/h3>\n<p>Blog posts can have authors assigned to them. Orchid Posts generates Author pages for known authors, but does allow for\n&quot;guest&quot; authors to be defined for a single post. Both known and guest authors accept the same configuration object, but\nwhere that object is defined is different for each.<\/p>\n<h4 id=\"known-authors\"><a href=\"#known-authors\" id=\"known-authors\" class=\"anchor\"><\/a>Known Authors<\/h4>\n<p>Known authors can be set just in the <code>config.yml<\/code> under the <code>posts.authors<\/code> key. These authors will have default pages\ngenerated for them, and can be linked to directly from the blog post. You can also create a content file under the\n<code>posts/authors/<\/code> directory to customize the content of that page, such as to show a bio for the author. In this case,\nthe same configuration values can be set in the page's Front Matter.<\/p>\n<p>From any post's Front Matter, you may set the <code>author<\/code> property to the <code>name<\/code> of one of these known authors, and that\nAuthor will then be linked to the post.<\/p>\n<h4 id=\"guest-authors\"><a href=\"#guest-authors\" id=\"guest-authors\" class=\"anchor\"><\/a>Guest Authors<\/h4>\n<p>Guest authors may be set by setting a post's <code>author<\/code> property to a map of Author config values, instead of as the name\nof a known author. This will display the same information for the author as for a known author, but they will not have\na landing page generated to link to.<\/p>\n<h3 id=\"post-comments\"><a href=\"#post-comments\" id=\"post-comments\" class=\"anchor\"><\/a>Post Comments<\/h3>\n<p>OrchidPosts supports comments via Disqus with the <code>disqus<\/code>. Using Archetypes, it is quite simple to set up all\nyour blog posts to have a comments section with the <code>disqus<\/code> component without having to manually add the component to\neach page.<\/p>\n<h3 id=\"rss-and-atom-feeds\"><a href=\"#rss-and-atom-feeds\" id=\"rss-and-atom-feeds\" class=\"anchor\"><\/a>RSS and Atom Feeds<\/h3>\n<p>OrchidPosts will generate feeds for your content automatically, in both the RSS and Atom formats. You can customize the\nfeeds from the <code>feeds<\/code> generator object in your <code>config.yml<\/code>, such as how many entries to include in the feed, or which\ngenerators to include pages from (defaults to just the <code>posts<\/code> generator). Pages included in the feed are sorted by\ntheir <code>publishDate<\/code>, and the feed content comes from the <code>feeds/rss.peb<\/code> and <code>feeds/atom.peb<\/code> pages, which can be\noverridden and customized if needed.<\/p>\n<p>Since 0.19.0, after creating feeds, you can use the <code>feedLink<\/code> meta-component to add <code>&lt;link rel='alternate'&gt;<\/code> tags to\nthe head of the page, pointing to the generated feeds. See example config below to add alternate links to all post\npages:<\/p>\n<pre><code class=\"language-yaml\"># config.yml\n\nposts:\n  postPages:\n    metaComponents:\n      - type: 'feedLinks'\n<\/code><\/pre>\n"
          }]
        },
        "orchidjavadoc": {
          "ownKey": "orchidjavadoc",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidjavadoc",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidjavadoc"
            },
            "description": "Where Orchid began. Create beautiful Javadocs for your project within your Orchid site.",
            "title": "OrchidJavadoc",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The OrchidJavadoc plugin integrates with the\n<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html\">Javadoc<\/a> tool to embed class and package\ninfo from Java source code directly in your Orchid site.<\/p>\n<article class=\"message is-info\">\n\n  <div class=\"message-body\">\n  <p>The suite of Orchid Sourcedocs plugins are for designed for merging source code documentation with the rest of your\nproject site.<\/p>\n<p>Orchid Sourcedocs supports multi-module projects with READMEs and separate doc groups for each module, customizable\npermalinks, auto-updating menu items, and an ever-improving data model to link to doc pages and display the\nrelationships among different elements.<\/p>\n<p>It also integrates client-side full-text search from the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidsearch\">OrchidSearch<\/a> plugin and is set up for easy page\nquerying or archive generation with the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidtaxonomies\">OrchidTaxonomies<\/a> plugin.<\/p>\n<p>The following languages are currently supported:<\/p>\n<ul>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidjavadoc\">Java<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidkotlindoc\">Kotlin<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidgroovydoc\">Groovy<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidswiftdoc\">Swift<\/a><\/li>\n<\/ul>\n  <\/div>\n<\/article>\n<article class=\"message is-danger\">\n\n  <div class=\"message-body\">\n  <p>Support for the legacy javadoc plugin will be removed in version 0.22.0. Until version 0.21.0, legacy\njavadocs were the default, but now they are end-of-life and must be enabled with the <code>--legacySourceDoc<\/code>\nCLI flag.<\/p>\n  <\/div>\n<\/article>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"wCsTwLw8E5\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"wCsTwLw8E5\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidJavadoc:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidJavadoc&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidJavadoc&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidJavadoc:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/java-site\">example app<\/a><\/li>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidJavadoc/src/test/kotlin/com/eden/orchid/javadoc/NewJavadocGeneratorTest.kt\">JavadocGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"single-module-usage\"><a href=\"#single-module-usage\" id=\"single-module-usage\" class=\"anchor\"><\/a>Single-Module Usage<\/h2>\n<h3 id=\"configuration\"><a href=\"#configuration\" id=\"configuration\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>An example of single-module configuration is below. Most properties are optional.<\/p>\n<pre><code class=\"language-yaml\">javadoc:\n  name: 'Project Name'\n  sourceDirs: ['../module-one/src/main/java']\n  homePagePermalink: '...'\n  sourcePagePermalink: '...'\n  showRunnerLogs: false\n  homePageOnly: false\n  args: []\n<\/code><\/pre>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Option<\/th><th>Default Value<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>The name of the module, which becomes the title of the module Homepage.<\/td><td><code>name<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>Relative paths to directories containing Java source code.<\/td><td><code>sourceDirs<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Customize the URL path for the homepage.<\/td><td><code>homePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Customize the URL path for class and package pages.<\/td><td><code>sourcePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Whether to print logs from the underlying Javadoc CLI<\/td><td><code>showRunnerLogs<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>If true, do not run Javaodc. Create docs a module with only a homepage.<\/td><td><code>homePageOnly<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>Additional args to pass-through to the Javadoc CLI.<\/td><td><code>args<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"permalinks\"><a href=\"#permalinks\" id=\"permalinks\" class=\"anchor\"><\/a>Permalinks<\/h3>\n<p>Permalinks can be customized for all pages generated by this plugin. For each module, you can set <code>homePagePermalink<\/code> or\n<code>sourcePagePermalink<\/code> with your desired permalink string. The following dynamic path segments are available for these\npages (in addition to the standard permalink keys):<\/p>\n<ul>\n<li><code>:moduleType<\/code> - The &quot;type&quot; of source code you're documenting (<code>javadoc<\/code>)<\/li>\n<li><code>:moduleGroup<\/code> - Not used for single-module docs<\/li>\n<li><code>:module<\/code> - Not used for single-module docs<\/li>\n<li><code>:sourceDocPath<\/code> - The path for each source code doc page, as defined by the Javadoc plugin<\/li>\n<\/ul>\n<p>The default permalinks are as follows:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Permalink pattern<\/th><th>Example<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Module home pages<\/td><td><code>:moduleType/:moduleGroup/:module<\/code><\/td><td><code>/javadoc<\/code><\/td><\/tr>\n<tr><td>Source code pages<\/td><td><code>:moduleType/:moduleGroup/:module/:sourceDocPath<\/code><\/td><td><code>/javadoc/com/app/mainapplication<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"page-archetypes\"><a href=\"#page-archetypes\" id=\"page-archetypes\" class=\"anchor\"><\/a>Page Archetypes<\/h3>\n<p>The pages generated have several archetype keys available, for applying options to these pages in varying levels of\ngranularity:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Archetype Pattern<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Both module home and source code pages for all languages<\/td><td><code>sourcedoc.pages<\/code><\/td><\/tr>\n<tr><td>Just module home pages for all languages<\/td><td><code>sourcedoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just source code pages for all languages<\/td><td><code>sourcedoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Java module home and source code pages<\/td><td><code>javadoc.pages<\/code><\/td><\/tr>\n<tr><td>Just Java module home pages<\/td><td><code>javadoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Java source code pages<\/td><td><code>javadoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Just Java Class source code pages<\/td><td><code>javadoc.classesPages<\/code><\/td><\/tr>\n<tr><td>Just Java Package source code pages<\/td><td><code>javadoc.packagesPages<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"collections\"><a href=\"#collections\" id=\"collections\" class=\"anchor\"><\/a>Collections<\/h3>\n<p>SourceDocs generate a variety of collections which allow you to precisely query these pages. All collections will have a\n<code>collectionType<\/code> of the <code>moduleType<\/code> (<code>javadoc<\/code>).<\/p>\n<p>For a single module, you will get a collection with collectionId of the moduleType. For each of these collections, it\nwill also contain related collections containing the source pages of a specific page types, <code>classes<\/code> and <code>packages<\/code>.\nIn addition, you will have a <code>modules<\/code> collection, which contains the READMEs for each module.<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Collection Type<\/th><th>Collection ID<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>All Javadoc pages<\/td><td><code>javadoc<\/code><\/td><td><code>javadoc<\/code><\/td><\/tr>\n<tr><td>All Javadoc class pages<\/td><td><code>javadoc<\/code><\/td><td><code>javadoc-classes<\/code><\/td><\/tr>\n<tr><td>All Javadoc package pages<\/td><td><code>javadoc<\/code><\/td><td><code>javadoc-packages<\/code><\/td><\/tr>\n<tr><td>The Javadoc README page<\/td><td><code>javadoc<\/code><\/td><td><code>javadoc-modules<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"menu-items\"><a href=\"#menu-items\" id=\"menu-items\" class=\"anchor\"><\/a>Menu Items<\/h3>\n<p>There are 3 types of menu items available<\/p>\n<h4 id=\"modules\"><a href=\"#modules\" id=\"modules\" class=\"anchor\"><\/a>Modules<\/h4>\n<p>Create a menu item linking to the module home pages. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocModules'\n      moduleType: 'javadoc'\n<\/code><\/pre>\n<h4 id=\"pages\"><a href=\"#pages\" id=\"pages\" class=\"anchor\"><\/a>Pages<\/h4>\n<p>Create a menu item linking to all the source pages for a single module. You can optionally filter it by page type,\nor include all source pages for that module. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'javadoc'\n      node: 'classes' # optional\n<\/code><\/pre>\n<p>By default, all menu items will display the title of the linked page, which is typically a human-readable version of the\ndocumented element. You can set <code>itemTitleType: 'ID'<\/code> to have it display the actual page element ID.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'javadoc'\n      node: 'classes'\n      itemTitleType: 'ID'\n<\/code><\/pre>\n<p>In addition, you can provide an inline Pebble template to render/transform the menu item title however you need. You\nhave access to the original <code>title<\/code>, the target <code>page<\/code>, and the <code>element<\/code> within that template.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'javadoc'\n      node: 'classes'\n      itemTitleType: 'ID'\n      transform: '{{ title|replace({&quot;com.eden.orchid&quot;: &quot;c.e.o&quot;}) }}'\n<\/code><\/pre>\n<h4 id=\"page-links\"><a href=\"#page-links\" id=\"page-links\" class=\"anchor\"><\/a>Page Links<\/h4>\n<p>Page Links adds menu item links to a single SourceDoc Page. It links to each &quot;section&quot; on that page (such as <code>methods<\/code>,\n<code>constructors<\/code>, or <code>fields<\/code> on a <code>classes<\/code> page). Setting <code>includeItems: true<\/code> will optionally include all that items\nfor each section. It is typically added to a Page's menu item through one of the above Archetypes.<\/p>\n<p>Just like <code>sourcedocPages<\/code>, you can customize how the menu item text is rendered with <code>itemTitleType<\/code>. It can be <code>NAME<\/code>\nfor the element's human-readable name, <code>ID<\/code> for the actual element ID, or <code>signature<\/code> to display the fully-formatted\nelement signature.<\/p>\n<pre><code class=\"language-yaml\">javadoc:\n  sourcePages:\n    menu:\n      - type: 'sourcedocPageLinks'\n        itemTitleType: 'signature' # optional, one of [NAME, ID, SIGNATURE]\n        includeItems: true # optional\n<\/code><\/pre>\n<h3 id=\"filtering-docs\"><a href=\"#filtering-docs\" id=\"filtering-docs\" class=\"anchor\"><\/a>Filtering Docs<\/h3>\n<p>TODO: add docs for filtering Javadocs<\/p>\n<h2 id=\"multi-module-usage\"><a href=\"#multi-module-usage\" id=\"multi-module-usage\" class=\"anchor\"><\/a>Multi-Module Usage<\/h2>\n<h3 id=\"configuration-1\"><a href=\"#configuration-1\" id=\"configuration-1\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>An example of multi-module configuration is below. Most properties are optional.<\/p>\n<pre><code class=\"language-yaml\">javadoc:\n  modules:\n    - name: 'project-1-name'\n      slug: 'project-1'\n      moduleGroup: 'group-a'\n      sourceDirs: ['../module-one/src/main/java']\n      homePagePermalink: '...'\n      sourcePagePermalink: '...'\n      showRunnerLogs: false\n      homePageOnly: false\n      relatedModules: ['project-2-name']\n      args: []\n    - name: 'project-2-name'\n      ...\n<\/code><\/pre>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Option<\/th><th>Default Value<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>The name of the module, which becomes the title of the module Homepage.<\/td><td><code>name<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>The slug prepended to page URLs from this module.<\/td><td><code>slug<\/code><\/td><td>``<\/td><\/tr>\n<tr><td>Group multiple modules together for easier configuration and improved site hierarchy.<\/td><td><code>moduleGroup<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Relative paths to directories containing Java or Java source code.<\/td><td><code>sourceDirs<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Customize the URL path for the homepage.<\/td><td><code>homePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Customize the URL path for class and package pages.<\/td><td><code>sourcePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Whether to print logs from the underlying Javadoc CLI<\/td><td><code>showRunnerLogs<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>If true, do not run Javadoc. Create docs a module with only a homepage.<\/td><td><code>homePageOnly<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>A list of other modules which contain sources that may be linked to by the pages in this module<\/td><td><code>relatedModules<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Additional args to pass-through to the Javadoc CLI.<\/td><td><code>args<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"permalinks-1\"><a href=\"#permalinks-1\" id=\"permalinks-1\" class=\"anchor\"><\/a>Permalinks<\/h3>\n<p>Permalinks can be customized for all pages generated by this plugin. For each module, you can set <code>homePagePermalink<\/code> or\n<code>sourcePagePermalink<\/code> with your desired permalink string. The following dynamic path segments are available for these\npages (in addition to the standard permalink keys):<\/p>\n<ul>\n<li><code>:moduleType<\/code> - The &quot;type&quot; of source code you're documenting (<code>javadoc<\/code>)<\/li>\n<li><code>:moduleGroup<\/code> - The module group at declared in the module configuration<\/li>\n<li><code>:module<\/code> - The name of this specific module<\/li>\n<li><code>:sourceDocPath<\/code> - The path for each source code doc page, as defined by the Javadoc plugin<\/li>\n<\/ul>\n<p>The default permalinks are as follows:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Permalink pattern<\/th><th>Example without module group<\/th><th>Example with module group<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Module home pages<\/td><td><code>:moduleType/:moduleGroup/:module<\/code><\/td><td><code>/javadoc/project-1<\/code><\/td><td><code>/javadoc/group-a/project-1<\/code><\/td><\/tr>\n<tr><td>Source code pages<\/td><td><code>:moduleType/:moduleGroup/:module/:sourceDocPath<\/code><\/td><td><code>/javadoc/project-1/com/app/mainapplication<\/code><\/td><td><code>/javadoc/group-a/project-1/com/app/mainapplication<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"page-archetypes-1\"><a href=\"#page-archetypes-1\" id=\"page-archetypes-1\" class=\"anchor\"><\/a>Page Archetypes<\/h3>\n<p>The pages generated have several archetype keys available, for applying options to these pages in varying levels of\ngranularity:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Archetype Pattern<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Both module home and source code pages for all languages<\/td><td><code>sourcedoc.pages<\/code><\/td><\/tr>\n<tr><td>Just module home pages for all languages<\/td><td><code>sourcedoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just source code pages for all languages<\/td><td><code>sourcedoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Java module home and source code pages for all modules<\/td><td><code>javadoc.pages<\/code><\/td><\/tr>\n<tr><td>Just Java module home pages for all modules<\/td><td><code>javadoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Java source code pages for all modules<\/td><td><code>javadoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Just Java Class source code pages for all modules<\/td><td><code>javadoc.classesPages<\/code><\/td><\/tr>\n<tr><td>Just Java Package source code pages for all modules<\/td><td><code>javadoc.packagesPages<\/code><\/td><\/tr>\n<tr><td>Java module home and source code pages for a single module group<\/td><td><code>javadoc.[module group]Pages<\/code><\/td><\/tr>\n<tr><td>Just Java module home pages for a single module group<\/td><td><code>javadoc.[module group]ModuleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Java source code pages for a single module group<\/td><td><code>javadoc.[module group]SourcePages<\/code><\/td><\/tr>\n<tr><td>Just Java Class source code pages for a single module group<\/td><td><code>javadoc.[module group]ClassesPages<\/code><\/td><\/tr>\n<tr><td>Just Java Package source code pages for a single module group<\/td><td><code>javadoc.[module group]PackagesPages<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"collections-1\"><a href=\"#collections-1\" id=\"collections-1\" class=\"anchor\"><\/a>Collections<\/h3>\n<p>SourceDocs generate a variety of collections which allow you to precisely query these pages. All collections will have a\n<code>collectionType<\/code> of the <code>moduleType<\/code> (<code>javadoc<\/code>).<\/p>\n<p>For multiple modules, you will get a collection for each module with collectionId of its name. For each of these\ncollections, it will also contain related collections containing the source pages of a specific page types, <code>classes<\/code>\nand <code>packages<\/code>. In addition, you will have a single <code>modules<\/code> collection which contains the READMEs of all modules.<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Collection Type<\/th><th>Collection ID<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>All Javadoc pages<\/td><td><code>javadoc<\/code><\/td><td><code>[module name]<\/code><\/td><\/tr>\n<tr><td>All Javadoc class pages<\/td><td><code>javadoc<\/code><\/td><td><code>[module name]-classes<\/code><\/td><\/tr>\n<tr><td>All Javadoc package pages<\/td><td><code>javadoc<\/code><\/td><td><code>[module name]-packages<\/code><\/td><\/tr>\n<tr><td>The Javadoc README page<\/td><td><code>javadoc<\/code><\/td><td><code>javadoc-modules<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"menu-items-1\"><a href=\"#menu-items-1\" id=\"menu-items-1\" class=\"anchor\"><\/a>Menu Items<\/h3>\n<p>There are 3 types of menu items available<\/p>\n<h4 id=\"modules-1\"><a href=\"#modules-1\" id=\"modules-1\" class=\"anchor\"><\/a>Modules<\/h4>\n<p>Create a menu item linking to the module home pages, optionally filtered by module group. Typically added to the Theme\nmenu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocModules'\n      moduleType: 'javadoc'\n      moduleGroup: 'group-a' \n<\/code><\/pre>\n<h4 id=\"pages-1\"><a href=\"#pages-1\" id=\"pages-1\" class=\"anchor\"><\/a>Pages<\/h4>\n<p>Create a menu item linking to all the source pages for a single module. You can optionally filter it by page type,\nor include all source pages for that module. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'javadoc'\n      moduleName: 'project-1-name'\n      node: 'classes' # optional\n<\/code><\/pre>\n<p>By default, all menu items will display the title of the linked page, which is typically a human-readable version of the\ndocumented element. You can set <code>itemTitleType: 'ID'<\/code> to have it display the actual page element ID.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'javadoc'\n      moduleName: 'project-1-name'\n      node: 'classes'\n      itemTitleType: 'ID'\n<\/code><\/pre>\n<p>In addition, you can provide an inline Pebble template to render/transform the menu item title however you need. You\nhave access to the original <code>title<\/code>, the target <code>page<\/code>, and the <code>element<\/code> within that template.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'javadoc'\n      moduleName: 'project-1-name'\n      node: 'classes'\n      itemTitleType: 'ID'\n      transform: '{{ title|replace({&quot;com.eden.orchid&quot;: &quot;c.e.o&quot;}) }}'\n<\/code><\/pre>\n<h4 id=\"page-links-1\"><a href=\"#page-links-1\" id=\"page-links-1\" class=\"anchor\"><\/a>Page Links<\/h4>\n<p>Page Links adds menu item links to a single SourceDoc Page. It links to each &quot;section&quot; on that page (such as <code>methods<\/code>,\n<code>constructors<\/code>, or <code>fields<\/code> on a <code>classes<\/code> page). Setting <code>includeItems: true<\/code> will optionally include all that items\nfor each section. It is typically added to a Page's menu item through one of the above Archetypes.<\/p>\n<p>Just like <code>sourcedocPages<\/code>, you can customize how the menu item text is rendered with <code>itemTitleType<\/code>. It can be <code>NAME<\/code>\nfor the element's human-readable name, <code>ID<\/code> for the actual element ID, or <code>signature<\/code> to display the fully-formatted\nelement signature.<\/p>\n<pre><code class=\"language-yaml\">javadoc:\n  sourcePages:\n    menu:\n      - type: 'sourcedocPageLinks'\n        itemTitleType: 'signature' # optional, one of [NAME, ID, SIGNATURE]\n        includeItems: true # optional\n<\/code><\/pre>\n<h3 id=\"filtering-docs-1\"><a href=\"#filtering-docs-1\" id=\"filtering-docs-1\" class=\"anchor\"><\/a>Filtering Docs<\/h3>\n<p>TODO: add docs for filtering Javadocs<\/p>\n"
          }]
        },
        "orchidtaxonomies": {
          "ownKey": "orchidtaxonomies",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidtaxonomies",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidtaxonomies"
            },
            "description": "Tag your pages with custom taxonomies and generate archives and landing pages for your taxonomy groups.",
            "title": "OrchidTaxonomies",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>Orchid supports generating archives from predefined Collections, and also for user-defined taxonomies inspired by\n<a href=\"https://gohugo.io/content-management/taxonomies/\">Hugo<\/a>. Taxonomies define logical relationships among various pages in\nyour site, generating archives for these groups of pages to bring related content into one place.<\/p>\n<p>The data that defines these logic groupings are often an intrinsic property of the page as defined by the plugin that\nproduced it, but taxonomies may also be &quot;tagged&quot; by hand to give you complete flexibility over your taxonomies. This\nmakes it easy to create archives for pages produced by another plugin, or create them yourself to match your own needs.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"yzgqPLEZdD\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"yzgqPLEZdD\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidTaxonomies:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidTaxonomies&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidTaxonomies&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidTaxonomies:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidStarter\">starter app<\/a><\/li>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidTaxonomies/src/test/kotlin/com/eden/orchid/taxonomies/TaxonomiesGeneratorTest.kt\">TaxonomiesGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<ul>\n<li><a href=\"#predefined-collection-archives\">Predefined Collection Archives<\/a><\/li>\n<li><a href=\"#understanding-taxonomies\">User-defined Taxonomy Archives<\/a><\/li>\n<\/ul>\n<h2 id=\"predefined-collection-archives\"><a href=\"#predefined-collection-archives\" id=\"predefined-collection-archives\" class=\"anchor\"><\/a>Predefined Collection Archives<\/h2>\n<p>Orchid's plugins already generate models of relationships among pages with <a href=\"https://orchid-revival.github.io/Orchid/wiki/user-manual/core-concepts/internal-links\">Collections<\/a>\nout-of-the-box, and it's common to simply want an archive of a all the pages in a given collection. For example, the\n<a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidposts\">OrchidPosts<\/a> plugin creates collections for each blog post category, and <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidsourcedoc\">OrchidSourceDoc<\/a>\ncreates collections for each documented module, and another collection for the READMEs for all modules.<\/p>\n<h3 id=\"collection-archive-configuration\"><a href=\"#collection-archive-configuration\" id=\"collection-archive-configuration\" class=\"anchor\"><\/a>Collection Archive Configuration<\/h3>\n<p>Generating one-off archives for these collections is similar to configuring Terms, as described later in this article.\nSimply specify the <code>collectionType<\/code> and <code>collectionId<\/code> you're already familiar with, and an archive will be generated\nlinking to each page in that collection.<\/p>\n<pre><code class=\"language-yaml\">taxonomies: \n  collectionArchives:\n    - collectionType: 'posts'\n      collectionId: 'category1'\n<\/code><\/pre>\n<p>The <code>collectionId<\/code> parameter is optional. If missing, all collections from the given <code>collectionType<\/code> will be merged\ninto a single archive listing.<\/p>\n<pre><code class=\"language-yaml\">taxonomies: \n  collectionArchives:\n    - collectionType: 'posts'\n      collectionId: 'category1'\n<\/code><\/pre>\n<p>In addition, you can choose to merge many disparate collections into a single archive by listing the pairs of\ncollection parameters under the <code>merge<\/code> key. You must also specify a 'key' for these merged archives.<\/p>\n<pre><code class=\"language-yaml\">taxonomies: \n  collectionArchives:\n  - title: 'Archives'\n    key: 'archives'\n    merge:\n      - collectionType: 'posts'\n        collectionId: 'category1'\n      - collectionType: 'pages'\n        collectionId: 'group1'\n<\/code><\/pre>\n<h3 id=\"collection-archive-permalinks\"><a href=\"#collection-archive-permalinks\" id=\"collection-archive-permalinks\" class=\"anchor\"><\/a>Collection Archive Permalinks<\/h3>\n<p>Both Taxonomy and Term archive pages can set a <code>permalink<\/code> in their configuration. Permalinks work the same as in other\nplugins, where path pieces starting with <code>:<\/code> or surrounded by <code>{}<\/code> will be replaced with that page's specific value.\nOrchidTaxonomies adds support for several additional path types that should be included in these permalinks:<\/p>\n<ul>\n<li><code>:collectionType<\/code> - the <code>collectionType<\/code> of the archive as set up in the configuration<\/li>\n<li><code>:collectionId<\/code> - the <code>collectionId<\/code> of the archive as set up in the configuration<\/li>\n<li><code>:collectionKey<\/code> - the unique <code>key<\/code> identifying this collection archive. If not defined in the configuration, it\ndefaults to the <code>collectionId<\/code> or <code>collectionType<\/code> configuration values.<\/li>\n<li><code>archiveIndex<\/code> - Archives are paginated (defaulting to 100 items/page), and this path type will set the index of the\narchive page. The index of the first page in an archive is omitted for &quot;prettier&quot; URLs, and resumes with 2 on the\nsecond page (if items even need to be paginated).<\/li>\n<\/ul>\n<h2 id=\"user-defined-taxonomy-archives\"><a href=\"#user-defined-taxonomy-archives\" id=\"user-defined-taxonomy-archives\" class=\"anchor\"><\/a>User-defined Taxonomy Archives<\/h2>\n<h3 id=\"understanding-taxonomies\"><a href=\"#understanding-taxonomies\" id=\"understanding-taxonomies\" class=\"anchor\"><\/a>Understanding Taxonomies<\/h3>\n<p>To understand how to use taxonomies, let's first look at a simple example you're probably already familiar and quite\ncomfortable with, blog categories and tags.<\/p>\n<p>In this example, we will consider the <strong>category<\/strong> and the <strong>tag<\/strong> as two different <em>taxonomies<\/em>, that is, blog posts\ncan be logically grouped by both their categories and their tags. Specifically, as it relates to the OrchidPosts plugin,\nblog posts can be assigned to a single category, which may have parent categories, and it may also be given any number\nof tags that are unrelated to is category. This creates the logical association that a Post is in one category (which\nis commonly included in the URL), and it has many tags, which is used to group posts across different categories.<\/p>\n<p>A user visiting your blog would expect to be able to view all the different categories on your site, whether they are\nincluded in your menu, or on a page of their own. The individual &quot;categories&quot; on your blog, such as &quot;News&quot;, &quot;Sports&quot;,\nor &quot;Technology&quot; would be considered the <strong>terms<\/strong> within the <em>categories<\/em> <strong>taxonomy<\/strong>, and a <strong>page<\/strong> is assigned to\nexactly one <strong>term<\/strong>, or one category. Likewise, the <em>tags<\/em> taxonomy can assign one or more  <em>tag<\/em> <strong>terms<\/strong> to a\n<em>page<\/em>.<\/p>\n<p>You could imagine custom taxonomies also being used for things like actors, directories, and generes being used to\ncategorize movies (as described in the Hugo article), individual sections in your Wiki, or anything else. The\nOrchidTaxonomies allows you to create taxonomies of any kind, generating archives for all your taxonomies' terms, and\nthe pages in each term.<\/p>\n<p>To recap:<\/p>\n<ul>\n<li><strong>Taxonomy<\/strong> - A logical categorization of related content<\/li>\n<li><strong>Term<\/strong> - A specific, named value in the Taxonomy<\/li>\n<li><strong>Page<\/strong> - An individual piece of content assigned to a Term<\/li>\n<\/ul>\n<h3 id=\"using-orchid-taxonomies\"><a href=\"#using-orchid-taxonomies\" id=\"using-orchid-taxonomies\" class=\"anchor\"><\/a>Using Orchid Taxonomies<\/h3>\n<p>The OrchidTaxonomies plugin does not create any taxonomies by default, you must set them up yourself. This is done by\nsetting the taxonomies on the <code>taxonomies<\/code> property of the <code>taxonomies<\/code> generator options object in <code>config.yml<\/code>.<\/p>\n<p>There are several different ways to set up the taxonomies configuration. (1) You can set the taxonomies as a String to\nuse the taxonomy default values; (2) you can set each list item to be a map of config values, where the <code>key<\/code> property\nis the taxonomy type; (3) or you can set each list item to be a map with a single property that is the taxonomy type,\nand whose value is a map of configuration values.<\/p>\n<pre><code class=\"language-yaml\"># Method (1), String as taxonomy types\ntaxonomies: \n  taxonomies:\n    - 'categories'\n    - 'tags'\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># Method (2), Map with config values and `key` property as taxonomy type\ntaxonomies: \n  taxonomies:\n    - key: 'categories'\n      title: 'Blog Categories'\n    - key: 'tags'\n      title: 'Tags'\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># Method (3), Map with only key as taxonomy type, and value as config values\ntaxonomies: \n  taxonomies:\n    - categories: \n        title: 'Blog Categories'\n    - tags:\n        title: 'Tags'\n<\/code><\/pre>\n<p>Note that there is no difference between Method (2) and Method (3), it is simply a matter of preference.<\/p>\n<h3 id=\"configuring-taxonomy-terms\"><a href=\"#configuring-taxonomy-terms\" id=\"configuring-taxonomy-terms\" class=\"anchor\"><\/a>Configuring Taxonomy Terms<\/h3>\n<p>Individual Terms within a Taxonomy may also be customized. Terms are located from your content and are not set up in\n<code>config.yml<\/code>. But for any term that <em>is<\/em> found in your content, optional configurations may used for it by setting the\nconfiguration as values of an object in its taxonomy configuration object. For example, if we have <code>categories<\/code> on our\nsite for &quot;News&quot; and &quot;Sports&quot;, we could configure the individual terms with the following configuration in <code>config.yml<\/code>:<\/p>\n<pre><code class=\"language-yaml\">taxonomies: \n  taxonomies:\n    - categories: \n        title: 'Blog Categories'\n        news: \n          title: 'Local News'\n        sports: \n          title: 'Sports'\n<\/code><\/pre>\n<h3 id=\"assigning-pages-to-terms\"><a href=\"#assigning-pages-to-terms\" id=\"assigning-pages-to-terms\" class=\"anchor\"><\/a>Assigning Pages to Terms<\/h3>\n<p>Taxonomies can either be set up as &quot;single&quot; or &quot;multiple&quot;. In the case of categories and tags, the &quot;tags&quot; taxonomy is a\n<strong>multiple<\/strong> taxonomy type, since each Post can be given any number of tags. in contrast, the &quot;categories&quot; taxonomy is a\n<strong>singular<\/strong> taxonomy type, since each Post can only be in one specific category (for the OrchidPosts plugin, you\nmay use &quot;categores&quot; as a multiple taxonomy to include each post in the archives for its own category and for all its\nparent categories).<\/p>\n<p>In the case of the OrchidPosts plugin, once the Taxonomy is set up in <code>config.yml<\/code> no further configuration is necessary\nto generate the Post archives. The OrchidPosts plugin already does the work of assigning the Pages to Terms, and the\nOrchidTaxonomies plugin is able to use this configuration for itself (internally, it uses Reflection to call a getter on\nthe Page, which returns the categories and tags). Other plugins may already be set up in their own manner as well, such\nas Wiki <code>sections<\/code> and Static Page <code>groups<\/code>, which makes it very easy to generate archives for any plugin you may be\nusing.<\/p>\n<p>If you want to assign pages to Taxonomies that are not set up by the plugin, you can simply add the Term values in the\npage's Front Matter. For &quot;singular&quot; taxonomies, the value must be a String. For &quot;multiple&quot; taxonomies, the value can be\na String or a list of Strings.<\/p>\n<pre><code class=\"language-yaml\">\n---\ncategories: 'Sports'\ntags:\n  - 'Outdoor Sports'\n  - 'Hiking'\n  - 'Nature'\n---\n<\/code><\/pre>\n<h3 id=\"archive-ordering\"><a href=\"#archive-ordering\" id=\"archive-ordering\" class=\"anchor\"><\/a>Archive Ordering<\/h3>\n<p>The archive pages in each Taxonomy and each taxonomy's term can be customized to suit your needs. Both the Taxonomy and\nTerm configuration objects support an <code>orderBy<\/code> property, along with <code>orderByDirection<\/code>. <code>orderBy<\/code> is a list of\nproperties on the items that make up the archive, and the items will be sorted in the order of those properties. For\nexample, if we order Posts by <code>[year, month, day<\/code>], posts will ordered primarily by year. If the years are equal, then\nthey will be ordered by month, and the same for equal month ordering by day.<\/p>\n<p>For Term ordering, within a Taxonomy archive, you may wish to create a configuration for each term with an <code>order<\/code>\nproperty, and then set <code>orderBy<\/code> to <code>order<\/code> to sort the Terms in their specific, defined order. Pages can be sorted on\nany property, either set in their Front Matter or intrinsic to the Page, such as <code>year<\/code>, <code>month<\/code>, or <code>day<\/code> as described\nabove (which are only available on Post pages), or anything else that is common to <em>all<\/em> pages, such as <code>publishDate<\/code>\nor <code>title<\/code>.<\/p>\n<h3 id=\"taxonomy-archive-permalinks\"><a href=\"#taxonomy-archive-permalinks\" id=\"taxonomy-archive-permalinks\" class=\"anchor\"><\/a>Taxonomy Archive Permalinks<\/h3>\n<p>Both Taxonomy and Term archive pages can set a <code>permalink<\/code> in their configuration. Permalinks work the same as in other\nplugins, where path pieces starting with <code>:<\/code> or surrounded by <code>{}<\/code> will be replaced with that page's specific value.\nOrchidTaxonomies adds support for several additional path types that should be included in these permalinks:<\/p>\n<ul>\n<li><code>:taxonomy<\/code> - the <code>key<\/code> of the taxonomy. Used in both Taxonomy and Term archive pages<\/li>\n<li><code>:term<\/code> - the <code>key<\/code> of the term within a specific taxonomy. Only used in Term archive pages<\/li>\n<li><code>:archiveIndex<\/code> - Archives are paginated (defaulting to 100 items/page), and this path type will set the index of the\narchive page. The index of the first page in an archive is omitted for &quot;prettier&quot; URLs, and resumes with 2 on the\nsecond page (if items even need to be paginated).<\/li>\n<\/ul>\n"
          }]
        },
        "orchidpresentations": {
          "ownKey": "orchidpresentations",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidpresentations",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidpresentations"
            },
            "description": "Embed slide presentations in your site using Deck.js",
            "title": "OrchidPresentations",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>Create simple presentations in the browser using <a href=\"http://imakewebthings.com/deck.js/\">Deck.js<\/a> and all of Orchid's\nsimple content management.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"96CrFdwVSJ\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"96CrFdwVSJ\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidPresentations:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidPresentations&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidPresentations&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidPresentations:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidPresentations/src/test/kotlin/com/eden/orchid/presentations/PresentationsGeneratorTest.kt\">PresentationsGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"basic-usage\"><a href=\"#basic-usage\" id=\"basic-usage\" class=\"anchor\"><\/a>Basic Usage<\/h3>\n<p>Presentations consist of a deck of slides in a subdirectory of <code>presentations/<\/code>. Each presentation should be a separate\ndirectory in <code>presentations/<\/code>, and the content files within that presentation directory are the individual slides in the\npresentation deck.<\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n└── presentations/\n    └── demo1/ &lt;-- presentation key is &quot;demo1&quot;\n        ├── slide-1.md\n        ├── slide-2.md\n        └── slide-3.md\n<\/code><\/pre>\n<p>These presentations can then be displayed in your Orchid site as a <code>presentation<\/code> component, which has a <code>presentation<\/code>\nproperty that references the name of one of your presentations (the name of the directory that contains slides). The\n<code>presentation<\/code> component adds the CSS and Javascript necessary to use Deck.js to display the content of your slides.\nNote that Deck.js requires JQuery to work. If you're using a theme that doesn't already have JQuery added, you'll need\nto add it yourself.<\/p>\n<pre><code class=\"language-markdown\">// pages/presentation.md\n---\ncomponents:\n  - type: 'presentation'\n    presentation: 'demo1' &lt;-- uses presentation slides from `presentations/demo1/` directory\n---\n<\/code><\/pre>\n<p>Note that a limitation of Deck.js is that only one presentation can be used on a page at a time, so only a single\n<code>presentation<\/code> should be added to each page.<\/p>\n<h3 id=\"slide-ordering\"><a href=\"#slide-ordering\" id=\"slide-ordering\" class=\"anchor\"><\/a>Slide Ordering<\/h3>\n<p>The content files that make up the presentation are ordered according to their order on disk, and the filename becomes\nthe unique ID added to the slide so that Deck.js is able to move between the slides. If the filenames are not ordered\nas you need them, you may manually set the ordering of slides by prefixing the filename with a number that is the slide\norder, such as <code>01-slide-one.md<\/code> and <code>02-slide-two.md<\/code>, which is stripped away from the slide ID.<\/p>\n"
          }]
        },
        "orchidgroovydoc": {
          "ownKey": "orchidgroovydoc",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidgroovydoc",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidgroovydoc"
            },
            "description": "Let Orchid generate documentation for Groovy or Groovy sources.",
            "title": "OrchidGroovydoc",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The OrchidGroovydoc plugin integrates with the\n<a href=\"https://docs.groovy-lang.org/latest/html/documentation/#_groovydoc_the_groovy_groovy_documentation_generator\">Groovydoc<\/a>\ntool to embed class and package info from Groovy and Java source code directly in your Orchid site.<\/p>\n<article class=\"message is-info\">\n\n  <div class=\"message-body\">\n  <p>The suite of Orchid Sourcedocs plugins are for designed for merging source code documentation with the rest of your\nproject site.<\/p>\n<p>Orchid Sourcedocs supports multi-module projects with READMEs and separate doc groups for each module, customizable\npermalinks, auto-updating menu items, and an ever-improving data model to link to doc pages and display the\nrelationships among different elements.<\/p>\n<p>It also integrates client-side full-text search from the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidsearch\">OrchidSearch<\/a> plugin and is set up for easy page\nquerying or archive generation with the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidtaxonomies\">OrchidTaxonomies<\/a> plugin.<\/p>\n<p>The following languages are currently supported:<\/p>\n<ul>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidjavadoc\">Java<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidkotlindoc\">Kotlin<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidgroovydoc\">Groovy<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidswiftdoc\">Swift<\/a><\/li>\n<\/ul>\n  <\/div>\n<\/article>\n<article class=\"message is-danger\">\n\n  <div class=\"message-body\">\n  <p>Support for the legacy groovydoc plugin will be removed in version 0.22.0. Until version 0.21.0, legacy\ngroovydocs were the default, but now they are end-of-life and must be enabled with the <code>--legacySourceDoc<\/code>\nCLI flag.<\/p>\n  <\/div>\n<\/article>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"0Mn0UtRdN5\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"0Mn0UtRdN5\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidGroovydoc:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidGroovydoc&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidGroovydoc&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidGroovydoc:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/groovy-site\">example app<\/a><\/li>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidGroovydoc/src/test/kotlin/com/eden/orchid/groovydoc/NewGroovydocGeneratorTest.kt\">GroovydocGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"single-module-usage\"><a href=\"#single-module-usage\" id=\"single-module-usage\" class=\"anchor\"><\/a>Single-Module Usage<\/h2>\n<h3 id=\"configuration\"><a href=\"#configuration\" id=\"configuration\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>An example of single-module configuration is below. Most properties are optional.<\/p>\n<pre><code class=\"language-yaml\">groovydoc:\n  name: 'Project Name'\n  sourceDirs: ['../module-one/src/main/groovy', '../module-one/src/main/java']\n  homePagePermalink: '...'\n  sourcePagePermalink: '...'\n  showRunnerLogs: false\n  homePageOnly: false\n  args: []\n<\/code><\/pre>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Option<\/th><th>Default Value<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>The name of the module, which becomes the title of the module Homepage.<\/td><td><code>name<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>Relative paths to directories containing Groovy or Java source code.<\/td><td><code>sourceDirs<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Customize the URL path for the homepage.<\/td><td><code>homePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Customize the URL path for class and package pages.<\/td><td><code>sourcePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Whether to print logs from the underlying Groovydoc CLI<\/td><td><code>showRunnerLogs<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>If true, do not run Groovydoc. Create docs a module with only a homepage.<\/td><td><code>homePageOnly<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>Additional args to pass-through to the Groovydoc CLI.<\/td><td><code>args<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"permalinks\"><a href=\"#permalinks\" id=\"permalinks\" class=\"anchor\"><\/a>Permalinks<\/h3>\n<p>Permalinks can be customized for all pages generated by this plugin. For each module, you can set <code>homePagePermalink<\/code> or\n<code>sourcePagePermalink<\/code> with your desired permalink string. The following dynamic path segments are available for these\npages (in addition to the standard permalink keys):<\/p>\n<ul>\n<li><code>:moduleType<\/code> - The &quot;type&quot; of source code you're documenting (<code>groovydoc<\/code>)<\/li>\n<li><code>:moduleGroup<\/code> - Not used for single-module docs<\/li>\n<li><code>:module<\/code> - Not used for single-module docs<\/li>\n<li><code>:sourceDocPath<\/code> - The path for each source code doc page, as defined by the Groovydoc plugin<\/li>\n<\/ul>\n<p>The default permalinks are as follows:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Permalink pattern<\/th><th>Example<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Module home pages<\/td><td><code>:moduleType/:moduleGroup/:module<\/code><\/td><td><code>/groovydoc<\/code><\/td><\/tr>\n<tr><td>Source code pages<\/td><td><code>:moduleType/:moduleGroup/:module/:sourceDocPath<\/code><\/td><td><code>/groovydoc/com/app/mainapplication<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"page-archetypes\"><a href=\"#page-archetypes\" id=\"page-archetypes\" class=\"anchor\"><\/a>Page Archetypes<\/h3>\n<p>The pages generated have several archetype keys available, for applying options to these pages in varying levels of\ngranularity:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Archetype Pattern<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Both module home and source code pages for all languages<\/td><td><code>sourcedoc.pages<\/code><\/td><\/tr>\n<tr><td>Just module home pages for all languages<\/td><td><code>sourcedoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just source code pages for all languages<\/td><td><code>sourcedoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Groovy module home and source code pages<\/td><td><code>groovydoc.pages<\/code><\/td><\/tr>\n<tr><td>Just Groovy module home pages<\/td><td><code>groovydoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Groovy source code pages<\/td><td><code>groovydoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Just Groovy Class source code pages<\/td><td><code>groovydoc.classesPages<\/code><\/td><\/tr>\n<tr><td>Just Groovy Package source code pages<\/td><td><code>groovydoc.packagesPages<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"collections\"><a href=\"#collections\" id=\"collections\" class=\"anchor\"><\/a>Collections<\/h3>\n<p>SourceDocs generate a variety of collections which allow you to precisely query these pages. All collections will have a\n<code>collectionType<\/code> of the <code>moduleType<\/code> (<code>groovydoc<\/code>).<\/p>\n<p>For a single module, you will get a collection with collectionId of the moduleType. For each of these collections, it\nwill also contain related collections containing the source pages of a specific page types, <code>classes<\/code> and <code>packages<\/code>.\nIn addition, you will have a <code>modules<\/code> collection, which contains the READMEs for each module.<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Collection Type<\/th><th>Collection ID<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>All Groovydoc pages<\/td><td><code>groovydoc<\/code><\/td><td><code>groovydoc<\/code><\/td><\/tr>\n<tr><td>All Groovydoc class pages<\/td><td><code>groovydoc<\/code><\/td><td><code>groovydoc-classes<\/code><\/td><\/tr>\n<tr><td>All Groovydoc package pages<\/td><td><code>groovydoc<\/code><\/td><td><code>groovydoc-packages<\/code><\/td><\/tr>\n<tr><td>The Groovydoc README page<\/td><td><code>groovydoc<\/code><\/td><td><code>groovydoc-modules<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"menu-items\"><a href=\"#menu-items\" id=\"menu-items\" class=\"anchor\"><\/a>Menu Items<\/h3>\n<p>There are 3 types of menu items available<\/p>\n<h4 id=\"modules\"><a href=\"#modules\" id=\"modules\" class=\"anchor\"><\/a>Modules<\/h4>\n<p>Create a menu item linking to the module home pages. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocModules'\n      moduleType: 'groovydoc'\n<\/code><\/pre>\n<h4 id=\"pages\"><a href=\"#pages\" id=\"pages\" class=\"anchor\"><\/a>Pages<\/h4>\n<p>Create a menu item linking to all the source pages for a single module. You can optionally filter it by page type,\nor include all source pages for that module. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'groovydoc'\n      node: 'classes' # optional\n<\/code><\/pre>\n<p>By default, all menu items will display the title of the linked page, which is typically a human-readable version of the\ndocumented element. You can set <code>itemTitleType: 'ID'<\/code> to have it display the actual page element ID.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'groovydoc'\n      node: 'classes'\n      itemTitleType: 'ID'\n<\/code><\/pre>\n<p>In addition, you can provide an inline Pebble template to render/transform the menu item title however you need. You\nhave access to the original <code>title<\/code>, the target <code>page<\/code>, and the <code>element<\/code> within that template.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'groovydoc'\n      node: 'classes'\n      itemTitleType: 'ID'\n      transform: '{{ title|replace({&quot;com.eden.orchid&quot;: &quot;c.e.o&quot;}) }}'\n<\/code><\/pre>\n<h4 id=\"page-links\"><a href=\"#page-links\" id=\"page-links\" class=\"anchor\"><\/a>Page Links<\/h4>\n<p>Page Links adds menu item links to a single SourceDoc Page. It links to each &quot;section&quot; on that page (such as <code>methods<\/code>,\n<code>constructors<\/code>, or <code>fields<\/code> on a <code>classes<\/code> page). Setting <code>includeItems: true<\/code> will optionally include all that items\nfor each section. It is typically added to a Page's menu item through one of the above Archetypes.<\/p>\n<p>Just like <code>sourcedocPages<\/code>, you can customize how the menu item text is rendered with <code>itemTitleType<\/code>. It can be <code>NAME<\/code>\nfor the element's human-readable name, <code>ID<\/code> for the actual element ID, or <code>signature<\/code> to display the fully-formatted\nelement signature.<\/p>\n<pre><code class=\"language-yaml\">groovydoc:\n  sourcePages:\n    menu:\n      - type: 'sourcedocPageLinks'\n        itemTitleType: 'signature' # optional, one of [NAME, ID, SIGNATURE]\n        includeItems: true # optional\n<\/code><\/pre>\n<h3 id=\"filtering-docs\"><a href=\"#filtering-docs\" id=\"filtering-docs\" class=\"anchor\"><\/a>Filtering Docs<\/h3>\n<p>TODO: add docs for filtering Groovydocs<\/p>\n<h2 id=\"multi-module-usage\"><a href=\"#multi-module-usage\" id=\"multi-module-usage\" class=\"anchor\"><\/a>Multi-Module Usage<\/h2>\n<h3 id=\"configuration-1\"><a href=\"#configuration-1\" id=\"configuration-1\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>An example of multi-module configuration is below. Most properties are optional.<\/p>\n<pre><code class=\"language-yaml\">groovydoc:\n  modules:\n    - name: 'project-1-name'\n      slug: 'project-1'\n      moduleGroup: 'group-a'\n      sourceDirs: ['../module-one/src/main/groovy', '../module-one/src/main/java']\n      homePagePermalink: '...'\n      sourcePagePermalink: '...'\n      showRunnerLogs: false\n      homePageOnly: false\n      args: []\n      relatedModules: ['project-2-name']\n    - name: 'project-2-name'\n      ...\n<\/code><\/pre>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Option<\/th><th>Default Value<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>The name of the module, which becomes the title of the module Homepage.<\/td><td><code>name<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>The slug prepended to page URLs from this module.<\/td><td><code>slug<\/code><\/td><td>``<\/td><\/tr>\n<tr><td>Group multiple modules together for easier configuration and improved site hierarchy.<\/td><td><code>moduleGroup<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Relative paths to directories containing Groovy or Java source code.<\/td><td><code>sourceDirs<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Customize the URL path for the homepage.<\/td><td><code>homePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Customize the URL path for class and package pages.<\/td><td><code>sourcePagePermalink<\/code><\/td><td>see below<\/td><\/tr>\n<tr><td>Whether to print logs from the underlying Groovydoc CLI<\/td><td><code>showRunnerLogs<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>If true, do not run Groovydoc. Create docs a module with only a homepage.<\/td><td><code>homePageOnly<\/code><\/td><td><code>false<\/code><\/td><\/tr>\n<tr><td>A list of other modules which contain sources that may be linked to by the pages in this module<\/td><td><code>relatedModules<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<tr><td>Additional args to pass-through to the Groovydoc CLI.<\/td><td><code>args<\/code><\/td><td><code>[]<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"permalinks-1\"><a href=\"#permalinks-1\" id=\"permalinks-1\" class=\"anchor\"><\/a>Permalinks<\/h3>\n<p>Permalinks can be customized for all pages generated by this plugin. For each module, you can set <code>homePagePermalink<\/code> or\n<code>sourcePagePermalink<\/code> with your desired permalink string. The following dynamic path segments are available for these\npages (in addition to the standard permalink keys):<\/p>\n<ul>\n<li><code>:moduleType<\/code> - The &quot;type&quot; of source code you're documenting (<code>groovydoc<\/code>)<\/li>\n<li><code>:moduleGroup<\/code> - The module group at declared in the module configuration<\/li>\n<li><code>:module<\/code> - The name of this specific module<\/li>\n<li><code>:sourceDocPath<\/code> - The path for each source code doc page, as defined by the Groovydoc plugin<\/li>\n<\/ul>\n<p>The default permalinks are as follows:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Permalink pattern<\/th><th>Example without module group<\/th><th>Example with module group<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Module home pages<\/td><td><code>:moduleType/:moduleGroup/:module<\/code><\/td><td><code>/groovydoc/project-1<\/code><\/td><td><code>/groovydoc/group-a/project-1<\/code><\/td><\/tr>\n<tr><td>Source code pages<\/td><td><code>:moduleType/:moduleGroup/:module/:sourceDocPath<\/code><\/td><td><code>/groovydoc/project-1/com/app/mainapplication<\/code><\/td><td><code>/groovydoc/group-a/project-1/com/app/mainapplication<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"page-archetypes-1\"><a href=\"#page-archetypes-1\" id=\"page-archetypes-1\" class=\"anchor\"><\/a>Page Archetypes<\/h3>\n<p>The pages generated have several archetype keys available, for applying options to these pages in varying levels of\ngranularity:<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Archetype Pattern<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Both module home and source code pages for all languages<\/td><td><code>sourcedoc.pages<\/code><\/td><\/tr>\n<tr><td>Just module home pages for all languages<\/td><td><code>sourcedoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just source code pages for all languages<\/td><td><code>sourcedoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Groovy module home and source code pages for all modules<\/td><td><code>groovydoc.pages<\/code><\/td><\/tr>\n<tr><td>Just Groovy module home pages for all modules<\/td><td><code>groovydoc.moduleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Groovy source code pages for all modules<\/td><td><code>groovydoc.sourcePages<\/code><\/td><\/tr>\n<tr><td>Just Groovy Class source code pages for all modules<\/td><td><code>groovydoc.classesPages<\/code><\/td><\/tr>\n<tr><td>Just Groovy Package source code pages for all modules<\/td><td><code>groovydoc.packagesPages<\/code><\/td><\/tr>\n<tr><td>Groovy module home and source code pages for a single module group<\/td><td><code>groovydoc.[module group]Pages<\/code><\/td><\/tr>\n<tr><td>Just Groovy module home pages for a single module group<\/td><td><code>groovydoc.[module group]ModuleHomePages<\/code><\/td><\/tr>\n<tr><td>Just Groovy source code pages for a single module group<\/td><td><code>groovydoc.[module group]SourcePages<\/code><\/td><\/tr>\n<tr><td>Just Groovy Class source code pages for a single module group<\/td><td><code>groovydoc.[module group]ClassesPages<\/code><\/td><\/tr>\n<tr><td>Just Groovy Package source code pages for a single module group<\/td><td><code>groovydoc.[module group]PackagesPages<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"collections-1\"><a href=\"#collections-1\" id=\"collections-1\" class=\"anchor\"><\/a>Collections<\/h3>\n<p>SourceDocs generate a variety of collections which allow you to precisely query these pages. All collections will have a\n<code>collectionType<\/code> of the <code>moduleType<\/code> (<code>groovydoc<\/code>).<\/p>\n<p>For multiple modules, you will get a collection for each module with collectionId of its name. For each of these\ncollections, it will also contain related collections containing the source pages of a specific page types, <code>classes<\/code>\nand <code>packages<\/code>. In addition, you will have a single <code>modules<\/code> collection which contains the READMEs of all modules.<\/p>\n<table>\n<thead>\n<tr><th>Description<\/th><th>Collection Type<\/th><th>Collection ID<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>All Groovydoc pages<\/td><td><code>groovydoc<\/code><\/td><td><code>[module name]<\/code><\/td><\/tr>\n<tr><td>All Groovydoc class pages<\/td><td><code>groovydoc<\/code><\/td><td><code>[module name]-classes<\/code><\/td><\/tr>\n<tr><td>All Groovydoc package pages<\/td><td><code>groovydoc<\/code><\/td><td><code>[module name]-packages<\/code><\/td><\/tr>\n<tr><td>The Groovydoc README page<\/td><td><code>groovydoc<\/code><\/td><td><code>groovydoc-modules<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"menu-items-1\"><a href=\"#menu-items-1\" id=\"menu-items-1\" class=\"anchor\"><\/a>Menu Items<\/h3>\n<p>There are 3 types of menu items available<\/p>\n<h4 id=\"modules-1\"><a href=\"#modules-1\" id=\"modules-1\" class=\"anchor\"><\/a>Modules<\/h4>\n<p>Create a menu item linking to the module home pages, optionally filtered by module group. Typically added to the Theme\nmenu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocModules'\n      moduleType: 'groovydoc'\n      moduleGroup: 'group-a' \n<\/code><\/pre>\n<h4 id=\"pages-1\"><a href=\"#pages-1\" id=\"pages-1\" class=\"anchor\"><\/a>Pages<\/h4>\n<p>Create a menu item linking to all the source pages for a single module. You can optionally filter it by page type,\nor include all source pages for that module. Typically added to the Theme menu so it is added to all pages.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'groovydoc'\n      moduleName: 'project-1-name'\n      node: 'classes' # optional\n<\/code><\/pre>\n<p>By default, all menu items will display the title of the linked page, which is typically a human-readable version of the\ndocumented element. You can set <code>itemTitleType: 'ID'<\/code> to have it display the actual page element ID.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'groovydoc'\n      moduleName: 'project-1-name'\n      node: 'classes'\n      itemTitleType: 'ID'\n<\/code><\/pre>\n<p>In addition, you can provide an inline Pebble template to render/transform the menu item title however you need. You\nhave access to the original <code>title<\/code>, the target <code>page<\/code>, and the <code>element<\/code> within that template.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  menu:\n    - type: 'sourcedocPages'\n      moduleType: 'groovydoc'\n      moduleName: 'project-1-name'\n      node: 'classes'\n      itemTitleType: 'ID'\n      transform: '{{ title|replace({&quot;com.eden.orchid&quot;: &quot;c.e.o&quot;}) }}'\n<\/code><\/pre>\n<h4 id=\"page-links-1\"><a href=\"#page-links-1\" id=\"page-links-1\" class=\"anchor\"><\/a>Page Links<\/h4>\n<p>Page Links adds menu item links to a single SourceDoc Page. It links to each &quot;section&quot; on that page (such as <code>methods<\/code>,\n<code>constructors<\/code>, or <code>fields<\/code> on a <code>classes<\/code> page). Setting <code>includeItems: true<\/code> will optionally include all that items\nfor each section. It is typically added to a Page's menu item through one of the above Archetypes.<\/p>\n<p>Just like <code>sourcedocPages<\/code>, you can customize how the menu item text is rendered with <code>itemTitleType<\/code>. It can be <code>NAME<\/code>\nfor the element's human-readable name, <code>ID<\/code> for the actual element ID, or <code>signature<\/code> to display the fully-formatted\nelement signature.<\/p>\n<pre><code class=\"language-yaml\">groovydoc:\n  sourcePages:\n    menu:\n      - type: 'sourcedocPageLinks'\n        itemTitleType: 'signature' # optional, one of [NAME, ID, SIGNATURE]\n        includeItems: true # optional\n<\/code><\/pre>\n<h3 id=\"filtering-docs-1\"><a href=\"#filtering-docs-1\" id=\"filtering-docs-1\" class=\"anchor\"><\/a>Filtering Docs<\/h3>\n<p>TODO: add docs for filtering Groovydocs<\/p>\n"
          }]
        },
        "orchidgithub": {
          "ownKey": "orchidgithub",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidgithub",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidgithub"
            },
            "description": "Connect your Orchid site to GitHub services.",
            "title": "OrchidGithub",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>OrchidGithub connects Orchid to Github's services, including integrating\n<a href=\"https://help.github.com/en/articles/documenting-your-project-with-wikis\">wikis<\/a>,\ncreating <a href=\"https://help.github.com/en/categories/releases\">releases<\/a>, and publishing your site directly to\n<a href=\"https://pages.github.com/\">Github Pages<\/a>.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"6FVxm6xmTl\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"6FVxm6xmTl\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidGithub:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidGithub&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidGithub&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidGithub:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/integrations/OrchidGithub/src/test/kotlin/com/eden/orchid/github/wiki/GithubWikiAdapterTest.kt\">GithubWikiAdapterTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"wiki-adapter\"><a href=\"#wiki-adapter\" id=\"wiki-adapter\" class=\"anchor\"><\/a>Wiki Adapter<\/h3>\n<p>OrchidGithub comes with a <code>github<\/code> Wiki Adapter, to integrate a project wiki as an Orchid wiki section. This will\nclone the wiki repository and convert its contents to an Orchid wiki automatically. If a <code>_Sidebar<\/code> file exists in the\nwiki, pages will be ordered according to the order of links in that sidebar file. Otherwise, pages will be ordered\nalphabetically, with a summary page generated listing all pages in order.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nwiki: \n  sections:\n    userManual:\n      adapter: \n        type: &quot;github&quot;\n        repo: &quot;[username/repo]&quot; # the wiki attached to this project will be used\n<\/code><\/pre>\n<h3 id=\"github-pages-publisher\"><a href=\"#github-pages-publisher\" id=\"github-pages-publisher\" class=\"anchor\"><\/a>Github Pages Publisher<\/h3>\n<p>The <code>githubPages<\/code> publisher will take your rendered site and publish it to a static website on\n<a href=\"https://pages.github.com/\">Github Pages<\/a>. You must have a personal access token set for publication to work, see\n<a href=\"#configuration\">Configuration<\/a> below.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nservices:\n  publications:\n    stages:\n      - type: 'githubPages'\n        username: '[username]' # the username which created the personal access token\n        repo: '[username/repo]' # the repo to publish to\n<\/code><\/pre>\n<p>Custom domains are supported for Github Pages sites by adding a <code>CNAME<\/code> file to the site as it is deployed. Since\n0.19.0, Orchid will do this automatically based on your site's configured base URL if it does not end in <code>.github.io<\/code>.\nYou will still need to configure DNS records with your domain registrar to point your domain to the Github Pages site,\nas described in <a href=\"https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site\">this help article<\/a>.<\/p>\n<p>For versions earlier than 0.19.0, you will need to create the <code>CNAME<\/code> file automatically. As this file needs to be in\nthe <em>deployed<\/em> site's root, and not your repo root, this will require the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidpages\">OrchidPages<\/a> plugin to be able\nto create the necessary file. Create <code>pages/CNAME<\/code> file in your site resources (with no file extension) and add the\nfollowing contents to it (replacing the domain with your own). Be sure that it's copied directly, with no extra newlines\nat the top or end, otherwise Github will not read the file properly.<\/p>\n<pre><code class=\"language-txt\">---\nrenderMode: raw\nusePrettyUrl: false\n---\nwww.example.com\n<\/code><\/pre>\n<h3 id=\"github-releases-publisher\"><a href=\"#github-releases-publisher\" id=\"github-releases-publisher\" class=\"anchor\"><\/a>Github Releases Publisher<\/h3>\n<p>The <code>githubReleases<\/code> publisher will create a <a href=\"https://help.github.com/en/categories/releases\">release<\/a> on Github release\nnotes from the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidchangelog\">OrchidChangelog<\/a> plugin's latest changelog version.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nservices:\n  publications:\n    stages:\n      - type: 'githubReleases'\n        repo: '[username/repo]' # the repo to create a release on\n<\/code><\/pre>\n<h3 id=\"configuration\"><a href=\"#configuration\" id=\"configuration\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>You must generate a\n<a href=\"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\">personal access token<\/a> from\nGithub to successfully authenticate and allow Orchid to perform actions on your behalf, like publishing a site to\nGithub Pages. This can be set as the <code>githubToken<\/code> environment variable, or passed to Orchid from Gradle.<\/p>\n<pre><code class=\"language-groovy\">// build.gradle\norchid {\n    githubToken = project.property(&quot;githubToken&quot;)\n}\n<\/code><\/pre>\n<p>Note that this token grants full access to your account, and should be treated like any normal password. Never check it\nin to your repository.<\/p>\n"
          }]
        },
        "orchidsearch": {
          "ownKey": "orchidsearch",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidsearch",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidsearch"
            },
            "description": "Add static full-text search with Lunr.js to any Orchid site",
            "title": "OrchidSearch",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>Orchid Search allows any Orchid site to have full-text search capabilities, without requiring a backend server or using\nany 3rd-party search services! Using the wonderful <a href=\"https://lunrjs.com/\">Lunr.js<\/a> library, Orchid is able to generate an\nindex of all content on your site as static JSON files, and then search it from your browser.<\/p>\n<p>Alternatively, if your project is registered for <a href=\"https://community.algolia.com/docsearch/\">Algolia DocSearch<\/a>, you can\neasily add the required code snippets with the official Orchid integration.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"ZypnB0tnWx\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"ZypnB0tnWx\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidSearch:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidSearch&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidSearch&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidSearch:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidStarter\">starter app<\/a><\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"static-search-with-lunrjs\"><a href=\"#static-search-with-lunrjs\" id=\"static-search-with-lunrjs\" class=\"anchor\"><\/a>Static Search with Lunr.js<\/h3>\n<p>Using static search with Orchid is a two-step process: instructing Orchid to build indices of your site's content, and\nadding the Javascript widget to enable client-side search functionality. Because static search requires Orchid to\ngenerate search indices and the search is performed directly in the browser, it is best for small sites.<\/p>\n<p>Generating search indices is enabled by default when this plugin is added to your site. The content of the indices is\nthe &quot;intrinsic page content&quot; for every page in your site, which is generated from the <code>indices<\/code> generator. You can\ncontrol which other plugins are included in the generated indices with the <code>includeFrom<\/code> and <code>excludeFrom<\/code> options on\nthe <code>indices<\/code> generator:<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nindices:\n  includeFrom:\n    - 'wiki'\n    - 'pages'\n    - 'posts'\n  excludeFrom:\n    - 'javadoc'\n<\/code><\/pre>\n<p>Next, you need to add the <code>orchidSearch<\/code> meta-component to your pages. This component will automatically attach itself\nto the search field in your theme, which is already set up correctly in all official themes.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\ntheme:\n  metaComponents:\n    - type: 'orchidSearch'\n<\/code><\/pre>\n<h3 id=\"algolia-docsearch\"><a href=\"#algolia-docsearch\" id=\"algolia-docsearch\" class=\"anchor\"><\/a>Algolia DocSearch<\/h3>\n<p>In contrast to Orchid's own static search, which becomes slow and inefficient with large sites, Algolia Docsearch is a\nmuch more optimized client-server solution hosted by Algolia and offered as a free search service to any open-source\nproject. OrchidSearch is the official DocSearch integration for Orchid.<\/p>\n<p>To get started, <a href=\"https://community.algolia.com/docsearch/#join-docsearch-program\">fill out the form<\/a> to get your project\napproved by Algolia for DocSearch. Once it's been accepted, simply add the <code>algoliaDocsearch<\/code> meta-component, and\nsimilar to the <code>orchidSearch<\/code> component, it will automatically attach itself to your theme's search input. You will need\nto add your DocSearch credentials to this component for it to work properly:<\/p>\n<pre><code class=\"language-yaml\"># config.yml\ntheme:\n  metaComponents:\n    - type: 'algoliaDocsearch'\n      apiKey: '&lt;API_KEY&gt;'\n      indexName: '&lt;INDEX_NAME&gt;'\n      appId: '&lt;APP_ID&gt;' # Should be only included if you are running DocSearch on your own.\n<\/code><\/pre>\n<p>When using DocSearch, you probably do not want the search indices being generated anymore, as they slow down your\nbuilds. Simply disable the <code>indices<\/code> generator to prevent them from being created.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nservices:\n  generators:\n    disabled:\n      - 'indices'\n<\/code><\/pre>\n"
          }]
        },
        "orchidforms": {
          "ownKey": "orchidforms",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidforms",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidforms"
            },
            "description": "Engage your users with embeddable, fully customizable forms.",
            "title": "OrchidForms",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>Orchid Forms allows you to create form definitions and embed them anywhere as an Orchid Component. While handling form\nsubmissions is typically something you need your own server for, HTML forms can actually be quite useful on static sites\nwhen combined with services like <a href=\"https://www.netlify.com/docs/form-handling/\">Netlify Form Handling<\/a>,\n<a href=\"https://staticman.net/\">Staticman<\/a> or <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda Functions<\/a>. This plugin allows you to\nseparate the concerns for the display and fields of your forms from the handling of the form data, so you can focus on\nwhat matters most: engaging your audience.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"qSXviTQNS8\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"qSXviTQNS8\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidForms:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidForms&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidForms&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidForms:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<p>TODO<\/p>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"creating-forms\"><a href=\"#creating-forms\" id=\"creating-forms\" class=\"anchor\"><\/a>Creating Forms<\/h3>\n<p>There are multiple ways in which you can set up forms. All pages in the <code>forms/<\/code> directory will create a form with a\n<code>key<\/code> matching the filename of the form definition file. You can then use this <code>key<\/code> to reference that form definition\nin the <code>form<\/code> Component:<\/p>\n<pre><code class=\"language-yaml\">---\ncomponents:\n  - type: form\n    form: contact # uses definition from forms/contact.yml\n---\n<\/code><\/pre>\n<p>The files used for these form definitions can either be a data-type file (such as YML or TOML), or a content-type file\n(such as Markdown or Pebble), with the form definition in the file's Front Matter. In the case that the form is a data-\ntype file, the form is just the definition, and the action is set to whatever is in the form definition.<\/p>\n<p>But content-type form definitions will generate a page intended as the redirection target after submission. If\n<code>redirectionPage<\/code> is set in the form definition, then a hidden field <code>__onSubmit<\/code> will be added with a <code>value<\/code> of the\nredirection page's URL, so form handlers can then redirect to this URL.<\/p>\n<p>Alternatively, you may add a form definition directly in the <code>form<\/code> component, for situations where you only need the\nform to be used once. There is no difference between a form indexed by a page, or created inline with the component,\nexcept that anonymous forms cannot be referenced by other components.<\/p>\n<h3 id=\"form-field-definition\"><a href=\"#form-field-definition\" id=\"form-field-definition\" class=\"anchor\"><\/a>Form Field Definition<\/h3>\n<p>Orchid Forms comes with a basic <code>contact<\/code> form already set up for you, which includes <code>name<\/code>, <code>email<\/code>, <code>subject<\/code>, and\n<code>message<\/code> fields. All you have to do is set the <code>form<\/code> property on the <code>form<\/code> component to <code>contact<\/code>, and you're done.<\/p>\n<p>But in most cases, you will want to customize your forms. The format used to configure forms is inspired by\n<a href=\"https://octobercms.com/docs/backend/forms#form-fields\">October CMS<\/a>, albeit much simpler and less powerful. Take the\ndefault <code>config<\/code> form as an example:<\/p>\n<pre><code class=\"language-yaml\">title: 'Leave us a comment'\nredirectionPage: 'Orchid Forms'\nattributes:\n  data-netlify: true\nfields:\n  name:\n    label: 'Name (optional)'\n    type: text\n    span: 'full'\n    order: 1\n  occupation:\n    label: 'Occupation'\n    type: 'radio'\n    required: true\n    span: 'full'\n    order: 3\n    options:\n      student: Student\n      programmer: Programmer\n      teacher: Teacher\n      pastor: Pastor\n      other: Other\n  comments:\n    label: 'Comments'\n    type: 'textarea'\n    required: true\n    span: 'full'\n    order: 4\n<\/code><\/pre>\n<p>The <code>fields<\/code> property contains a map of field definitions, where each key is the <code>name<\/code> attribute of an <code>input<\/code> in the\nform. Each field must have a <code>type<\/code>, which typically matches one of the HTML5 input <code>types<\/code>, but field types are\nextensible and new types may be added by plugins as needed. You can set the <code>span<\/code> of each field to a number to span\nthat many columns in a 12-column grid, or you may use <code>full<\/code> to span 12 columns, <code>left<\/code> to span 6, floated left, <code>right<\/code>\nto spand 6, floated right, or <code>auto<\/code>, which is the same as <code>left<\/code>.<\/p>\n<p>You can set arbitrary attributes to the <code>form<\/code> element by setting <code>attributes<\/code> to a map of key, value pairs. These\nvalues will be added to the form, and can be used for things like marking the form as a Netlify-enabled form (which is\ndone by default in the standard <code>contact<\/code> form).<\/p>\n<h3 id=\"displaying-forms\"><a href=\"#displaying-forms\" id=\"displaying-forms\" class=\"anchor\"><\/a>Displaying Forms<\/h3>\n<h4 id=\"form-component\"><a href=\"#form-component\" id=\"form-component\" class=\"anchor\"><\/a><code>form<\/code> Component<\/h4>\n<pre><code class=\"language-yaml\">---\ncomponents:\n  - type: form\n    form: contact # uses definition from forms/contact.yml\n---\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">---\ncomponents:\n  - type: form\n    form: # Inline configuration\n      fields:\n        name:\n          label: 'Name (optional)'\n          type: text\n          span: 'full'\n          order: 1\n---\n<\/code><\/pre>\n<h4 id=\"form-tag\"><a href=\"#form-tag\" id=\"form-tag\" class=\"anchor\"><\/a><code>form<\/code> Tag<\/h4>\n<pre><code class=\"language-twig\">{% form 'contact' %}\n<\/code><\/pre>\n"
          }]
        },
        "orchidkss": {
          "ownKey": "orchidkss",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidkss",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidkss"
            },
            "description": "Generate a living styleguide from annotated CSS, Sass, Scss, or LESS",
            "title": "OrchidKSS",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p><a href=\"https://warpspire.com/kss/syntax/\">KSS<\/a> is a methodology for documenting your CSS and generating a styleguide which\nshows example usage of your stylesheets. This plugin implements a basic KSS parser and renders KSS blocks as Orchid\npages as a living styleguide.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"lA5te9CtHv\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"lA5te9CtHv\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidKSS:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidKSS&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidKSS&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidKSS:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidKSS/src/test/kotlin/com/eden/orchid/kss/KssGeneratorTest.kt\">KssGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<p>KSS are block comments placed within your stylesheets, an example is given below:<\/p>\n<pre><code class=\"language-css\">/*\nA button suitable for giving stars to someone.\n\n:hover             - Subtle hover highlight.\n.stars-given       - A highlight indicating you\u2019ve already given a star.\n.stars-given:hover - Subtle hover highlight on top of stars-given styling.\n.disabled          - Dims the button to indicate it cannot be used.\n\nmarkup:\n&lt;li&gt;\n  &lt;a class=&quot;-modifierClass&quot;&gt;Stars&lt;/a&gt;\n&lt;/li&gt;\n\nwrapper:\n&lt;ul&gt;\n  -markup\n&lt;/ul&gt;\n\nStyleguide 2.1.3.\n*/\na.button.star {\n  \n}\na.button.star.star-given {\n  \n}\na.button.star.disabled {\n  \n}\n<\/code><\/pre>\n<p>These blocks are extracted from your stylesheets, and a hierarchy is built from their Styleguide References\n(<code>Styleguide 2.1.3.<\/code> in the block above). Each section of the Styleguide gets its own page, which documents that section\nand also all the sections of its immediate children.<\/p>\n<p>The comment block contains several types of information that are inportant: the <code>name<\/code>, a <code>description<\/code>, <code>modifiers<\/code>,\nand their descriptions, <code>tags<\/code> and their values, <code>markup<\/code> and <code>wrapper<\/code> templates, and a <code>styleguide reference<\/code>.<\/p>\n<h3 id=\"styleguide-name\"><a href=\"#styleguide-name\" id=\"styleguide-name\" class=\"anchor\"><\/a>Styleguide Name<\/h3>\n<p>The first line in a KSS block should be the name of that styleguide section.<\/p>\n<h3 id=\"styleguide-description\"><a href=\"#styleguide-description\" id=\"styleguide-description\" class=\"anchor\"><\/a>Styleguide Description<\/h3>\n<p>Any remaining lines in a KSS block that are not modifiers, tags, or the styleguide section are part of the section\ndescription. They do not need to be consecutive. Each Section becomes a Page, and the description becomes the &quot;intrinsic\ncontent&quot; of the page.<\/p>\n<h3 id=\"modifiers\"><a href=\"#modifiers\" id=\"modifiers\" class=\"anchor\"><\/a>Modifiers<\/h3>\n<p>Modifiers are the specific CSS classes that give different styling to an element. Modifiers are a CSS selector on a line\nby itself, with a short description which is separated from the selector by a <code>-<\/code>.<\/p>\n<h3 id=\"tags\"><a href=\"#tags\" id=\"tags\" class=\"anchor\"><\/a>Tags<\/h3>\n<p>Tags are arbitrary data that can be used to configure the Section. Each Section becomes a Page, and tags become the\n&quot;Front Matter&quot; of the page. Tags are a key on a line by itself ending with a <code>:<\/code>, everything that follows is the value.<\/p>\n<h3 id=\"markup\"><a href=\"#markup\" id=\"markup\" class=\"anchor\"><\/a>Markup<\/h3>\n<p>Markup is just a Tag with a key of <code>markup<\/code>, whose value is HTML markup used to demonstrate usage of the element. This\nmarkup is repeated in the Styleguide Section Page for each Modifier, and a placeholder of <code>-modifierClass<\/code> within the\nmarkup is replaced with the modifier class.<\/p>\n<h3 id=\"markup-wrappers\"><a href=\"#markup-wrappers\" id=\"markup-wrappers\" class=\"anchor\"><\/a>Markup Wrappers<\/h3>\n<p>A Markup Wrapper extends the markup model for each child styleguide section. When creating the markup for a given\nmodifier, that section's <code>markup<\/code> is injected into its <code>wrapper<\/code> at the <code>-markup<\/code> placeholder. In addition, if the\nsection has a parent section, this markup is then injected into the parent section's markup at <em>its<\/em> <code>-markup<\/code>\nplaceholder, and this is done recursively for all parent sections. This helps to define logical hierarchies of markup\nwithin your styleguide.<\/p>\n<h3 id=\"styleguide-reference\"><a href=\"#styleguide-reference\" id=\"styleguide-reference\" class=\"anchor\"><\/a>Styleguide Reference<\/h3>\n<p>Every KSS block describes a new section within your styleguide. These sections are intended to be described in a\nhierarchy, and the Styleguide Reference is what builds that hierarchy. The sections are separated by <code>.<\/code> in the\nreference, and this is then split up and built into the full sections hierarchy. These sections are commonly used just\nas numbers to maintain a strict ordering, but they can be just normal names separated by <code>.<\/code> as well, such as\n<code>Styleguide UI.Buttons.Variants.<\/code> for more logical groupings.<\/p>\n"
          }]
        },
        "orchidsyntaxhighlighter": {
          "ownKey": "orchidsyntaxhighlighter",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidsyntaxhighlighter",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidsyntaxhighlighter"
            },
            "description": "Add syntax highlighting with Pygments or PrismJS.",
            "title": "OrchidSyntaxHighlighter",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>Add syntax highlighting to code snippets in your Orchid site. Supports pre-rendered highlighting with\n<a href=\"https://pygments.org/\">Pygments<\/a>, browser-based highlighting with <a href=\"https://prismjs.com/\">PrismJS<\/a>, and runnable Kotlin\ncode snippets with <a href=\"https://github.com/JetBrains/kotlin-playground\">Kotlin Playground<\/a>.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"7okgYnobbK\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"7okgYnobbK\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidSyntaxHighlighter:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidSyntaxHighlighter&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidSyntaxHighlighter&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidSyntaxHighlighter:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<details>\n<summary>Prism.js Demo<\/summary>\n\n<pre><code class=\"language-java\">public class HelloWorld {\n    public static void main(String[] args) {\n        // Prints &quot;Hello, World&quot; to the terminal window.\n        System.out.println(&quot;Hello, World&quot;);\n    }\n}\n<\/code><\/pre>\n\n<\/details>\n<details>\n<summary>Pygments Demo<\/summary>\n<div class=\"highlight\"><pre><span><\/span><a name=\"line-1\"><\/a><span class=\"lineno\">1&nbsp;<\/span><span class=\"kd\">public<\/span>&nbsp;<span class=\"kd\">class<\/span>&nbsp;<span class=\"nc\">HelloWorld<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-2\"><\/a><span class=\"lineno\">2&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"kd\">public<\/span>&nbsp;<span class=\"kd\">static<\/span>&nbsp;<span class=\"kt\">void<\/span>&nbsp;<span class=\"nf\">main<\/span><span class=\"p\">(<\/span><span class=\"n\">String<\/span><span class=\"o\">[]<\/span>&nbsp;<span class=\"n\">args<\/span><span class=\"p\">)<\/span>&nbsp;<span class=\"p\">{<\/span><br><a name=\"line-3\"><\/a><span class=\"lineno\">3&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"c1\">//&nbsp;Prints&nbsp;&quot;Hello,&nbsp;World&quot;&nbsp;to&nbsp;the&nbsp;terminal&nbsp;window.<\/span><br><a name=\"line-4\"><\/a><span class=\"lineno\">4&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"n\">System<\/span><span class=\"p\">.<\/span><span class=\"na\">out<\/span><span class=\"p\">.<\/span><span class=\"na\">println<\/span><span class=\"p\">(<\/span><span class=\"s\">&quot;Hello,&nbsp;World&quot;<\/span><span class=\"p\">);<\/span><br><a name=\"line-5\"><\/a><span class=\"lineno\">5&nbsp;<\/span>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"p\">}<\/span><br><a name=\"line-6\"><\/a><span class=\"lineno\">6&nbsp;<\/span><span class=\"p\">}<\/span><br><\/pre><\/div><br>\n\n\n<\/details>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"pre-rendered-highlighting\"><a href=\"#pre-rendered-highlighting\" id=\"pre-rendered-highlighting\" class=\"anchor\"><\/a>Pre-rendered Highlighting<\/h3>\n<p>The <code>highlight<\/code> Template Tag, which will highlight your code using Pygments. Pygments supports\n<a href=\"https://pygments.org/languages/\">many languages<\/a> out of the box for you with no additional configuration. Pre-rendered\nhighlighting has the advantage of still working in an environment with JS disabled, such as the PDFs generated by the\nWiki plugin.<\/p>\n<pre><code class=\"language-twig\">{% highlight 'yaml' %}\ntitle: 'Page Title'\ncomponents:\n  - type: pageContent\n{% endhighlight %}\n<\/code><\/pre>\n<p>This plugin includes a default stylesheet for Pygments, which must included in your theme for highlighting to work\nproperly. Simply adding <code>assets/css/pygments.scss<\/code> in your <code>extraCss<\/code> is all that's needed, to use the default styling.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  extraCss: \n    - 'assets/css/pygments.scss' # this file is already available in the plugin's resources\n<\/code><\/pre>\n<p>Alternatively, you are free to use your own Pygments theme by creating and adding the necessary stylesheet.<\/p>\n<pre><code class=\"language-yaml\">theme:\n  extraCss: \n    - 'assets/css/custom-pygments-theme.scss' # you'll need to create this file yourself\n<\/code><\/pre>\n<h3 id=\"in-browser-highlighting\"><a href=\"#in-browser-highlighting\" id=\"in-browser-highlighting\" class=\"anchor\"><\/a>In-Browser Highlighting<\/h3>\n<p>Alternatively, you may opt for a browser-based solution using PrismJS. This may offer greater flexibility and works with\nthe normal Markdown syntax, but requires Javascript to function. You will also need to manually add language definitions\nfor each language you intend to highlight, which may not be feasible for sites which need many languages highlighted.\nThis component is best added in an Archetype, such as <code>allPages<\/code>.<\/p>\n<pre><code class=\"language-yaml\">allPages:\n  metaComponents:\n    - type: 'prism'\n      languages: \n        - 'java'\n        - 'kotlin'\n        - 'yaml'\n<\/code><\/pre>\n<h3 id=\"kotlin-playground\"><a href=\"#kotlin-playground\" id=\"kotlin-playground\" class=\"anchor\"><\/a>Kotlin Playground<\/h3>\n<p>The Kotlin Playground allows you to convert Kotlin code snippets into playgrounds that are runnable right in your\nbrowser. The <code>kotlinPlayground<\/code> component adds the script from their CDN, which will select all elements on the page\nwith your runnable Kotlin code and convert them into embedded runnable playgrounds. By default, all Markdown code\nsnippets with a language of <code>run-kotlin<\/code> are converted.<\/p>\n<pre><code class=\"language-yaml\">allPages:\n  metaComponents:\n    - type: 'kotlinPlayground'\n      selector: &quot;pre code[class='language-run-kotlin']&quot;\n<\/code><\/pre>\n<p>You can configure each individual playground using the attributes described in the <a href=\"https://github.com/JetBrains/kotlin-playground#customizing-editors\">Kotlin playground docs<\/a>.\nThese can be added from Markdown snippets with the following syntax:<\/p>\n<pre><code>```run-kotlin\nfun main() {\n   println(&quot;Running from Kotlin Playground!&quot;)\n}\n```\n{theme='darcula' lines='true'}\n<\/code><\/pre>\n"
          }]
        },
        "orchidtest": {
          "ownKey": "orchidtest",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidtest",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidtest"
            },
            "description": "A framework for testing Orchid plugins.",
            "title": "OrchidTest",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The OrchidTest plugin helps you develop your own components for Orchid by providing a framework for integration-testing\nOrchid modules and a set of assertions to check what was rendered. This framework is intended to be used with\n<a href=\"https://junit.org/junit5/docs/current/user-guide/\">JUnit5<\/a>, with assertions built on the <a href=\"https://strikt.io/\">Strikt<\/a>\nassertion library and <a href=\"https://github.com/Kotlin/kotlinx.html\">kotlinx.html<\/a>.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"0lCpbL84Bl\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"0lCpbL84Bl\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidTest:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidTest&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidTest&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidTest:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<p>All of Orchid's official plugins are tested with this framework. See any of the tests in the main Orchid repo for demos.<\/p>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"basic-usage\"><a href=\"#basic-usage\" id=\"basic-usage\" class=\"anchor\"><\/a>Basic Usage<\/h3>\n<p>An OrchidTest integration test is a standard JUnit5 class that extends <code>OrchidIntegrationTest<\/code>. The <code>OrchidModule<\/code>s\nunder test should be passed to the superclass constructor. Tests are regular <code>@Test<\/code>-annotated functions, in which you\nwill set up with mock resources and run Orchid, and then make assertions on the pages that were rendered and the\ncontents of those pages.<\/p>\n<pre><code class=\"language-kotlin\">class CustomPluginTest : OrchidIntegrationTest(\n    withGenerator&lt;HomepageGenerator&gt;(),\n    CustomPluginModule()\n) {\n\n    @Test\n    fun test01() {\n        ...\n    }\n}\n<\/code><\/pre>\n<p>Each test function typically consists of 3 sections:<\/p>\n<ol>\n<li>Arrange test resources and configurations<\/li>\n<li>Execute test to perform an Orchid build<\/li>\n<li>Assert which pages were rendered, and the contents of those pages<\/li>\n<\/ol>\n<h3 id=\"arrange-test-resources-and-configurations\"><a href=\"#arrange-test-resources-and-configurations\" id=\"arrange-test-resources-and-configurations\" class=\"anchor\"><\/a>Arrange test resources and configurations<\/h3>\n<p>Use the <code>resource()<\/code> function to add resources to your test, which work exactly the same as if you were adding a\nfile to your site's local resources. The first argument is the full file path and name, and the second is the raw\ncontents of that page, typically as a Kotlin\n<a href=\"https://kotlinlang.org/docs/reference/basic-types.html#string-literals\">multiline string<\/a>.<\/p>\n<p>You can also add options to the <code>config.yml<\/code> with the <code>config { }<\/code> DSL. It accepts a DSL json object builder, and values\nare added to the map with <code>&quot;key&quot; to [value]<\/code> syntax. Json array builders use a syntax of <code>this add [value]<\/code>. Valid\nvalues for both object or array builders are <code>String<\/code>, <code>Int<\/code>, <code>Double<\/code>, or <code>Boolean<\/code>, but you can also nest <code>obj { }<\/code> or\n<code>arr { }<\/code> blocks to create nested json structures.<\/p>\n<p>Finally, you can pass command-line flags to the test build <code>flag()<\/code>.<\/p>\n<pre><code class=\"language-kotlin\">@Test\nfun test01() {\n    resource(\n        &quot;homepage.md&quot;, \n        &quot;&quot;&quot;\n        |## Homepage Title\n        |\n        |- List item 1\n        |- List item 2\n        |- List item 3\n        &quot;&quot;&quot;.trimMargin()\n    )\n    config {\n        &quot;wiki&quot; to obj {\n            &quot;sections&quot; to arr {\n                this add &quot;section1&quot;\n                this add &quot;section2&quot;\n            }   \n        }\n    }\n    flag(&quot;legacySourceDoc&quot;, &quot;true&quot;)\n    \n    ...\n}\n<\/code><\/pre>\n<h3 id=\"execute-test\"><a href=\"#execute-test\" id=\"execute-test\" class=\"anchor\"><\/a>Execute test<\/h3>\n<p>Calling <code>execute()<\/code> within a test function will run a complete Orchid build with the configured resources and options.\nIt will run the build to completion and return an object with the results of the build, or else will throw an exception\nif the build failed, failing the test as well. This method call is typically placed directly with <code>expectThat()<\/code> for\nconvenience in writing assertions.<\/p>\n<pre><code class=\"language-kotlin\">@Test\nfun test01() {\n    ...\n    \n    expectThat(execute())\n    \n    ...\n}\n<\/code><\/pre>\n<h3 id=\"assert-build-results\"><a href=\"#assert-build-results\" id=\"assert-build-results\" class=\"anchor\"><\/a>Assert Build Results<\/h3>\n<p>You will typically want to make assertions on which pages were rendered in the site. The following functions are\navailable on the test results builder:<\/p>\n<ul>\n<li><code>printResults()<\/code> - Make no assertions, but print all rendered pages to the terminal for quick debugging.<\/li>\n<li><code>somethingRendered()<\/code> - Assert that at least one file was rendered<\/li>\n<li><code>nothingRendered()<\/code> - Assert that no files were rendered<\/li>\n<li><code>pagesGenerated(size: Int)<\/code> - Assert that a specific number of pages were rendered<\/li>\n<li><code>pageWasRendered()<\/code> - Assert that a file at the provided path was rendered<\/li>\n<li><code>pageWasNotRendered()<\/code> - Assert that a file at the provided path was <em>not<\/em> rendered<\/li>\n<li><code>nothingElseRendered()<\/code> - Each call to <code>pageWasRendered()<\/code> marks a page as rendered. Calling <code>nothingElseRendered()<\/code>\nafter all appropriate calls to <code>pageWasRendered()<\/code> will assert that all rendered pages have been evaluated, to make\nsure additional pages were not rendered unintentionally.<\/li>\n<\/ul>\n<p>In addition to checking which <em>pages<\/em> were rendered, you may wish to make assertions on the collections that were\ncreated. The following functions are available:<\/p>\n<ul>\n<li><code>collectionWasCreated()<\/code> - Assert that a collection with the given <code>collectionType<\/code> and <code>collectionId<\/code> was created<\/li>\n<li><code>noOtherCollectionsCreated()<\/code> - Similar to <code>nothingElseRendered()<\/code>, except that it checks whether all collections have\nbeen evaluated.<\/li>\n<\/ul>\n<p>For each call to <code>pageWasRendered()<\/code>, you must provide an assertion lambda on the located page object. Most commonly,\nyou will call <code>htmlBodyMatches()<\/code> in that callback and provide a <code>Kotlinx.html<\/code> DOM builder to match the HTML body\ncontents. You may also call <code>htmlHeadMatches()<\/code> to match a DOM builder against the page <code>HEAD<\/code> contents.<\/p>\n<p>These DOM builders are flexible in the order that attributes are listed on each tag, and recursively checks all nested\nHTML structures for equivalence. You can also pass a selector to these methods to match the DOM builder against a\nspecific selector on the page.<\/p>\n<pre><code class=\"language-kotlin\">@Test\nfun test1() {\n    ...\n    \n    expectThat(execute())\n        .printResults()\n        .pageWasRendered(&quot;/index.html&quot;) {\n            htmlBodyMatches(&quot;article[role=main]&quot;) {\n                h2 {\n                    +&quot;Homepage Title&quot;\n                }\n                ul {\n                    li { +&quot;List item 1&quot; }\n                    li { +&quot;List item 2&quot; }\n                    li { +&quot;List item 3&quot; }\n                }\n            }\n        }\n        .nothingElseRendered()\n}\n<\/code><\/pre>\n"
          }]
        },
        "orchiddiagrams": {
          "ownKey": "orchiddiagrams",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchiddiagrams",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchiddiagrams"
            },
            "description": "Create flowcharts and sequence diagrams using the PlantUML markup language.",
            "title": "OrchidDiagrams",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>This plugin adds support for UML diagrams to be created from text, using <a href=\"https://plantuml.com\">PlantUML<\/a> syntax. Text\ndiagrams will be converted to SVG and embedded directly in your page content. Having diagrams described in text makes\nthem easy to create and maintain, and enables them to be tracked with Git, ideal for managing diagrams for\nproject documentation.<\/p>\n<p>Note that some diagram types require GraphViz to be installed on your local machine to work properly.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"8ggdsVFOyR\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"8ggdsVFOyR\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidDiagrams:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidDiagrams&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidDiagrams&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidDiagrams:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<details>\n<summary>Examples<\/summary>\n\n\n<p>The following examples are taken directly from the official <a href=\"https://plantuml.com/\">PlantUML docs<\/a><\/p>\n<h3 id=\"sequence-diagram\"><a href=\"#sequence-diagram\" id=\"sequence-diagram\" class=\"anchor\"><\/a>Sequence Diagram<\/h3>\n<p><a href=\"https://plantuml.com/sequence-diagram\">source<\/a><\/p>\n<pre><code class=\"language-text\">Alice -&gt; Bob: Authentication Request\nBob --&gt; Alice: Authentication Response\n\nAlice -&gt; Bob: Another authentication Request\nAlice &lt;-- Bob: another authentication Response\n<\/code><\/pre>\n<p><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" contentScriptType=\"application/ecmascript\" contentStyleType=\"text/css\" height=\"220px\" preserveAspectRatio=\"none\" style=\"width:299px;height:220px;\" version=\"1.1\" viewBox=\"0 0 299 220\" width=\"299px\" zoomAndPan=\"magnify\"><defs><filter height=\"300%\" id=\"fbrzg00n1hs25\" width=\"300%\" x=\"-1\" y=\"-1\"><feGaussianBlur result=\"blurOut\" stdDeviation=\"2.0\"/><feColorMatrix in=\"blurOut\" result=\"blurOut2\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0\"/><feOffset dx=\"4.0\" dy=\"4.0\" in=\"blurOut2\" result=\"blurOut3\"/><feBlend in=\"SourceGraphic\" in2=\"blurOut3\" mode=\"normal\"/><\/filter><\/defs><g><line style=\"stroke:#A80036;stroke-width:1.0;stroke-dasharray:5.0,5.0;\" x1=\"30\" x2=\"30\" y1=\"40.2969\" y2=\"176.8281\"/><line style=\"stroke:#A80036;stroke-width:1.0;stroke-dasharray:5.0,5.0;\" x1=\"266\" x2=\"266\" y1=\"40.2969\" y2=\"176.8281\"/><rect fill=\"#FEFECE\" filter=\"url(#fbrzg00n1hs25)\" height=\"30.2969\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"46\" x=\"5\" y=\"5\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"14\" lengthAdjust=\"spacing\" textLength=\"32\" x=\"12\" y=\"24.9951\">Alice<\/text><rect fill=\"#FEFECE\" filter=\"url(#fbrzg00n1hs25)\" height=\"30.2969\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"46\" x=\"5\" y=\"175.8281\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"14\" lengthAdjust=\"spacing\" textLength=\"32\" x=\"12\" y=\"195.8232\">Alice<\/text><rect fill=\"#FEFECE\" filter=\"url(#fbrzg00n1hs25)\" height=\"30.2969\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"42\" x=\"243\" y=\"5\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"14\" lengthAdjust=\"spacing\" textLength=\"28\" x=\"250\" y=\"24.9951\">Bob<\/text><rect fill=\"#FEFECE\" filter=\"url(#fbrzg00n1hs25)\" height=\"30.2969\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"42\" x=\"243\" y=\"175.8281\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"14\" lengthAdjust=\"spacing\" textLength=\"28\" x=\"250\" y=\"195.8232\">Bob<\/text><polygon fill=\"#A80036\" points=\"254,67.4297,264,71.4297,254,75.4297,258,71.4297\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.0;\" x1=\"30\" x2=\"260\" y1=\"71.4297\" y2=\"71.4297\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacing\" textLength=\"149\" x=\"37\" y=\"66.3638\">Authentication Request<\/text><polygon fill=\"#A80036\" points=\"41,96.5625,31,100.5625,41,104.5625,37,100.5625\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.0;stroke-dasharray:2.0,2.0;\" x1=\"35\" x2=\"265\" y1=\"100.5625\" y2=\"100.5625\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacing\" textLength=\"159\" x=\"47\" y=\"95.4966\">Authentication Response<\/text><polygon fill=\"#A80036\" points=\"254,125.6953,264,129.6953,254,133.6953,258,129.6953\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.0;\" x1=\"30\" x2=\"260\" y1=\"129.6953\" y2=\"129.6953\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacing\" textLength=\"203\" x=\"37\" y=\"124.6294\">Another authentication Request<\/text><polygon fill=\"#A80036\" points=\"41,154.8281,31,158.8281,41,162.8281,37,158.8281\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.0;stroke-dasharray:2.0,2.0;\" x1=\"35\" x2=\"265\" y1=\"158.8281\" y2=\"158.8281\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"13\" lengthAdjust=\"spacing\" textLength=\"212\" x=\"47\" y=\"153.7622\">another authentication Response<\/text><\/g><\/svg><\/p>\n<h3 id=\"class-description\"><a href=\"#class-description\" id=\"class-description\" class=\"anchor\"><\/a>Class Description<\/h3>\n<p><a href=\"https://plantuml.com/class-diagram\">source<\/a><\/p>\n<pre><code class=\"language-text\">class Dummy {\n -field1\n #field2\n ~method1()\n +method2()\n}\n<\/code><\/pre>\n<p><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" contentScriptType=\"application/ecmascript\" contentStyleType=\"text/css\" height=\"120px\" preserveAspectRatio=\"none\" style=\"width:105px;height:120px;\" version=\"1.1\" viewBox=\"0 0 105 120\" width=\"105px\" zoomAndPan=\"magnify\"><defs><filter height=\"300%\" id=\"fo6tdyut7ok4p\" width=\"300%\" x=\"-1\" y=\"-1\"><feGaussianBlur result=\"blurOut\" stdDeviation=\"2.0\"/><feColorMatrix in=\"blurOut\" result=\"blurOut2\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0\"/><feOffset dx=\"4.0\" dy=\"4.0\" in=\"blurOut2\" result=\"blurOut3\"/><feBlend in=\"SourceGraphic\" in2=\"blurOut3\" mode=\"normal\"/><\/filter><\/defs><g><!--MD5=[c54ba4f61d01a424743e5a1fa0f9e38e]\nclass Dummy--><rect codeLine=\"1\" fill=\"#FEFECE\" filter=\"url(#fo6tdyut7ok4p)\" height=\"99.2188\" id=\"Dummy\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"84\" x=\"7\" y=\"7\"/><ellipse cx=\"25.15\" cy=\"23\" fill=\"#ADD1B2\" rx=\"11\" ry=\"11\" style=\"stroke:#A80036;stroke-width:1.0;\"/><path d=\"M28.1188,28.6406 Q27.5406,28.9375 26.9,29.0781 Q26.2594,29.2344 25.5563,29.2344 Q23.0563,29.2344 21.7281,27.5938 Q20.4156,25.9375 20.4156,22.8125 Q20.4156,19.6875 21.7281,18.0313 Q23.0563,16.375 25.5563,16.375 Q26.2594,16.375 26.9,16.5313 Q27.5563,16.6875 28.1188,16.9844 L28.1188,19.7031 Q27.4938,19.125 26.9,18.8594 Q26.3063,18.5781 25.6813,18.5781 Q24.3375,18.5781 23.65,19.6563 Q22.9625,20.7188 22.9625,22.8125 Q22.9625,24.9063 23.65,25.9844 Q24.3375,27.0469 25.6813,27.0469 Q26.3063,27.0469 26.9,26.7813 Q27.4938,26.5 28.1188,25.9219 L28.1188,28.6406 Z \" fill=\"#000000\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"45\" x=\"39.85\" y=\"27.1543\">Dummy<\/text><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"8\" x2=\"90\" y1=\"39\" y2=\"39\"/><rect fill=\"none\" height=\"6\" style=\"stroke:#C82930;stroke-width:1.0;\" width=\"6\" x=\"15\" y=\"47\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"31\" x=\"27\" y=\"53.2104\">field1<\/text><polygon fill=\"none\" points=\"18,57.8047,22,61.8047,18,65.8047,14,61.8047\" style=\"stroke:#B38D22;stroke-width:1.0;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"31\" x=\"27\" y=\"66.0151\">field2<\/text><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"8\" x2=\"90\" y1=\"72.6094\" y2=\"72.6094\"/><polygon fill=\"#4177AF\" points=\"18,79.6094,14,85.6094,22,85.6094\" style=\"stroke:#1963A0;stroke-width:1.0;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"58\" x=\"27\" y=\"86.8198\">method1()<\/text><ellipse cx=\"18\" cy=\"96.4141\" fill=\"#84BE84\" rx=\"3\" ry=\"3\" style=\"stroke:#038048;stroke-width:1.0;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"58\" x=\"27\" y=\"99.6245\">method2()<\/text><\/g><\/svg><\/p>\n<h3 id=\"activity-diagram\"><a href=\"#activity-diagram\" id=\"activity-diagram\" class=\"anchor\"><\/a>Activity Diagram<\/h3>\n<p><a href=\"https://plantuml.com/activity-diagram-beta\">source<\/a><\/p>\n<pre><code class=\"language-text\">start\nif (condition A) then (yes)\n  :Text 1;\nelseif (condition B) then (yes)\n  :Text 2;\n  stop\nelseif (condition C) then (yes)\n  :Text 3;\nelseif (condition D) then (yes)\n  :Text 4;\nelse (nothing)\n  :Text else;\nendif\nstop\n<\/code><\/pre>\n<p><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" contentScriptType=\"application/ecmascript\" contentStyleType=\"text/css\" height=\"275px\" preserveAspectRatio=\"none\" style=\"width:540px;height:275px;\" version=\"1.1\" viewBox=\"0 0 540 275\" width=\"540px\" zoomAndPan=\"magnify\"><defs><filter height=\"300%\" id=\"f6nb99kiye4r7\" width=\"300%\" x=\"-1\" y=\"-1\"><feGaussianBlur result=\"blurOut\" stdDeviation=\"2.0\"/><feColorMatrix in=\"blurOut\" result=\"blurOut2\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0\"/><feOffset dx=\"4.0\" dy=\"4.0\" in=\"blurOut2\" result=\"blurOut3\"/><feBlend in=\"SourceGraphic\" in2=\"blurOut3\" mode=\"normal\"/><\/filter><\/defs><g><ellipse cx=\"271.5\" cy=\"20\" fill=\"#000000\" filter=\"url(#f6nb99kiye4r7)\" rx=\"10\" ry=\"10\" style=\"stroke:none;stroke-width:1.0;\"/><polygon fill=\"#FEFECE\" filter=\"url(#f6nb99kiye4r7)\" points=\"32,50,94,50,106,62,94,74,32,74,20,62,32,50\" style=\"stroke:#A80036;stroke-width:1.5;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"20\" x=\"67\" y=\"84.2104\">yes<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"62\" x=\"32\" y=\"65.8081\">condition A<\/text><rect fill=\"#FEFECE\" filter=\"url(#f6nb99kiye4r7)\" height=\"33.9688\" rx=\"12.5\" ry=\"12.5\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"58\" x=\"34\" y=\"105.7104\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"38\" x=\"44\" y=\"126.8491\">Text 1<\/text><polygon fill=\"#FEFECE\" filter=\"url(#f6nb99kiye4r7)\" points=\"138,50,201,50,213,62,201,74,138,74,126,62,138,50\" style=\"stroke:#A80036;stroke-width:1.5;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"20\" x=\"173.5\" y=\"84.2104\">yes<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"63\" x=\"138\" y=\"65.8081\">condition B<\/text><rect fill=\"#FEFECE\" filter=\"url(#f6nb99kiye4r7)\" height=\"33.9688\" rx=\"12.5\" ry=\"12.5\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"58\" x=\"140.5\" y=\"105.7104\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"38\" x=\"150.5\" y=\"126.8491\">Text 2<\/text><ellipse cx=\"169.5\" cy=\"185.6792\" fill=\"#FFFFFF\" filter=\"url(#f6nb99kiye4r7)\" rx=\"11\" ry=\"11\" style=\"stroke:#000000;stroke-width:1.0;\"/><ellipse cx=\"169.5\" cy=\"185.6792\" fill=\"#000000\" rx=\"6\" ry=\"6\" style=\"stroke:#7F7F7F;stroke-width:1.0;\"/><polygon fill=\"#FEFECE\" filter=\"url(#f6nb99kiye4r7)\" points=\"245,50,308,50,320,62,308,74,245,74,233,62,245,50\" style=\"stroke:#A80036;stroke-width:1.5;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"20\" x=\"280.5\" y=\"84.2104\">yes<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"63\" x=\"245\" y=\"65.8081\">condition C<\/text><rect fill=\"#FEFECE\" filter=\"url(#f6nb99kiye4r7)\" height=\"33.9688\" rx=\"12.5\" ry=\"12.5\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"58\" x=\"247.5\" y=\"105.7104\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"38\" x=\"257.5\" y=\"126.8491\">Text 3<\/text><polygon fill=\"#FEFECE\" filter=\"url(#f6nb99kiye4r7)\" points=\"352,50,415,50,427,62,415,74,352,74,340,62,352,50\" style=\"stroke:#A80036;stroke-width:1.5;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"20\" x=\"387.5\" y=\"84.2104\">yes<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"63\" x=\"352\" y=\"65.8081\">condition D<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"11\" lengthAdjust=\"spacing\" textLength=\"42\" x=\"427\" y=\"59.4058\">nothing<\/text><rect fill=\"#FEFECE\" filter=\"url(#f6nb99kiye4r7)\" height=\"33.9688\" rx=\"12.5\" ry=\"12.5\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"58\" x=\"354.5\" y=\"105.7104\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"38\" x=\"364.5\" y=\"126.8491\">Text 4<\/text><rect fill=\"#FEFECE\" filter=\"url(#f6nb99kiye4r7)\" height=\"33.9688\" rx=\"12.5\" ry=\"12.5\" style=\"stroke:#A80036;stroke-width:1.5;\" width=\"76\" x=\"447\" y=\"130.8081\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"56\" x=\"457\" y=\"151.9468\">Text else<\/text><ellipse cx=\"271.5\" cy=\"247.6792\" fill=\"#FFFFFF\" filter=\"url(#f6nb99kiye4r7)\" rx=\"11\" ry=\"11\" style=\"stroke:#000000;stroke-width:1.0;\"/><ellipse cx=\"271.5\" cy=\"247.6792\" fill=\"#000000\" rx=\"6\" ry=\"6\" style=\"stroke:#7F7F7F;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"169.5\" x2=\"169.5\" y1=\"139.6792\" y2=\"174.6792\"/><polygon fill=\"#A80036\" points=\"165.5,164.6792,169.5,174.6792,173.5,164.6792,169.5,168.6792\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"63\" x2=\"63\" y1=\"74\" y2=\"105.7104\"/><polygon fill=\"#A80036\" points=\"59,95.7104,63,105.7104,67,95.7104,63,99.7104\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"63\" x2=\"63\" y1=\"139.6792\" y2=\"216.6792\"/><polygon fill=\"#A80036\" points=\"59,206.6792,63,216.6792,67,206.6792,63,210.6792\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"169.5\" x2=\"169.5\" y1=\"74\" y2=\"105.7104\"/><polygon fill=\"#A80036\" points=\"165.5,95.7104,169.5,105.7104,173.5,95.7104,169.5,99.7104\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"276.5\" x2=\"276.5\" y1=\"74\" y2=\"105.7104\"/><polygon fill=\"#A80036\" points=\"272.5,95.7104,276.5,105.7104,280.5,95.7104,276.5,99.7104\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"276.5\" x2=\"276.5\" y1=\"139.6792\" y2=\"216.6792\"/><polygon fill=\"#A80036\" points=\"272.5,206.6792,276.5,216.6792,280.5,206.6792,276.5,210.6792\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"383.5\" x2=\"383.5\" y1=\"74\" y2=\"105.7104\"/><polygon fill=\"#A80036\" points=\"379.5,95.7104,383.5,105.7104,387.5,95.7104,383.5,99.7104\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"383.5\" x2=\"383.5\" y1=\"139.6792\" y2=\"216.6792\"/><polygon fill=\"#A80036\" points=\"379.5,206.6792,383.5,216.6792,387.5,206.6792,383.5,210.6792\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"106\" x2=\"126\" y1=\"62\" y2=\"62\"/><polygon fill=\"#A80036\" points=\"116,58,126,62,116,66,120,62\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"213\" x2=\"233\" y1=\"62\" y2=\"62\"/><polygon fill=\"#A80036\" points=\"223,58,233,62,223,66,227,62\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"320\" x2=\"340\" y1=\"62\" y2=\"62\"/><polygon fill=\"#A80036\" points=\"330,58,340,62,330,66,334,62\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"271.5\" x2=\"271.5\" y1=\"30\" y2=\"35\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"271.5\" x2=\"63\" y1=\"35\" y2=\"35\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"63\" x2=\"63\" y1=\"35\" y2=\"50\"/><polygon fill=\"#A80036\" points=\"59,40,63,50,67,40,63,44\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"427\" x2=\"485\" y1=\"62\" y2=\"62\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"485\" x2=\"485\" y1=\"62\" y2=\"130.8081\"/><polygon fill=\"#A80036\" points=\"481,120.8081,485,130.8081,489,120.8081,485,124.8081\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"485\" x2=\"485\" y1=\"164.7769\" y2=\"216.6792\"/><polygon fill=\"#A80036\" points=\"481,206.6792,485,216.6792,489,206.6792,485,210.6792\" style=\"stroke:#A80036;stroke-width:1.0;\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"63\" x2=\"485\" y1=\"216.6792\" y2=\"216.6792\"/><line style=\"stroke:#A80036;stroke-width:1.5;\" x1=\"271.5\" x2=\"271.5\" y1=\"216.6792\" y2=\"236.6792\"/><polygon fill=\"#A80036\" points=\"267.5,226.6792,271.5,236.6792,275.5,226.6792,271.5,230.6792\" style=\"stroke:#A80036;stroke-width:1.0;\"/><\/g><\/svg><\/p>\n<h3 id=\"state-diagram\"><a href=\"#state-diagram\" id=\"state-diagram\" class=\"anchor\"><\/a>State Diagram<\/h3>\n<p><a href=\"https://plantuml.com/state-diagram\">source<\/a><\/p>\n<pre><code class=\"language-text\">scale 350 width\n[*] --&gt; NotShooting\n\nstate NotShooting {\n  [*] --&gt; Idle\n  Idle --&gt; Configuring : EvConfig\n  Configuring --&gt; Idle : EvConfig\n}\n\nstate Configuring {\n  [*] --&gt; NewValueSelection\n  NewValueSelection --&gt; NewValuePreview : EvNewValue\n  NewValuePreview --&gt; NewValueSelection : EvNewValueRejected\n  NewValuePreview --&gt; NewValueSelection : EvNewValueSaved\n  \n  state NewValuePreview {\n    State1 -&gt; State2\n  }  \n}\n<\/code><\/pre>\n<p><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" contentScriptType=\"application/ecmascript\" contentStyleType=\"text/css\" height=\"239.5349px\" preserveAspectRatio=\"none\" style=\"width:352px;height:239px;background:#000000;\" version=\"1.1\" viewBox=\"0 0 352 239\" width=\"352.3256px\" zoomAndPan=\"magnify\"><defs/><g><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"303.4884\" x=\"5.814\" y=\"22.093\">Dot Executable: /opt/local/bin/dot<\/text><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"168.6047\" x=\"5.814\" y=\"41.0429\">File does not exist<\/text><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"338.3721\" x=\"5.814\" y=\"59.9927\">Cannot find Graphviz. You should try<\/text><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"0\" x=\"11.6279\" y=\"78.9426\"/><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"91.8605\" x=\"5.814\" y=\"97.8924\">@startuml<\/text><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"66.2791\" x=\"5.814\" y=\"116.8423\">testdot<\/text><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"83.7209\" x=\"5.814\" y=\"135.7922\">@enduml<\/text><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"0\" x=\"11.6279\" y=\"154.742\"/><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"19.7674\" x=\"11.6279\" y=\"173.6919\">or<\/text><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"0\" x=\"11.6279\" y=\"192.6417\"/><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"263.9535\" x=\"5.814\" y=\"211.5916\">java -jar plantuml.jar -testdot<\/text><text fill=\"#33FF02\" font-family=\"sans-serif\" font-size=\"16.2791\" font-weight=\"bold\" lengthAdjust=\"spacing\" textLength=\"0\" x=\"11.6279\" y=\"230.5414\"/><\/g><\/svg><\/p>\n<h3 id=\"timing-diagram\"><a href=\"#timing-diagram\" id=\"timing-diagram\" class=\"anchor\"><\/a>Timing Diagram<\/h3>\n<p><a href=\"https://plantuml.com/timing-diagram\">source<\/a><\/p>\n<pre><code class=\"language-text\">robust &quot;Web Browser&quot; as WB\nconcise &quot;Web User&quot; as WU\n\nWB is Initializing\nWU is Absent\n\n@WB\n0 is idle\n+200 is Processing\n+100 is Waiting\nWB@0 &lt;-&gt; @50 : {50 ms lag}\n\n@WU\n0 is Waiting\n+500 is ok\n@200 &lt;-&gt; @+150 : {150 ms}\n<\/code><\/pre>\n<p><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" contentScriptType=\"application/ecmascript\" contentStyleType=\"text/css\" height=\"229px\" preserveAspectRatio=\"none\" style=\"width:446px;height:229px;\" version=\"1.1\" viewBox=\"0 0 446 229\" width=\"446px\" zoomAndPan=\"magnify\"><defs/><g><line style=\"stroke:#000000;stroke-width:1.7;\" x1=\"10\" x2=\"10\" y1=\"10\" y2=\"198.5313\"/><line style=\"stroke:#000000;stroke-width:1.7;\" x1=\"429\" x2=\"429\" y1=\"10\" y2=\"198.5313\"/><line style=\"stroke:#AAAAAA;stroke-width:0.5;stroke-dasharray:3.0,5.0;\" x1=\"124\" x2=\"124\" y1=\"10\" y2=\"198.5313\"/><line style=\"stroke:#AAAAAA;stroke-width:0.5;stroke-dasharray:3.0,5.0;\" x1=\"174\" x2=\"174\" y1=\"10\" y2=\"198.5313\"/><line style=\"stroke:#AAAAAA;stroke-width:0.5;stroke-dasharray:3.0,5.0;\" x1=\"224\" x2=\"224\" y1=\"10\" y2=\"198.5313\"/><line style=\"stroke:#AAAAAA;stroke-width:0.5;stroke-dasharray:3.0,5.0;\" x1=\"274\" x2=\"274\" y1=\"10\" y2=\"198.5313\"/><line style=\"stroke:#AAAAAA;stroke-width:0.5;stroke-dasharray:3.0,5.0;\" x1=\"324\" x2=\"324\" y1=\"10\" y2=\"198.5313\"/><line style=\"stroke:#AAAAAA;stroke-width:0.5;stroke-dasharray:3.0,5.0;\" x1=\"374\" x2=\"374\" y1=\"10\" y2=\"198.5313\"/><line style=\"stroke:#AAAAAA;stroke-width:0.5;stroke-dasharray:3.0,5.0;\" x1=\"424\" x2=\"424\" y1=\"10\" y2=\"198.5313\"/><line style=\"stroke:#000000;stroke-width:1.7;\" x1=\"10\" x2=\"429\" y1=\"10\" y2=\"10\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"81\" x=\"15\" y=\"21.1387\">Web Browser<\/text><line style=\"stroke:#000000;stroke-width:1.0;\" x1=\"10\" x2=\"97\" y1=\"24.9688\" y2=\"24.9688\"/><line style=\"stroke:#000000;stroke-width:1.0;\" x1=\"97\" x2=\"107\" y1=\"24.9688\" y2=\"10\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"60\" x=\"15\" y=\"116.4199\">Initializing<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"22\" x=\"15\" y=\"96.4199\">idle<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"69\" x=\"15\" y=\"76.4199\">Processing<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"46\" x=\"15\" y=\"56.4199\">Waiting<\/text><line style=\"stroke:#038048;stroke-width:1.5;\" x1=\"84\" x2=\"124\" y1=\"111.2656\" y2=\"111.2656\"/><line style=\"stroke:#038048;stroke-width:1.5;\" x1=\"124\" x2=\"224\" y1=\"91.2656\" y2=\"91.2656\"/><line style=\"stroke:#038048;stroke-width:1.5;\" x1=\"224\" x2=\"274\" y1=\"71.2656\" y2=\"71.2656\"/><line style=\"stroke:#038048;stroke-width:1.5;\" x1=\"274\" x2=\"424\" y1=\"51.2656\" y2=\"51.2656\"/><line style=\"stroke:#038048;stroke-width:1.5;\" x1=\"124\" x2=\"124\" y1=\"91.2656\" y2=\"111.2656\"/><line style=\"stroke:#038048;stroke-width:1.5;\" x1=\"224\" x2=\"224\" y1=\"71.2656\" y2=\"91.2656\"/><line style=\"stroke:#038048;stroke-width:1.5;\" x1=\"274\" x2=\"274\" y1=\"51.2656\" y2=\"71.2656\"/><line style=\"stroke:#FF0000;stroke-width:1.5;\" x1=\"124\" x2=\"149\" y1=\"86.2656\" y2=\"86.2656\"/><polygon fill=\"#FF0000\" points=\"131.5175,83.5295,131.5175,89.0018,124,86.2656\" style=\"stroke:#FF0000;stroke-width:1.5;\"/><polygon fill=\"#FF0000\" points=\"141.4825,89.0018,141.4825,83.5295,149,86.2656\" style=\"stroke:#FF0000;stroke-width:1.5;\"/><text fill=\"#000000\" font-family=\"Serif\" font-size=\"14\" lengthAdjust=\"spacing\" textLength=\"86\" x=\"93.5\" y=\"77.9639\">{50 ms lag}<\/text><line style=\"stroke:#000000;stroke-width:1.7;\" x1=\"10\" x2=\"429\" y1=\"123.2656\" y2=\"123.2656\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"60\" x=\"15\" y=\"134.4043\">Web User<\/text><line style=\"stroke:#000000;stroke-width:1.0;\" x1=\"10\" x2=\"76\" y1=\"138.2344\" y2=\"138.2344\"/><line style=\"stroke:#000000;stroke-width:1.0;\" x1=\"76\" x2=\"86\" y1=\"138.2344\" y2=\"123.2656\"/><polygon fill=\"#D7E0F2\" points=\"56,164.5313,112,164.5313,124,176.5313,112,188.5313,56,188.5313\" style=\"stroke:#D7E0F2;stroke-width:1.5;\"/><path d=\"M56,164.5313 L112,164.5313 L124,176.5313 L112,188.5313 L56,188.5313 \" fill=\"#D7E0F2\" style=\"stroke:#038048;stroke-width:1.5;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"44\" x=\"68\" y=\"180.6855\">Absent<\/text><polygon fill=\"#D7E0F2\" points=\"136,164.5313,362,164.5313,374,176.5313,362,188.5313,136,188.5313,124,176.5313\" style=\"stroke:#038048;stroke-width:1.5;\"/><polygon fill=\"#D7E0F2\" points=\"386,164.5313,424,164.5313,424,188.5313,386,188.5313,374,176.5313\" style=\"stroke:#D7E0F2;stroke-width:1.5;\"/><path d=\"M424,164.5313 L386,164.5313 L374,176.5313 L386,188.5313 L424,188.5313 \" fill=\"#D7E0F2\" style=\"stroke:#038048;stroke-width:1.5;\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"46\" x=\"226\" y=\"180.6855\">Waiting<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"15\" x=\"386\" y=\"180.6855\">ok<\/text><line style=\"stroke:#FF0000;stroke-width:1.0;\" x1=\"224\" x2=\"299\" y1=\"153.8828\" y2=\"153.8828\"/><polygon fill=\"#FF0000\" points=\"231.5175,151.1467,231.5175,156.619,224,153.8828\" style=\"stroke:#FF0000;stroke-width:1.0;\"/><polygon fill=\"#FF0000\" points=\"291.4825,156.619,291.4825,151.1467,299,153.8828\" style=\"stroke:#FF0000;stroke-width:1.0;\"/><text fill=\"#000000\" font-family=\"Serif\" font-size=\"14\" lengthAdjust=\"spacing\" textLength=\"70\" x=\"226.5\" y=\"145.5811\">{150 ms}<\/text><line style=\"stroke:#000000;stroke-width:2.0;\" x1=\"124\" x2=\"124\" y1=\"198.5313\" y2=\"203.5313\"/><line style=\"stroke:#000000;stroke-width:2.0;\" x1=\"174\" x2=\"174\" y1=\"198.5313\" y2=\"203.5313\"/><line style=\"stroke:#000000;stroke-width:2.0;\" x1=\"224\" x2=\"224\" y1=\"198.5313\" y2=\"203.5313\"/><line style=\"stroke:#000000;stroke-width:2.0;\" x1=\"274\" x2=\"274\" y1=\"198.5313\" y2=\"203.5313\"/><line style=\"stroke:#000000;stroke-width:2.0;\" x1=\"324\" x2=\"324\" y1=\"198.5313\" y2=\"203.5313\"/><line style=\"stroke:#000000;stroke-width:2.0;\" x1=\"374\" x2=\"374\" y1=\"198.5313\" y2=\"203.5313\"/><line style=\"stroke:#000000;stroke-width:2.0;\" x1=\"424\" x2=\"424\" y1=\"198.5313\" y2=\"203.5313\"/><line style=\"stroke:#000000;stroke-width:2.0;\" x1=\"124\" x2=\"424\" y1=\"198.5313\" y2=\"198.5313\"/><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"8\" x=\"120\" y=\"215.6699\">0<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"24\" x=\"212\" y=\"215.6699\">200<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"24\" x=\"262\" y=\"215.6699\">300<\/text><text fill=\"#000000\" font-family=\"sans-serif\" font-size=\"12\" lengthAdjust=\"spacing\" textLength=\"24\" x=\"362\" y=\"215.6699\">500<\/text><\/g><\/svg><\/p>\n\n\n<\/details>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"basic-usage\"><a href=\"#basic-usage\" id=\"basic-usage\" class=\"anchor\"><\/a>Basic Usage<\/h3>\n<p>Using this plugin adds support for the <code>.uml<\/code> and <code>.puml<\/code> file extension to be recognized by Orchid. Any file that\nOrchid reads, such as blogs, static pages, or changelog versions, can use the <code>.uml<\/code> extension and be compiled as a\nPlantUML diagram.<\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n└── pages/\n    └── registration-flow.puml &lt;-- page content will be compiled to an SVG diagram\n<\/code><\/pre>\n<p>Alternatively, you may wish to embed diagrams within the content of another page. You can do this inline with the\n<code>compileAs()<\/code> template function.<\/p>\n<pre><code class=\"language-markdown\">// homepage.md\n---\n---\n\n{% filter compileAs('md') %}\nAlice -&gt; Bob: Authentication Request\nBob --&gt; Alice: Authentication Response\n\nAlice -&gt; Bob: Another authentication Request\nAlice &lt;-- Bob: another authentication Response\n{% endfilter %}\n\n<\/code><\/pre>\n<p>You may also use the <code>load()<\/code> function to embed it from another file.<\/p>\n<pre><code class=\"language-puml\">// diagram.uml\nAlice -&gt; Bob: Authentication Request\nBob --&gt; Alice: Authentication Response\n\nAlice -&gt; Bob: Another authentication Request\nAlice &lt;-- Bob: another authentication Response\n<\/code><\/pre>\n<pre><code class=\"language-markdown\">// homepage.md\n---\n---\n\n{{ load('diagram.uml') | raw }} # loads content of `diagram.uml`, compiles it as PlantUML, and embeds the result \n \n<\/code><\/pre>\n<h3 id=\"compiling-multiple-diagrams-at-once\"><a href=\"#compiling-multiple-diagrams-at-once\" id=\"compiling-multiple-diagrams-at-once\" class=\"anchor\"><\/a>Compiling Multiple Diagrams At Once<\/h3>\n<p>By default, Orchid does not need the <code>@startuml...@enduml<\/code> tags to compile diagram content; it will add them if they do\nnot exist. However, if you include multiple diagrams in a single file, each with their own <code>@startuml...@enduml<\/code> tags,\nthey will each be compiled as diagrams separately and embedded as separate SVG diagrams.<\/p>\n<pre><code class=\"language-puml\">// diagram.uml\n@startuml\nAlice -&gt; Bob: Authentication Request\nBob --&gt; Alice: Authentication Response\n\nAlice -&gt; Bob: Another authentication Request\nAlice &lt;-- Bob: another authentication Response\n@enduml\n\n@startuml\nCharlie -&gt; Dennis: Authentication Request\nDennis --&gt; Charlie: Authentication Response\n\nCharlie -&gt; Dennis: Another authentication Request\nCharlie &lt;-- Dennis: another authentication Response\n@enduml\n<\/code><\/pre>\n<h3 id=\"other-diagram-types\"><a href=\"#other-diagram-types\" id=\"other-diagram-types\" class=\"anchor\"><\/a>Other Diagram Types<\/h3>\n<p>If you omit the start/end tags from your diagram source, Orchid will assume it is a &quot;UML&quot; diagram and add\n<code>@startuml...@enduml<\/code> for you. However, PlantUML supports a variety of diagram formats, using differing start/end tags.\nThe following tags are supported by Orchid and PlantUML:<\/p>\n<ul>\n<li><code>@startuml/@enduml<\/code><\/li>\n<li><code>@startsalt/@endsalt<\/code><\/li>\n<li><code>@startmath/@endmath<\/code><\/li>\n<li><code>@startlatex/@endlatex<\/code><\/li>\n<li><code>@startgantt/@endgantt<\/code><\/li>\n<\/ul>\n<h3 id=\"mermaid-js\"><a href=\"#mermaid-js\" id=\"mermaid-js\" class=\"anchor\"><\/a>Mermaid JS<\/h3>\n<p>In addition to prerendered diagrams with PlantUML, you can add Mermaid JS diagrams to be rendered directly in the\nbrowser. Add the <code>mermaid<\/code> meta-component to your theme to add the necessary scripts to your site. By default, Markdown\ncode snippets with the <code>mermaid<\/code> language are converted to Mermaid diagrams, but you can customize the selector.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\ntheme:\n    metaComponents:\n        - type: mermaid\n          selector: '.mermaid' # optional\n<\/code><\/pre>\n"
          }]
        },
        "orchidchangelog": {
          "ownKey": "orchidchangelog",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidchangelog",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidchangelog"
            },
            "description": "Track and discover changes across the various versions of your library or application.",
            "title": "OrchidChangelog",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The Changelog plugin tracks changes by adding files in the <code>changelog/<\/code> directory. The filename is used as the version\nname by default, but it can also be set manually within the file's Front Matter as the <code>version<\/code> property. You can also\nset in the Front Matter whether a version is considered a &quot;major&quot; or a &quot;minor&quot; version. The content of the page is then\ntaken as the release notes for that version.<\/p>\n<p>This plugin also generates a JSON file, <code>meta/versions.json<\/code>, which includes a listing of all the major versions of your\nproject (you can optionally have it include minor versions as well). Sites which archive each version in a different URL\nroot may wish to have their theme try to locate the latest <code>meta/versions.json<\/code>, and use Javascript to display those\nversions. This way, older versions of your project's documentation can create a link to the documentation on newer\nversions.<\/p>\n<p>You may also include the <code>changelog<\/code> component on any page to render a listing of all versions with their release notes.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"azxHxi65Sj\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"azxHxi65Sj\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidChangelog:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidChangelog&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidChangelog&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidChangelog:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li><a href=\"https://orchid-revival.github.io/Orchid/changelog\">Changelog Component<\/a><\/li>\n<li><a href=\"https://orchid-revival.github.io/Orchid/meta/versions.json\">versions.json<\/a><\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"directory-based-multi-file\"><a href=\"#directory-based-multi-file\" id=\"directory-based-multi-file\" class=\"anchor\"><\/a>Directory-Based (multi-file)<\/h3>\n<p>Changelog versions are created as files sitting in the <code>changelog/<\/code> directory of your site content. The filenames should\nbe the version name, and they can be put in subdirectories for better organization. Alternatively, you can name the\nfiles something different and set the <code>version<\/code> property in each entry's Front Matter.<\/p>\n<p>The files are processed with the\nsame rules for other site content, where the file extension determines how to process the content. The content of the\nfile is the release notes for that version.<\/p>\n<p><strong>Example Changelog Directory Structure<\/strong><\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n└── changelog/\n    ├── 0.1/\n    |   └── 0.1.0.md\n    ├── 0.2/\n    |   └── 0.2.0.md\n    |   └── 0.2.1.md\n    ├── 1.0/\n    |   └── 1.0.0.md\n    |   └── 1.0.1.md\n    |   └── 1.1.0.md\n    └── 2.0/\n        └── 2.0.0.md\n<\/code><\/pre>\n<p><strong>Example Changelog entry<\/strong><\/p>\n<pre><code class=\"language-markdown\">// changelog/1.0.0.md \n---\n---\n\nThis project is now stable and ready for production use!\n\n# New Features\n\n...\n\n# Breaking Changes\n\n...\n<\/code><\/pre>\n<p>Changelog entries are ordered according to the versions' <a href=\"https://semver.org\">Semantic Versioning<\/a>, but are limited to\njust major, minor, and patch versions.<\/p>\n<p>Bumps between changelog versions are detected automatically.<\/p>\n<h3 id=\"file-based-single-file\"><a href=\"#file-based-single-file\" id=\"file-based-single-file\" class=\"anchor\"><\/a>File-Based (single file)<\/h3>\n<p>Singe version 0.18.2, Orchid now supports single-file changelog formats such as\n<a href=\"https://keepachangelog.com/en/1.0.0/\">Keep A Changelog<\/a>. In such formats, all versions of the software are documented\nin a single file, usually in the repository root in a file called <code>CHANGELOG.md<\/code> or something similar. OrchidChangelog\nwill locate this file, parse the individual versions from it based on a specified header regex, and construct your site\nchangelogs from these entries.<\/p>\n<p>The following configuration will change from the default directory-based changelogs to the file-based format:<\/p>\n<pre><code class=\"language-yaml\">changelog:\n  adapter: \n    type: &quot;file&quot;           # required\n    baseDir: &quot;./docs&quot;      # optional, change the directory to search for the changelog file in. Defaults to resources root dir\n    filename: &quot;CHANGES.md&quot; # optional, the name of the file to look for\n    versionRegex: '...'    # optional, change the regex used to locate version header lines in the file. Defaults to Markdown headers of level 1 or 2\n<\/code><\/pre>\n<p>The default syntax for a Changelog version header is a Markdown header of level 1 or 2, which contains the version name\nand an optional release date in <code>YYYY-MM-DD<\/code> format. Versions are usually listed in the file in reverse-chronological\norder.<\/p>\n<pre><code class=\"language-markdown\">## 1.1.0\n\n- Unreleased version\n\n## 1.0.0 - 2017-08-20\n\n- Major version release\n\n## 0.2.1 - 2017-07-09\n\n- Patch version release\n\n## 0.2.0 - 2017-07-08\n\n- Minor version release\n\n## 0.1.0 - 2017-06-20\n\n- Initial release\n<\/code><\/pre>\n<h3 id=\"customizing-versionsjson\"><a href=\"#customizing-versionsjson\" id=\"customizing-versionsjson\" class=\"anchor\"><\/a>Customizing <code>versions.json<\/code><\/h3>\n<p>Orchid creates a <code>meta/versions.json<\/code> file, which is an index of the &quot;important&quot; versions that others would need to know\nabout. Major versions are added to <code>versions.json<\/code> by default. Each entry contains the version number and whether that version\nwas a major, minor, or patch change or not.<\/p>\n<p>You can also have minor versions added to this index by adding <code>includeMinorVersions: true<\/code> to your <code>config.yml<\/code>:<\/p>\n<pre><code class=\"language-yaml\">changelog:\n  includeMinorVersions: true\n<\/code><\/pre>\n<p>In addition, you can have the release notes for each version added included with each entry in <code>versions.json<\/code> by adding\n<code>includeReleaseNotes: true<\/code> to your <code>config.yml<\/code>. The release notes are the compiled content of each entry:<\/p>\n<pre><code class=\"language-yaml\">changelog:\n  includeReleaseNotes: true\n<\/code><\/pre>\n"
          }]
        },
        "orchidwritersblocks": {
          "ownKey": "orchidwritersblocks",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidwritersblocks",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidwritersblocks"
            },
            "description": "A collection of Template Tags and Components that help you get past the writer's block and make building your site a dream.",
            "title": "OrchidWritersBlocks",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>This plugin adds a collection of useful tags and functions for Pebble to make writing content simpler.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"5uj0QZqTgX\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"5uj0QZqTgX\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidWritersBlocks:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidWritersBlocks&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidWritersBlocks&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidWritersBlocks:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidStarter\">starter app<\/a><\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"tags\"><a href=\"#tags\" id=\"tags\" class=\"anchor\"><\/a>Tags<\/h3>\n<h4 id=\"alert\"><a href=\"#alert\" id=\"alert\" class=\"anchor\"><\/a>Alert<\/h4>\n<p>Wrap content in a callout or bootstrap-style alert.<\/p>\n<pre><code class=\"language-jinja\">{% alert 'warning' %}\n    This is your final warning!\n{% endalert %}\n<\/code><\/pre>\n<h4 id=\"github-gist\"><a href=\"#github-gist\" id=\"github-gist\" class=\"anchor\"><\/a>Github Gist<\/h4>\n<p>Embed a Github Gist.<\/p>\n<pre><code class=\"language-jinja\">{% gist 'gistId' %}\n<\/code><\/pre>\n<h4 id=\"instagram\"><a href=\"#instagram\" id=\"instagram\" class=\"anchor\"><\/a>Instagram<\/h4>\n<p>Embed a photo from Instagram.<\/p>\n<pre><code class=\"language-jinja\">{% instagram 'username' 'postId' %}\n<\/code><\/pre>\n<h4 id=\"spotify\"><a href=\"#spotify\" id=\"spotify\" class=\"anchor\"><\/a>Spotify<\/h4>\n<p>Embed a Spotify track or playlist.<\/p>\n<pre><code class=\"language-jinja\">{% spotify 'track | playlist' 'trackOrPlaylistID' %}\n<\/code><\/pre>\n<h4 id=\"tabs\"><a href=\"#tabs\" id=\"tabs\" class=\"anchor\"><\/a>Tabs<\/h4>\n<p>Embed a Twitter post, collection, or timeline.<\/p>\n<pre><code class=\"language-jinja\">{% tabs %}\n    {% tab1 'One' %}Tab Content One{% endtab1 %}\n    {% tab2 'Two' %}Tab Content Two{% endtab2 %}\n{% endtabs %}\n<\/code><\/pre>\n<h4 id=\"twitter\"><a href=\"#twitter\" id=\"twitter\" class=\"anchor\"><\/a>Twitter<\/h4>\n<p>Embed a Twitter post, collection, or timeline.<\/p>\n<pre><code class=\"language-jinja\">{% twitter 'username' %}\nor\n{% twitter 'username' 'tweetId' %}\n<\/code><\/pre>\n<h4 id=\"youtube\"><a href=\"#youtube\" id=\"youtube\" class=\"anchor\"><\/a>Youtube<\/h4>\n<p>Embed a Youtube video.<\/p>\n<pre><code class=\"language-jinja\">{% youtube 'videoId' %}\n<\/code><\/pre>\n<h3 id=\"functions\"><a href=\"#functions\" id=\"functions\" class=\"anchor\"><\/a>Functions<\/h3>\n<h4 id=\"encode-spaces\"><a href=\"#encode-spaces\" id=\"encode-spaces\" class=\"anchor\"><\/a>Encode Spaces<\/h4>\n<p>Converts spaces to HTML-encoded non-breaking spaces to preserve spacing.<\/p>\n<pre><code class=\"language-jinja\">{{ encodeSpaces('text to encode') }}\n<\/code><\/pre>\n<h4 id=\"newline-to-br\"><a href=\"#newline-to-br\" id=\"newline-to-br\" class=\"anchor\"><\/a>Newline to BR<\/h4>\n<p>Converts newlines to BR tags to force HTML line breaks.<\/p>\n<pre><code class=\"language-jinja\">{{ nl2br('text to encode') }}\n<\/code><\/pre>\n<h4 id=\"pluralize\"><a href=\"#pluralize\" id=\"pluralize\" class=\"anchor\"><\/a>Pluralize<\/h4>\n<p>Attempts to convert a word to its English plural form.<\/p>\n<pre><code class=\"language-jinja\">{{ pluralize('word', 2) }}\n<\/code><\/pre>\n"
          }]
        },
        "orchidpages": {
          "ownKey": "orchidpages",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidpages",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidpages"
            },
            "description": "Add static pages with rich taxonomy to your Orchid site.",
            "title": "OrchidPages",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>Static pages allow you to add pages to your Orchid site in with ultimate flexibility. Simply drop content files in your\n<code>pages/<\/code> directory, and they will be rendered in your site at the same URL as they reside in that directory. Pages can\ncontain any content, use any layout, and have no restriction on their URL path, because it is simply their location on\ndisk that determines their URL, which all gives you a ton of flexibility with static pages.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"5ehtS7UU2p\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"5ehtS7UU2p\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidPages:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidPages&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidPages&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidPages:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidStarter\">starter app<\/a><\/li>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidPages/src/test/kotlin/com/eden/orchid/pages/PagesGeneratorTest.kt\">PagesGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"basic-usage\"><a href=\"#basic-usage\" id=\"basic-usage\" class=\"anchor\"><\/a>Basic Usage<\/h3>\n<p>Any files in the <code>pages/<\/code> directory will be compiled according to their file extension to a page at the same path they\nare in the <code>pages/<\/code> directory. Pages with a filename of <code>index<\/code> are special, in that they will become the index page for\nthe directory they are placed in, rather than living at a path ending in <code>index<\/code>:<\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n└── pages/\n    ├── changelog.md &lt;-- compiled as Markdown to /changelog\n    └── features/\n        ├── index.md &lt;-- lives at /features\n        ├── feature-one.md &lt;-- lives at /features/feature-one\n        └── feature-two.md &lt;-- lives at /features/feature-two\n<\/code><\/pre>\n<h3 id=\"page-groups\"><a href=\"#page-groups\" id=\"page-groups\" class=\"anchor\"><\/a>Page Groups<\/h3>\n<p>When placing pages into subdirectories, the specific subdirectory they are placed in typically defines a top-level\ncategorization for those pages. In Orchid, the first directory a Static Page is placed in is known as its <strong>group<\/strong>.\nPages can then be located from a Collection, filtering by their Group.<\/p>\n<p>Page groups are useful for configuring all the pages in a group from a single Archetype. They are also very useful in\ncombination with the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidtaxonomies\">Taxonomies plugin<\/a> to generate archive listings for each page\ngroup.<\/p>\n<h3 id=\"menu-items\"><a href=\"#menu-items\" id=\"menu-items\" class=\"anchor\"><\/a>Menu Items<\/h3>\n<p>The Pages plugin comes with two useful menu items: <code>pages<\/code>, and <code>pageIds<\/code>.<\/p>\n<p>The <code>pages<\/code> menu item adds all static pages to a menu, optionally filtered by page group.<\/p>\n<p>The <code>pageIds<\/code> menu item will parse the page content, looking for header tags (<code>h1<\/code>, <code>h2<\/code>, etc.) with ID attributes\n(these are added in Markdown by default) and generate a menu with links to each header. You can customize the level of\nheaders included in this menu with the <code>maxLevel<\/code> and <code>minLevel<\/code> options. By default, all items are displayed flat, but\nyou can have them set up in a nested structure matching the hierarchy of header tags on the page by setting\n<code>structure: nested<\/code>.<\/p>\n<h3 id=\"render-modes\"><a href=\"#render-modes\" id=\"render-modes\" class=\"anchor\"><\/a>Render Modes<\/h3>\n<p>You may wish to change how static pages are rendered, for example to be rendered raw and the page to be the entire,\nfully-customized HTML of that page. To do this, you can set the <code>renderMode<\/code> to <code>raw<\/code> in a page's Front Matter to just\nrender its contents directly and not use a layout at all. You may also set <code>usePrettyUrl<\/code> to determine whether to use\na &quot;pretty&quot; URL (like /contact) or not (like /contact.html).<\/p>\n"
          }]
        },
        "orchidswagger": {
          "ownKey": "orchidswagger",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidswagger",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidswagger"
            },
            "description": "Embed the Swagger UI within any Orchid page.",
            "title": "OrchidSwagger",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The OrchidSwagger makes it convenient to embed the <a href=\"https://swagger.io/tools/swagger-ui/\">Swagger UI<\/a> in your\ndocumentation site.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"E90oJeQmZf\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"E90oJeQmZf\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidSwagger:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidSwagger&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidSwagger&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidSwagger:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidSwagger/src/test/kotlin/com/eden/orchid/swagger/SwaggerTest.kt\">SwaggerTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<p>The OrchidSwagger plugin allows you to add the <code>swagger<\/code> component to any page. This will include the Swagger UI\nJavascript and CSS necessary to use the Swagger UI, you just need to supply the component with the URL of your OpenAPI\nJSON definition. Note that, since the Swagger UI fetches the <code>openApiSource<\/code> in the browser, the URL given must not be\nblocked by <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS<\/a>.<\/p>\n<pre><code class=\"language-markdown\">// pages/api.md\n---\ncomponents:\n  - type: 'swaggerUi'\n    openApiSource: 'https://petstore.swagger.io/v2/swagger.json'\n---\n<\/code><\/pre>\n"
          }]
        },
        "orchidnetlifycms": {
          "ownKey": "orchidnetlifycms",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidnetlifycms",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidnetlifycms"
            },
            "description": "No configuration, fully-featured Netlify CMS for Orchid.",
            "title": "OrchidNetlifyCMS",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The OrchidNetlifyCMS plugin adds everything necessary to get the <a href=\"https://www.netlifycms.org/\">Netlify CMS<\/a> added to\nyour Orchid site so you can manage all your content with an beautiful and easy-to-use web interface. This plugin\ngenerates the Netlify CMS' required <code>config.yml<\/code> (not to be confused with Orchid's <code>config.yml<\/code>), and also creates\nwidgets for the Orchid-specific content types like Components, Menus, and Template Tags.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"2Gmm1CtpGH\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"2Gmm1CtpGH\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidNetlifyCMS:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidNetlifyCMS&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidNetlifyCMS&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidNetlifyCMS:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<ul>\n<li>Try the <a href=\"https://github.com/orchidhq/OrchidStarter\">starter app<\/a><\/li>\n<li>Run <a href=\"https://github.com/orchidhq/orchid/blob/dev/plugins/OrchidNetlifyCMS/src/test/kotlin/com/eden/orchid/netlifycms/NetlifyCmsGeneratorTest.kt\">NetlifyCmsGeneratorTest<\/a> for demo<\/li>\n<\/ul>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<p>This plugin can be used with any netlify CMS backend you like, but when Orchid is running in <code>serve<\/code> mode, it will\nconfigure itself to be the backend. This allows Orchid's embedded server to serve the content to Netlify CMS for\ndevelopment and local content editing. No configuration is necessary to use Orchid as the Netlify CMS backend, it is\nautomatically set up for you when running <code>serve<\/code>, and your configured backend is then used when your site is generated\nfor production.<\/p>\n<p>The <em>only<\/em> configuration necessary for you to add the Netlify CMS to your Orchid site, is to configure your backend. You\nmay also want to change the <code>resourceRoot<\/code> and <code>mediaFolder<\/code>, which must be configured relative to your Git repository\nroot, but if you are using the default Gradle plugin settings and your Orchid site isn't a Gradle multi-project, then\nthe defaults will already be set up correctly for you.<\/p>\n"
          }]
        },
        "orchidazure": {
          "ownKey": "orchidazure",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidazure",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidazure"
            },
            "description": "Connect your Orchid site to Microsoft Azure services.",
            "title": "OrchidAzure",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>OrchidAzure connects your <a href=\"https://azure.microsoft.com/en-us/services/devops/wiki/\">Azure DevOps Wiki<\/a> to Orchid, making\nit simple to publish your knowledge base as a full website.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"2FwF8vlQCM\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"2FwF8vlQCM\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidAzure:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidAzure&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidAzure&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidAzure:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<p>This plugin is currently still in progress and not all features are available with a demo yet. Please check back later.<\/p>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"wiki-adapter\"><a href=\"#wiki-adapter\" id=\"wiki-adapter\" class=\"anchor\"><\/a>Wiki Adapter<\/h3>\n<blockquote>\n<p><em>This feature is still in progress and is not yet available<\/em><\/p>\n<\/blockquote>\n<p>OrchidAzure comes with an <code>azure<\/code> Wiki Adapter, to connect to an existing Wiki for your Azure DevOps team and embed it\nas a wiki section. This will clone the wiki repository and convert its contents to an Orchid wiki automatically. The\norder of pages in the wiki will match the order set up in the online repo, and a summary generated to match the file\nstructure.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nwiki: \n  sections:\n    userManual:\n      adapter: \n        type: &quot;azure&quot;\n        repo: &quot;[Azure DevOps wiki repository URL]&quot;\n<\/code><\/pre>\n"
          }]
        },
        "orchidnetlify": {
          "ownKey": "orchidnetlify",
          "ownPages": [{
            "reference": {
              "path": "plugins",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidnetlify",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/plugins/orchidnetlify"
            },
            "description": "Connect your Orchid site to Netlify services.",
            "title": "OrchidNetlify",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>OrchidNetlify connects your Orchid site to Netlify's platform, enabling you to publish your site to Netlify without\nneeding to use the Netlify's CI build platform.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"UHnpRTMHJk\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"UHnpRTMHJk\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidNetlify:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidNetlify&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidNetlify&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidNetlify:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"demo\"><a href=\"#demo\" id=\"demo\" class=\"anchor\"><\/a>Demo<\/h2>\n<p>No demo available.<\/p>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"netlify-publisher\"><a href=\"#netlify-publisher\" id=\"netlify-publisher\" class=\"anchor\"><\/a>Netlify Publisher<\/h3>\n<p>Netlify's CI platform is really great and easy to set up, but there may be situations where you cannot use their CI\ninfrastructure but still wish to host your site on Netlify, such as a build that takes longer than 15 minutes, or\nrequires tooling not supported by Linux (like Swift documentation).<\/p>\n<p>In this case, you can use the <code>netlify<\/code> publisher to upload your site to Netlify after a successful Orchid build. You\nmust have a personal access token set for publication to work, see <a href=\"#configuration\">Configuration<\/a> below.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nservices:\n  publications:\n    stages:\n      - type: 'netify'\n        siteId: '[site name].netlify.com' # the Netlify sitename. If your site base URL is a Netlify URL, this is optional\n<\/code><\/pre>\n<p>Currently, only the site is deployed to Netlify, Functions are not supported by Orchid.<\/p>\n<h3 id=\"configuration\"><a href=\"#configuration\" id=\"configuration\" class=\"anchor\"><\/a>Configuration<\/h3>\n<p>You must generate a\n<a href=\"https://www.netlify.com/docs/cli/#obtain-a-token-in-the-netlify-ui\">personal access token<\/a> from Netlify to successfully\nauthenticate and allow Orchid to perform actions on your behalf, like publishing a site to Netlify. This can be set as\nthe <code>netlifyToken<\/code> environment variable, or passed to Orchid from Gradle.<\/p>\n<pre><code class=\"language-groovy\">// build.gradle\norchid {\n    netlifyToken = project.property(&quot;netlifyToken&quot;)\n}\n<\/code><\/pre>\n<p>Note that this token grants full access to your account, and should be treated like any normal password. Never check it\nin to your repository.<\/p>\n"
          }]
        }
      }
    },
    "bundles": {
      "ownKey": "bundles",
      "childrenPages": {
        "orchidlanguagepack": {
          "ownKey": "orchidlanguagepack",
          "ownPages": [{
            "reference": {
              "path": "bundles",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidlanguagepack",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/bundles/orchidlanguagepack"
            },
            "description": "",
            "title": "OrchidLanguagePack",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The Orchid Language Pack bundle is not a ready-to-use bundle, but does group together all the plugins designed to\nimprove your composing and documenting experience. All official Orchid plugins which add new Compilers, markup your\npage content, or otherwise extend the language capabilities of your Orchid site are bundled here. Some examples include:<\/p>\n<ul>\n<li>Compile your pages with <a href=\"https://asciidoctor.org/docs/asciidoctorj/\">Asciidoctor<\/a> by using the <code>.ad<\/code> or <code>.asciidoc<\/code>\nfile extension<\/li>\n<li>Add syntax highlighting to your code snippets. Choose from static highlighting with\n<a href=\"https://pygments.org/docs/java/\">Pygments<\/a>, or browser-side highlighting with <a href=\"https://prismjs.com/\">Prism.js<\/a>.<\/li>\n<li>Load the text of Bible verse references automatically. Choose from static references loading with a Markdown\nextension, or use the <a href=\"https://reftagger.com\">Faithlife Reftagger.js<\/a> to load verses on-demand.<\/li>\n<\/ul>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"W9nZP7Dze9\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"W9nZP7Dze9\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidLanguagePack:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidLanguagePack&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidLanguagePack&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidLanguagePack:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"included-in-this-bundle\"><a href=\"#included-in-this-bundle\" id=\"included-in-this-bundle\" class=\"anchor\"><\/a>Included In This Bundle<\/h2>\n<nav class=\"menu\" style=\"margin-bottom: 1.5rem;\">\n  <ul class=\"menu-list\">\n  \n  \n\n  \n    <li><a href=\"\">Orchid Asciidoc<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidBible<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidDiagrams<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidSyntaxHighlighter<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidWritersBlocks<\/a><\/li>\n  \n  \n  <\/ul>\n<\/nav>\n"
          }]
        },
        "orchiddocs": {
          "ownKey": "orchiddocs",
          "ownPages": [{
            "reference": {
              "path": "bundles",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchiddocs",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/bundles/orchiddocs"
            },
            "description": "",
            "title": "OrchidDocs",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The Orchid Docs bundle is your one-stop-shop to get started documenting your projects with Orchid! It includes the most\ncommon plugins needed to create landing pages and wikis with rich content, perfect for diagramming and documenting your\ncode projects. It also comes with the Editorial theme so you can jump right in and just start documenting without\nworrying about picking or customizing theme templates.<\/p>\n<p>This bundle also works well when combined with any of the <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidjavadoc\">OrchidJavadoc<\/a>,\n<a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidkotlindoc\">OrchidKotlindoc<\/a>, or <a href=\"https://orchid-revival.github.io/Orchid/plugins/orchidswiftdoc\">OrchidSwiftdoc<\/a> plugins, or all three!<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"XBIXwtGwGS\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"XBIXwtGwGS\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidDocs:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidDocs&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidDocs&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidDocs:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"included-in-this-bundle\"><a href=\"#included-in-this-bundle\" id=\"included-in-this-bundle\" class=\"anchor\"><\/a>Included In This Bundle<\/h2>\n<nav class=\"menu\" style=\"margin-bottom: 1.5rem;\">\n  <ul class=\"menu-list\">\n  \n  \n\n  \n    <li><a href=\"\">OrchidEditorial<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidPages<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidWiki<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidForms<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidChangelog<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidSearch<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidDiagrams<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidSyntaxHighlighter<\/a><\/li>\n  \n  \n  <\/ul>\n<\/nav>\n"
          }]
        },
        "orchidall": {
          "ownKey": "orchidall",
          "ownPages": [{
            "reference": {
              "path": "bundles",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidall",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/bundles/orchidall"
            },
            "description": "",
            "title": "OrchidAll",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>An Orchid bundle containing every officially-developed Orchid plugin and theme. This offers the greatest flexibility to\ntry out all the features offered by Orchid and find out which ones are right for you.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"aJHDDB42Hj\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"aJHDDB42Hj\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidAll:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidAll&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidAll&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidAll:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"included-in-this-bundle\"><a href=\"#included-in-this-bundle\" id=\"included-in-this-bundle\" class=\"anchor\"><\/a>Included In This Bundle<\/h2>\n<nav class=\"menu\" style=\"margin-bottom: 1.5rem;\">\n  <ul class=\"menu-list\">\n  \n  \n\n  \n    <li><a href=\"\">OrchidBsDoc<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidEditorial<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidFutureImperfect<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidAsciidoc<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidBible<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidDiagrams<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidSyntaxHighlighter<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidWritersBlocks<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidChangelog<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidForms<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidJavadoc<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidKSS<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidNetlifyCMS<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidPages<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidPluginDocs<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidPosts<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidPresentations<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidSwagger<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidTaxonomies<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidWiki<\/a><\/li>\n  \n  \n  <\/ul>\n<\/nav>\n"
          }]
        },
        "orchidblog": {
          "ownKey": "orchidblog",
          "ownPages": [{
            "reference": {
              "path": "bundles",
              "baseUrl": "https://orchid-revival.github.io/Orchid",
              "fileName": "orchidblog",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://orchid-revival.github.io/Orchid/bundles/orchidblog"
            },
            "description": "",
            "title": "OrchidBlog",
            "content": "<h2 id=\"about\"><a href=\"#about\" id=\"about\" class=\"anchor\"><\/a>About<\/h2>\n<p>The Orchid Blog bundle provides just what you need to get started writing your blog, and nothing more. You won't get\nbogged down trying to figure out what plugins you need as we have don'e the hard work for you. And every blog is unique,\nso we make no assumptions about how your site should look, giving you the freedom to pick one of our official Orchid\nthemes, any other existing themes, or build your own from scratch!<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<div class=\"tabs\">\n  <ul data-tabs=\"230JUlK3dL\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>KScript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"230JUlK3dL\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">dependencies {\n    orchidRuntime(&quot;io.github.javaeden.orchid:OrchidBlog:unspecified&quot;)\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.javaeden.orchid&lt;/groupId&gt;\n    &lt;artifactId&gt;OrchidBlog&lt;/artifactId&gt;\n    &lt;version&gt;unspecified&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-scala\">libraryDependencies += &quot;io.github.javaeden.orchid&quot; % &quot;OrchidBlog&quot; % &quot;unspecified&quot;\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">@file:DependsOn(&quot;io.github.javaeden.orchid:OrchidBlog:unspecified&quot;)\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"included-in-this-bundle\"><a href=\"#included-in-this-bundle\" id=\"included-in-this-bundle\" class=\"anchor\"><\/a>Included In This Bundle<\/h2>\n<nav class=\"menu\" style=\"margin-bottom: 1.5rem;\">\n  <ul class=\"menu-list\">\n  \n  \n\n  \n    <li><a href=\"\">OrchidPosts<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidPages<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidForms<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidTaxonomies<\/a><\/li>\n  \n  \n  \n\n  \n    <li><a href=\"\">OrchidLanguagePack<\/a><\/li>\n  \n  \n  <\/ul>\n<\/nav>\n"
          }]
        }
      }
    }
  }
}